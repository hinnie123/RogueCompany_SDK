#pragma once

// RogueCompany (Dumped by Hinnie) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Killstreak.AkPoolComponent
// 0x0078 (0x0190 - 0x0118)
class UAkPoolComponent : public UBasePoolComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0118(0x0008) MISSED OFFSET
	class UClass*                                      PooledAkComponentClass;                                   // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UAkComponent*>                        UnusedComponentsArray;                                    // 0x0128(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0138(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.AkPoolComponent.UsedComponentsSet
	class UAkComponent*                                PeekedAkComponent;                                        // 0x0188(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.AkPoolComponent");
		return ptr;
	}

};


// Class Killstreak.AnimNotifyState_LeftHandIKOff
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_LeftHandIKOff : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.AnimNotifyState_LeftHandIKOff");
		return ptr;
	}

};


// Class Killstreak.ItemCollection
// 0x0068 (0x0098 - 0x0030)
class UItemCollection : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                          _Rules;                                                   // 0x0030(0x0010) (Edit)
	struct FGameplayTagQuery                           CollectionQuery;                                          // 0x0040(0x0048) (Edit)
	struct FName                                       PrimaryAssetType;                                         // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.ItemCollection");
		return ptr;
	}

};


// Class Killstreak.ApparelCollection
// 0x0040 (0x00D8 - 0x0098)
class UApparelCollection : public UItemCollection
{
public:
	struct FText                                       ApparelCollectionName;                                    // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       ApparelCollectionDescription;                             // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.ApparelCollection");
		return ptr;
	}

};


// Class Killstreak.AttachmentCollection
// 0x00B0 (0x0148 - 0x0098)
class UAttachmentCollection : public UItemCollection
{
public:
	struct FText                                       AttachmentCollectionName;                                 // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       AttachmentCollectionDescription;                          // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x80];                                      // 0x00C8(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.AttachmentCollection");
		return ptr;
	}


	void GetCompatibleAttachmentsForWeaponType(struct FGameplayTag* WeaponType);
};


// Class Killstreak.EchoBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UEchoBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.EchoBlueprintLibrary");
		return ptr;
	}


	void STATIC_RequestEchoFromActor(class UObject** WorldContextObject, class UAkAudioEvent** EchoEvent, class AActor** OriginActor, float* ZOffset, float* SpeedOfSound, int* NumberOfEchosToTrace, float* EchoTraceRange, bool* bAllowPostAtMaxDistance);
	void STATIC_RequestEcho(class UObject** WorldContextObject, class UAkAudioEvent** EchoEvent, struct FVector* EchoOrigin, struct FRotator* EchoOrientation, float* SpeedOfSound, int* NumberOfEchosToTrace, float* EchoTraceRange, bool* bAllowPostAtMaxDistance);
};


// Class Killstreak.EnvironmentActorInterface
// 0x0000 (0x0028 - 0x0028)
class UEnvironmentActorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.EnvironmentActorInterface");
		return ptr;
	}


	void TrackerLeave(class UEnvironmentTrackerComponent** tracker);
	void TrackerEnter(class UEnvironmentTrackerComponent** tracker);
	struct FName GetEnvironmentTag();
};


// Class Killstreak.EnvironmentListenerComponent
// 0x0018 (0x0110 - 0x00F8)
class UEnvironmentListenerComponent : public UActorComponent
{
public:
	struct FName                                       CurrentEnvironmentTag;                                    // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FName                                       StartingEnvironment;                                      // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UEnvironmentTrackerComponent> LastTrackerComponent;                                     // 0x0108(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.EnvironmentListenerComponent");
		return ptr;
	}


	void ViewTargetEnvironmentChanged(struct FName* OldEnvironmentTag, struct FName* NewEnvironmentTag);
	void OnEnvironmentChanged(struct FName* OldEnvironmentTag);
	struct FName GetCurrentEnvironment();
};


// Class Killstreak.EnvironmentTrackerComponent
// 0x0080 (0x0178 - 0x00F8)
class UEnvironmentTrackerComponent : public UActorComponent
{
public:
	TArray<TScriptInterface<class UEnvironmentActorInterface>> EnvironmentVolumes;                                       // 0x00F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TMap<struct FName, int>                            CachedEnvironmentCounts;                                  // 0x0108(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst)
	struct FName                                       CachedCurrentEnvironment;                                 // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FName                                       DefaultEnvironment;                                       // 0x0160(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEnvironmentChanged;                                     // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.EnvironmentTrackerComponent");
		return ptr;
	}


	struct FName ReevalulateEnvironment();
	struct FName GetCurrentEnvironment();
	void EndTouchingOwnerUpdatedComponent(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void BlueprintEnvironmentChanged(struct FName* OldEnvironment);
	void BeginTouchingOwnerUpdatedComponent(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
};


// Class Killstreak.EnvironmentVolume
// 0x0010 (0x0378 - 0x0368)
class AEnvironmentVolume : public ATriggerVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	struct FName                                       EnvironmentTag;                                           // 0x0370(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.EnvironmentVolume");
		return ptr;
	}

};


// Class Killstreak.JobCollection
// 0x0040 (0x00D8 - 0x0098)
class UJobCollection : public UItemCollection
{
public:
	struct FText                                       CollectionName;                                           // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       CollectionDescription;                                    // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.JobCollection");
		return ptr;
	}

};


// Class Killstreak.KSJobRole
// 0x0040 (0x0070 - 0x0030)
class UKSJobRole : public UDataAsset
{
public:
	struct FText                                       JobRoleDisplayName;                                       // 0x0030(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FName                                       JobRoleName;                                              // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       JobRoleDescription;                                       // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UTexture2D*                                  JobRoleIcon;                                              // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSJobRole");
		return ptr;
	}


	class UTexture2D* GetRoleIcon();
};


// Class Killstreak.KickbackModule
// 0x0000 (0x0028 - 0x0028)
class UKickbackModule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KickbackModule");
		return ptr;
	}


	struct FInterpCurveVector2D MakeKickbackInstance(int* ShotIndex, float* AbsoluteMaxDuration);
	float GetMaximumVerticalKick();
	float GetMaximumHorizontalKick();
};


// Class Killstreak.KickbackModuleRandom
// 0x0018 (0x0040 - 0x0028)
class UKickbackModuleRandom : public UKickbackModule
{
public:
	float                                              MinAmplitude;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAmplitude;                                             // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDuration;                                              // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDuration;                                              // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxOffsetFromVertical;                                    // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KickbackModuleRandom");
		return ptr;
	}

};


// Class Killstreak.Killstreak_ShippingConsole
// 0x0000 (0x0138 - 0x0138)
class UKillstreak_ShippingConsole : public UPGame_ShippingConsole
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.Killstreak_ShippingConsole");
		return ptr;
	}

};


// Class Killstreak.KillstreakGameSingleton
// 0x0060 (0x0088 - 0x0028)
class UKillstreakGameSingleton : public UPlatformGameSingleton
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0028(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KillstreakGameSingleton");
		return ptr;
	}

};


// Class Killstreak.KSAccoladeTracker
// 0x0068 (0x0090 - 0x0028)
class UKSAccoladeTracker : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	struct FAccoladeDisplayInfo                        _AccoladeDisplayInfo;                                     // 0x0038(0x0058) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAccoladeTracker");
		return ptr;
	}


	void StartTracking();
	void ResetTracker();
	void NativeHandleElimEvent(struct FCombatEventInfo* ElimEvent);
	void NativeHandleDownEvent(struct FCombatEventInfo* DownEvent);
	void HandleElimEvent(struct FCombatEventInfo* ElimEvent);
	void HandleDownEvent(struct FCombatEventInfo* DownEvent);
	struct FAccoladeDisplayInfo GetPrimaryAccoladeDisplayInfo();
	bool GetOwningGameMode(class AKSGameMode** OutGameMode);
	void DispatchGameStateAccoladeDisplay(class AKSPlayerState** RelevantPlayer, struct FAccoladeDisplayInfo* AccoladeToDisplay, bool* IgnoreRelevantPlayerId);
};


// Class Killstreak.KSActivityInstanceManager
// 0x00A0 (0x00C8 - 0x0028)
class UKSActivityInstanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0028(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSActivityInstanceManager");
		return ptr;
	}

};


// Class Killstreak.KSActivity
// 0x0148 (0x01E8 - 0x00A0)
class UKSActivity : public UPlatformInventoryItem
{
public:
	int64_t                                            ProgressLootId;                                           // 0x00A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int64_t                                            RewardVendorId;                                           // 0x00A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int64_t                                            RewardXpTableId;                                          // 0x00B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<int64_t>                                    EntitlementItemIds;                                       // 0x00B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00C8(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSActivity.ChildActivities
	unsigned char                                      UnknownData01[0x28];                                      // 0x00D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSActivity.TrackerClass
	TMap<struct FString, float>                        TrackerConfig;                                            // 0x0100(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bIsClientAuthority;                                       // 0x0150(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCreateTrackerIfFinished;                                 // 0x0151(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAlwaysAllowProgress;                                     // 0x0152(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0153(0x0005) MISSED OFFSET
	struct FActivityAchievementInfo                    _AchievementInfo;                                         // 0x0158(0x0058) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	EKSActivityProgressDisplayType                     ProgressDisplayPreference;                                // 0x01B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x01B1(0x0007) MISSED OFFSET
	struct FActivityReference                          _Reference;                                               // 0x01B8(0x0030) (BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSActivity");
		return ptr;
	}


	void InitNewlyCreatedActivity(int64_t* InItemId, int64_t* InProgressLootId, int64_t* InRewardXpTableId, int64_t* InRewardVendorId);
	class UKSActivityInstance* GetInstanceForPlayer(class UObject** WorldContextObject, class AKSPlayerController** Player);
};


// Class Killstreak.KSJobActivity
// 0x0028 (0x0210 - 0x01E8)
class UKSJobActivity : public UKSActivity
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobActivity.ReferenceJob

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSJobActivity");
		return ptr;
	}

};


// Class Killstreak.KSActivityInstance
// 0x00A8 (0x00D0 - 0x0028)
class UKSActivityInstance : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnProgressIncremented;                                    // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProgressTierReached;                                    // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProgressCompleted;                                      // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSEventTracker*                             TrackerInstance;                                          // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                ProgressCount;                                            // 0x0060(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FActivityTier>                       ActivityTiers;                                            // 0x0068(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0078(0x0020) MISSED OFFSET
	TWeakObjectPtr<class AKSPlayerController>          _PlayerController;                                        // 0x0098(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UKSActivity*                                 _Activity;                                                // 0x00A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UKSActivityInstance*>                 ChildActivityInstances;                                   // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TWeakObjectPtr<class UKSActivityManagerBase>       _ActivityManager;                                         // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsInitialized;                                           // 0x00C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	int                                                ProgressEarned;                                           // 0x00C4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	double                                             PlatformAchievementProgress;                              // 0x00C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSActivityInstance");
		return ptr;
	}


	void UpdateActivityTiers();
	void OnEventTrackerTriggered(int* Count);
	bool IsUnlocked();
	bool IsFinished();
	bool IsActive();
	bool IncrementProgress(int* Count);
	bool HasPlatformAchievement();
	bool HasAuthority();
	void GetTiers(TArray<struct FActivityTier>* Tiers);
	struct FActivityTier GetProgressTier();
	bool GetProgressPercentageToNextTier(float* ProgressPercentage);
	bool GetProgressPercentageToMaxTier(float* ProgressPercentage);
	int GetProgressEarned();
	struct FText GetProgressDisplayText(EKSActivityProgressDisplayType* DisplayType);
	int GetProgressCount();
	int64_t GetPlayerId();
	struct FActivityTier GetNextTier();
	bool GetMaxTier(struct FActivityTier* MaxTier);
	struct FDateTime GetLastProgressTime();
	int GetInventoryProgressCount();
	struct FInventoryId GetInventoryId();
	void CreateTracker();
};


// Class Killstreak.KSActivityManagerBase
// 0x0198 (0x01C0 - 0x0028)
class UKSActivityManagerBase : public UObject
{
public:
	TWeakObjectPtr<class UKSGameInstance>              _GameInstance;                                            // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class AKSGameMode>                  _GameMode;                                                // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                VendorsLoadGroupId;                                       // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x10];                                      // 0x003C(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSActivityManagerBase.Activities
	TArray<TWeakObjectPtr<class AKSPlayerController>>  PlayerControllers;                                        // 0x0050(0x0010) (ZeroConstructor, Transient)
	EKSActivityManagerSetupPhase                       _SetupPhase;                                              // 0x0060(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bAchievementIntegrationEnabled;                           // 0x0061(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x15E];                                     // 0x0062(0x015E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSActivityManagerBase");
		return ptr;
	}


	void RequestActivitiesLoad();
	bool QueryActivityInstancesByTime(TArray<class UKSActivityInstance*>* ActivityInstances, struct FTimespan* TimeWindow, EKSActivityTimeQueryType* QueryType, class AKSPlayerController** Player, TArray<class UKSActivityInstance*>* Results);
	bool QueryActivityInstances(TArray<class UKSActivityInstance*>* ActivityInstances, EKSActivityInstanceQueryType* QueryType, TArray<class UKSActivityInstance*>* Results);
	void OnStoreVendorsLoaded(int* GroupId, TArray<int>* VendorIds);
	void OnSetupPhaseStarted(EKSActivityManagerSetupPhase* Phase);
	void OnSetupPhaseFinished(EKSActivityManagerSetupPhase* Phase);
	void OnServerPlayerPostLogin(class AGameModeBase** InGameMode, class APlayerController** NewPlayer);
	void OnServerPlayerLogout(class AGameModeBase** InGameMode, class AController** Player);
	void OnGameModePhaseChanged(struct FName* PreviousPhaseName, struct FName* NewPhaseName);
	void OnGameModeInitialized(class AGameModeBase** InGameMode);
	void OnClientLoggedIn();
	void OnAllActivitiesLoaded();
	bool IsSetupFinished();
	bool IsAchievementIntegrationEnabled();
	void GoToNextSetupPhase();
	bool GetActivityInstances(class AKSPlayerController** Player, TArray<class UKSActivityInstance*>* ActivityInstances);
	class UKSActivityInstance* GetActivityInstanceByItemId(int64_t* ItemId, class AKSPlayerController** Player);
	class UKSActivityInstance* GetActivityInstance(struct FInventoryId* InventoryId);
	class UKSActivity* FindActivity(int64_t* ReferenceValue1, int64_t* ReferenceValue2, int64_t* ReferenceValue3);
	bool FindActivitiesByJob(class UKSJobItem** JobItem, TArray<class UKSJobActivity*>* JobActivities);
	bool DoesRequireSetupPhase(EKSActivityManagerSetupPhase* Phase);
	void AttemptInitialActivityCreation();
};


// Class Killstreak.KSLagCompensatedActor
// 0x0030 (0x0360 - 0x0330)
class AKSLagCompensatedActor : public AActor
{
public:
	class AKSLagCompensatedActor*                      RealActor;                                                // 0x0330(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AKSLagCompensatedActor*                      FakeActor;                                                // 0x0338(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PredictedSpawnTimeoutTime;                                // 0x0340(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDestroyFakeOnYieldToReal;                                // 0x0344(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0345(0x0003) MISSED OFFSET
	uint64_t                                           LagCompActorID;                                           // 0x0348(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0350(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLagCompensatedActor");
		return ptr;
	}


	void YieldToRealActor();
	void TryToDestroy();
	void SetLagCompActorIDFromWeapon(class AKSWeapon** SpawningWeapon);
	void SetLagCompActorIDFromParentProjectile(class AKSProjectile** ParentProjectile, int* Index);
	void SetLagCompActorIDFromModInstance(class UKSPlayerModInstance** SpawningModInst);
	void RealActorTakeOver();
	void RealActorDestroyed(class AActor** Real);
	void OnTakeOverAsRealActor();
	void OnRep_LagCompActorID();
	void OnRealActorSpawn(class AKSLagCompensatedActor** Real);
	bool IsClientPredictedActor();
	bool IsActiveRealActor();
	void InitializeRealActor();
	void InitializeFakeActor();
	void FakeDestroyCleanup();
};


// Class Killstreak.KSAgentBase
// 0x0068 (0x03C8 - 0x0360)
class AKSAgentBase : public AKSLagCompensatedActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0360(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAgentRefund;                                            // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               BeginMissionOnPlay;                                       // 0x0378(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0379(0x0007) MISSED OFFSET
	class UInterpToMovementComponent*                  _MovementComponent;                                       // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               CollisionBox;                                             // 0x0388(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AController>                  OwningPlayer;                                             // 0x0390(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxHealth;                                                // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EAgentRefundMethod                                 _RefundMethod;                                            // 0x039C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x039D(0x0003) MISSED OFFSET
	class UKSWeaponAsset*                              AssociatedWeaponAsset;                                    // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentHealth;                                            // 0x03A8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHealthUpdate;                                           // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                OriginalOwnerId;                                          // 0x03C0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAgentBase");
		return ptr;
	}


	void RefundAgentAsset();
	void OnRep_CurrentHealth();
	void OnMissionBegin();
	void MovementPlaybackStop(struct FHitResult* ImpactResult, float* Time);
	void BroadcastMissionBegin();
};


// Class Killstreak.KSAgent_RevealDrone
// 0x00A8 (0x0470 - 0x03C8)
class AKSAgent_RevealDrone : public AKSAgentBase
{
public:
	float                                              MaxFlightSpeed;                                           // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToFly;                                            // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenPings;                                         // 0x03D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RevealPeriodDuration;                                     // 0x03D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FPGame_ReplicatedTimer                      ReplicatedRevealTimer;                                    // 0x03D8(0x0038) (Edit, Net, DisableEditOnTemplate, EditConst)
	float                                              UpdateReplicatedTimerPeriod;                              // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAppliesScrambleEffectToEnemies;                          // 0x0414(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x43];                                      // 0x0415(0x0043) MISSED OFFSET
	TArray<class AKSCharacter*>                        CurrentSweepFoundChars;                                   // 0x0458(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAgent_RevealDrone");
		return ptr;
	}


	void UpdateReplicatedTimer();
	void StartNextReveal();
	void SetPlayerOwner(class AKSCharacter** InOwner);
	void ScrambleEnemies();
	void RevealOpposingTeam(class AKSPlayerController** PlayerController, float* Threshold);
	void Ping(int* Team, float* Threshold, float* SweepSpeed, float* SweepTimeRemaining);
	void GetRevealPeriodDuration(float* Duration, float* RemainingTime);
	void EndRevealPeriod();
};


// Class Killstreak.KSAgent_RevivalDrone
// 0x00C8 (0x0490 - 0x03C8)
class AKSAgent_RevivalDrone : public AKSAgentBase
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x03C8(0x0050) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAbort;                                                  // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnArrive;                                                 // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxFlightSpeed;                                           // 0x0438(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InvisibleMovementTime;                                    // 0x043C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReviveTime;                                               // 0x0440(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ReviveHealth;                                             // 0x0444(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDroneVisibility;                                         // 0x0448(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDroneVulnerability;                                      // 0x0449(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bOngoingReviveEffectsActive;                              // 0x044A(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x044B(0x0001) MISSED OFFSET
	TWeakObjectPtr<class AKSCharacter>                 TargetCharacter;                                          // 0x044C(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	EReviveDroneState                                  MovementStage;                                            // 0x0454(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EReviveDroneFlightPath                             _FlightPath;                                              // 0x0455(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0456(0x0002) MISSED OFFSET
	float                                              PreferredHoverHeight;                                     // 0x0458(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TransitHeight;                                            // 0x045C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoverCorrectionTime;                                      // 0x0460(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DepartureHeight;                                          // 0x0464(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseCustomReviveTime;                                     // 0x0468(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0469(0x0003) MISSED OFFSET
	float                                              CustomReviveTime;                                         // 0x046C(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	bool                                               bInheritReviveTimeMods;                                   // 0x0470(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DrawOutline;                                              // 0x0471(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      OutlineStencilColor;                                      // 0x0472(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x5];                                       // 0x0473(0x0005) MISSED OFFSET
	class UKSPlayerMod*                                ApplyOnReleaseMod;                                        // 0x0478(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawEnemyDroneOutline;                                   // 0x0480(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0481(0x0007) MISSED OFFSET
	class UKSItemStimuliSourceComponent*               _StimuliSourceComponent;                                  // 0x0488(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAgent_RevivalDrone");
		return ptr;
	}


	void TargetStartGuaranteedRevive(class AKSCharacter** InCharacter);
	void StartReviveEffects();
	void SetOutlineVisibility(bool* UseOutline);
	void SetFriendlyOutlineVisibility(bool* UseOutline);
	void OnReviveEnd(class AKSCharacter** RevivingCharacter, bool* SuccessfulRevive);
	void OnRep_OngoingReviveEffectsActive();
	void OnRep_DroneVulnerability();
	void OnRep_DroneVisibility();
	float GetReviveProgress();
	EReviveDroneState GetMovementStage();
	EReviveDroneFlightPath GetFlightPath();
	void EventStartReviveEffects();
	void EventOngoingReviveEffectsStarted();
	void EventEndReviveEffects();
	void BroadcastMovementState(EReviveDroneState* State);
	void BroadcastEndReviveEffects();
	void BroadcastDroneVulnerability(bool* Vulnerable);
	void BroadcastDroneVisibility(bool* Visible);
	void BeginRevive();
	void ApplyDroneVulnerabilityInternal();
	void ApplyDroneVisibilityInternal();
	void ActivateDroneOngoingEffects();
};


// Class Killstreak.KSAIActorCollection
// 0x0030 (0x0128 - 0x00F8)
class UKSAIActorCollection : public UActorComponent
{
public:
	TArray<class AKSDropLocation*>                     DropLocations;                                            // 0x00F8(0x0010) (ZeroConstructor)
	class UDataTable*                                  BotNameTable;                                             // 0x0108(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAIActorCollection");
		return ptr;
	}

};


// Class Killstreak.KSAIActorCollection_Extraction
// 0x0010 (0x0138 - 0x0128)
class UKSAIActorCollection_Extraction : public UKSAIActorCollection
{
public:
	TArray<class AKSDefensePoint*>                     DefensePoints;                                            // 0x0128(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAIActorCollection_Extraction");
		return ptr;
	}

};


// Class Killstreak.KSAIController
// 0x0288 (0x06C0 - 0x0438)
class AKSAIController : public AAIController
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0438(0x0050) MISSED OFFSET
	class AKSCharacterBase*                            _KSCharacter;                                             // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)
	class AKSCharacter*                                CachedKSCharacter;                                        // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	class AKSWayPointSet*                              _WayPointSet;                                             // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldReverseWayPointSetDirection;                       // 0x04A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x17];                                      // 0x04A1(0x0017) MISSED OFFSET
	class AKSPlayerShop*                               _Shop;                                                    // 0x04B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x04C0(0x0030) MISSED OFFSET
	class AActor*                                      StartPointToSpawnAt;                                      // 0x04F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      CharacterToSpawn;                                         // 0x04F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBehaviorTree*                               TreeToRun;                                                // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSBTDifficulty*                             InitialDifficulty;                                        // 0x0508(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSBTDifficulty*                             CachedDifficulty;                                         // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0518(0x0008) MISSED OFFSET
	class UDataTable*                                  DifficultyTable;                                          // 0x0520(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FKSBTDifficultyConfig                       SpawnDifficultyConfig;                                    // 0x0528(0x0078) (Transient)
	class UDataTable*                                  ObjectivePriorityTable;                                   // 0x05A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  ItemPriorityTable;                                        // 0x05A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  AbilityTable;                                             // 0x05B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FKSInitialLoadout                           _InitialLoadout;                                          // 0x05B8(0x0010) (Transient)
	unsigned char                                      UnknownData04[0x18];                                      // 0x05C8(0x0018) MISSED OFFSET
	class UKSAIPerceptionComponent*                    _KSAIPerception;                                          // 0x05E0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x28];                                      // 0x05E8(0x0028) MISSED OFFSET
	class AActor*                                      ActorForFocalOffset;                                      // 0x0610(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0618(0x0010) MISSED OFFSET
	float                                              CrowdCollisionQueryRange;                                 // 0x0628(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrowdPathOptimizationRange;                               // 0x062C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrowdAvoidanceRangeMultiplier;                            // 0x0630(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrowdSeparationWeight;                                    // 0x0634(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStartWithCrowdFollowing;                                 // 0x0638(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0639(0x0003) MISSED OFFSET
	int                                                TeamNumber;                                               // 0x063C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x30];                                      // 0x0640(0x0030) MISSED OFFSET
	struct FGameplayTagQuery                           AllowedJobQuery;                                          // 0x0670(0x0048) (Transient)
	unsigned char                                      UnknownData09[0x8];                                       // 0x06B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAIController");
		return ptr;
	}


	void SetNavigationInteractTarget();
	void OnPawnKilled(class AKSCharacterBase** KillerCharacter);
	void HandleTeamSidesFlipped();
	class AKSCharacter* GetOwnedCharacter();
	class AActor* GetNavigationInteractTarget();
	class UKSAIPerceptionComponent* GetKSPerceptionComponent();
	void ClearNavigationInteractTarget();
};


// Class Killstreak.KSAIDifficultyComponent
// 0x0120 (0x0218 - 0x00F8)
class UKSAIDifficultyComponent : public UActorComponent
{
public:
	class UKSBTDifficulty*                             _Difficulty;                                              // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  DifficultyTable;                                          // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowDynamicDifficulty;                                   // 0x0108(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0109(0x0007) MISSED OFFSET
	struct FKSBTDifficultyConfig                       DifficultySpawnConfig;                                    // 0x0110(0x0078) (Edit, DisableEditOnInstance)
	float                                              AccuracyMultiplierStandard;                               // 0x0188(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AccuracyMultiplierThrownMelee;                            // 0x018C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AccuracyMultiplierWhenBlinded;                            // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AccuracyMultiplierWhenCrosshairHidden;                    // 0x0194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NewTargetAccuracyMultiplier;                              // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NewTargetTime;                                            // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackDelayClipPercentMin;                                // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackDelayClipPercentMax;                                // 0x01A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackDelay;                                              // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageDealtMultiplier;                                    // 0x01AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadshotDamageDealtMultiplier;                            // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageTakenMultiplier;                                    // 0x01B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadshotDamageTakenMultiplier;                            // 0x01B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimForHeadshotProbability;                                // 0x01BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DodgeRollProbability;                                     // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StrafeProbability;                                        // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowGrenadeProbability;                                  // 0x01C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowMeleeProbability;                                    // 0x01CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PerceptionStrengthMin;                                    // 0x01D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PerceptionStrengthMax;                                    // 0x01D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PerceptionStrength;                                       // 0x01D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET
	TArray<class UKSBTAction*>                         AllowedActions;                                           // 0x01E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UKSBTAction*>                         DisallowedActions;                                        // 0x01F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SpeedMultiplier;                                          // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class AKSWeapon>                    LastFiredWeapon;                                          // 0x0204(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                AttacksSinceLastAttackDelay;                              // 0x020C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                AttacksNeededToTriggerAttackDelay;                        // 0x0210(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0214(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAIDifficultyComponent");
		return ptr;
	}


	class UKSBTDifficulty* GetCurrentDifficulty();
	void ChangeDifficulty(class UKSBTDifficulty** DifficultyIn);
};


// Class Killstreak.KSAIItemPriorityComponent
// 0x0010 (0x0108 - 0x00F8)
class UKSAIItemPriorityComponent : public UActorComponent
{
public:
	TArray<struct FKSBTItemPriorityTableRow>           ItemPriorities;                                           // 0x00F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAIItemPriorityComponent");
		return ptr;
	}


	void InsertPriority(struct FKSBTItemPriorityTableRow* ItemPriority);
	void InsertPriorities(class UDataTable** ItemPriorityTable);
	float GetWeightByName(struct FString* ItemName);
	float GetWeight();
	float GetShopPurchaseWeightByName(struct FString* ItemName);
	float GetShopPurchaseWeight();
	float GetShopPriorityGroupByName(struct FString* ItemName);
	float GetShopPriorityGroup();
	float GetPriorityMultiplierByName(struct FString* ItemName);
	float GetPriorityMultiplier();
	void ClearPriorities();
};


// Class Killstreak.KSAimAssistActor
// 0x0088 (0x03B8 - 0x0330)
class AKSAimAssistActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0330(0x0010) MISSED OFFSET
	class UKSAimAssistAnchorComponent*                 _AimAssistAnchor;                                         // 0x0340(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TMap<struct FName, EHitLocationType>               BoneToHitLocationTypeMap;                                 // 0x0350(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCanBeKilled;                                             // 0x03A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	float                                              MaxHealth;                                                // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLocallyKilled;                                           // 0x03A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03A9(0x0003) MISSED OFFSET
	struct FAimAssistActorHealthInfo                   _HealthInfo;                                              // 0x03AC(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimAssistActor");
		return ptr;
	}


	void ResetHealth();
	void OnRep_HealthInfo();
	void OnKilled();
	float ModifyIncomingDamageTaken(float* DamageAmount, struct FDamageEvent* DamageEvent, class AController** EventInstigator, class AActor** DamageCauser, class AActor** DamagedActor);
	bool IsValidIncomingDamage(class UClass** DamageTypeClass, class AController** EventInstigator, class AActor** DamageCauser, class AActor** DamagedActor);
	struct FVector GetAAHeadLocation();
	struct FVector GetAABodyLocation();
	bool CanBeHitByWeapon(class UKSWeaponAsset** Weapon);
	bool AimAssistRightNow(class AKSPlayerController** PlayerController);
};


// Class Killstreak.KSAimAssistAnchorComponent
// 0x0010 (0x05E0 - 0x05D0)
class UKSAimAssistAnchorComponent : public USphereComponent
{
public:
	float                                              AimAssistPriority;                                        // 0x05D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x05D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimAssistAnchorComponent");
		return ptr;
	}

};


// Class Killstreak.KSAimAssistComponent
// 0x0098 (0x0190 - 0x00F8)
class UKSAimAssistComponent : public UActorComponent
{
public:
	class AKSPlayerController*                         PlayerOwner;                                              // 0x00F8(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TArray<struct FRankedAimAssistTarget>              AssistTargetStack;                                        // 0x0100(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	float                                              CurrentTargetWeightStickiness;                            // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProjectionSpaceStackBoundary;                             // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseStackBoundaryFovScaling;                              // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              FovBaseline;                                              // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AimAssistEffectivenessCurve;                              // 0x0120(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EKSAimAssistActivationType                         _ActivationType;                                          // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EKSAimAssistInputFlag                              FrictionAllowedInputMode;                                 // 0x0129(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EKSAimAssistInputFlag                              LockAllowedInputMode;                                     // 0x012A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EKSAimAssistInputFlag                              SnapAllowedInputMode;                                     // 0x012B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EKSAimAssistInputFlag                              CorrectionAllowedInputMode;                               // 0x012C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x012D(0x0007) MISSED OFFSET
	bool                                               bAssistGadgets;                                           // 0x0134(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAimLockUsesTargetVelocity;                               // 0x0135(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAimLockMeshSmoothCompensation;                           // 0x0136(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAimLockUsesOwnVelocity;                                  // 0x0137(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxLockAngularSpeed;                                      // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseHolisticAimLock;                                      // 0x013C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bComplexAimLockDeltaRotCalculation;                       // 0x013D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bComplexLookLocationCalculation;                          // 0x013E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x013F(0x0001) MISSED OFFSET
	float                                              MaxAimLockEvaluationInterval;                             // 0x0140(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bOldLockValid;                                            // 0x0144(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0145(0x0003) MISSED OFFSET
	struct FRotator                                    OldLockDeltaRot;                                          // 0x0148(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     OldLockRelativeLocation;                                  // 0x0154(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    OldInputRot;                                              // 0x0160(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x016C(0x0004) MISSED OFFSET
	class UObject*                                     LastAimAssistTarget;                                      // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLastTargetCrouching;                                     // 0x0178(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0179(0x0003) MISSED OFFSET
	struct FVector2D                                   LastLockAssistPosition;                                   // 0x017C(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastBoundaryFactor;                                       // 0x0184(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AimAssistVisibilityUpdatePeriod;                          // 0x0188(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x018C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimAssistComponent");
		return ptr;
	}


	bool STATIC_GetScaledProjectionBoundsForActor(class APlayerController** Player, class AActor** InActor, struct FBox2D* OutBounds);
	float GetProjectionSpaceStackBoundary();
	class AKSPlayerController* GetPlayerOwner();
	float STATIC_GetAssistRingScreenSize(class APlayerController** Player, float* ProjectionSpaceSize);
	bool STATIC_GetActorScreenBoundsForActor(class APlayerController** Player, class AActor** InActor, struct FBox2D* OutBounds);
};


// Class Killstreak.KSAimAssistDataBase
// 0x0008 (0x0038 - 0x0030)
class UKSAimAssistDataBase : public UDataAsset
{
public:
	EControllerInputType                               JoyConFallback;                                           // 0x0030(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EControllerInputType                               JoyConADSFallback;                                        // 0x0031(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EControllerInputType                               TouchFallback;                                            // 0x0032(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EControllerInputType                               TouchADSFallback;                                         // 0x0033(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimAssistDataBase");
		return ptr;
	}

};


// Class Killstreak.KSAimAssistTargetInterface
// 0x0000 (0x0028 - 0x0028)
class UKSAimAssistTargetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimAssistTargetInterface");
		return ptr;
	}


	void UnregisterAsAimAssistTarget();
	void RegisterAsAimAssistTarget();
	struct FVector GetHeadLocation();
	struct FVector GetBodyLocation();
	class AActor* GetAsActor();
	bool CanBeConsideredForAimAssistRightNow(class AKSPlayerController** PlayerController);
};


// Class Killstreak.KSAimCorrectionData
// 0x00F0 (0x0128 - 0x0038)
class UKSAimCorrectionData : public UKSAimAssistDataBase
{
public:
	TMap<EControllerInputType, bool>                   AllowAimCorrection;                                       // 0x0038(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, float>                  AimCorrectionOffset;                                      // 0x0088(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, float>                  AimCorrectionRange;                                       // 0x00D8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimCorrectionData");
		return ptr;
	}

};


// Class Killstreak.KSAimFrictionData
// 0x00F0 (0x0128 - 0x0038)
class UKSAimFrictionData : public UKSAimAssistDataBase
{
public:
	TMap<EControllerInputType, bool>                   RequireInputForAimFriction;                               // 0x0038(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, class UCurveVector*>    AimFrictionCurve;                                         // 0x0088(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, class UCurveFloat*>     AimFrictionDistanceCurve;                                 // 0x00D8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimFrictionData");
		return ptr;
	}

};


// Class Killstreak.KSAimLockData
// 0x00F0 (0x0128 - 0x0038)
class UKSAimLockData : public UKSAimAssistDataBase
{
public:
	TMap<EControllerInputType, bool>                   RequireInputForAimLock;                                   // 0x0038(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, class UCurveVector*>    AimLockCurve;                                             // 0x0088(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, class UCurveFloat*>     AimLockDistanceCurve;                                     // 0x00D8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimLockData");
		return ptr;
	}

};


// Class Killstreak.KSAimMagnetismData
// 0x0000 (0x0038 - 0x0038)
class UKSAimMagnetismData : public UKSAimAssistDataBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimMagnetismData");
		return ptr;
	}

};


// Class Killstreak.KSAimSnapData
// 0x00F0 (0x0128 - 0x0038)
class UKSAimSnapData : public UKSAimAssistDataBase
{
public:
	TMap<EControllerInputType, struct FRotator>        MaxAimSnapRotation;                                       // 0x0038(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, class UCurveFloat*>     AimSnapDistanceCurve;                                     // 0x0088(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EControllerInputType, class UCurveVector*>    AimSnapCurve;                                             // 0x00D8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAimSnapData");
		return ptr;
	}

};


// Class Killstreak.KSAIObjectivePriorityComponent
// 0x0068 (0x0160 - 0x00F8)
class UKSAIObjectivePriorityComponent : public UActorComponent
{
public:
	class UDataTable*                                  ObjectivePriorityTable;                                   // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, struct FKSBTObjectivePriorityTableRow> ObjectivePriorities;                                      // 0x0100(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FKSBTObjectivePriorityTableRow>      SortedPriorities;                                         // 0x0150(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAIObjectivePriorityComponent");
		return ptr;
	}


	void UpdatePriority(struct FName* Key, struct FKSBTObjectivePriorityTableRow* ObjectivePriority, bool* ShouldResort);
	void UpdatePriorities(class UDataTable** ObjectivePriorityTableIn);
	void Setup(class UDataTable** ObjectivePriorityTableIn);
	void InsertPriority(struct FName* Key, struct FKSBTObjectivePriorityTableRow* ObjectivePriority, bool* ShouldResort);
	void InsertPriorities(class UDataTable** ObjectivePriorityTableIn);
	float GetPriority(struct FName* Key);
	void ClearPriorities();
	void ApplyPrioritiesFromDifficulty(class UDataTable** ObjectivePriorityTableIn);
};


// Class Killstreak.KSAIPerceptionComponent
// 0x0000 (0x01C8 - 0x01C8)
class UKSAIPerceptionComponent : public UAIPerceptionComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAIPerceptionComponent");
		return ptr;
	}


	void GetCurrentlyPerceivedStimuli(class UClass** SenseToUse, TArray<struct FKSStimulusEvent>* Stimuli);
};


// Class Killstreak.KSAISense_MapPoint
// 0x0010 (0x0090 - 0x0080)
class UKSAISense_MapPoint : public UAISense
{
public:
	TArray<struct FKSAIMapPointStimulusEvent>          RegisteredEvents;                                         // 0x0080(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISense_MapPoint");
		return ptr;
	}

};


// Class Killstreak.KSAISense_Objective
// 0x0010 (0x00F8 - 0x00E8)
class UKSAISense_Objective : public UAISense_Hearing
{
public:
	TArray<struct FAIObjectiveEvent>                   ObjectiveEvents;                                          // 0x00E8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISense_Objective");
		return ptr;
	}


	void STATIC_ReportObjectiveEvent(class UObject** WorldContextObject, struct FVector* ObjectiveLocation, float* Loudness, class AActor** Instigator, float* MaxRange, struct FName* Tag);
};


// Class Killstreak.KSAISense_PeripheralSight
// 0x0000 (0x0158 - 0x0158)
class UKSAISense_PeripheralSight : public UAISense_Sight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISense_PeripheralSight");
		return ptr;
	}

};


// Class Killstreak.KSAISense_Player
// 0x0010 (0x0090 - 0x0080)
class UKSAISense_Player : public UAISense
{
public:
	TArray<struct FKSAIPlayerStimulusEvent>            RegisteredEvents;                                         // 0x0080(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISense_Player");
		return ptr;
	}

};


// Class Killstreak.KSAISense_Team
// 0x0010 (0x0090 - 0x0080)
class UKSAISense_Team : public UAISense
{
public:
	TArray<struct FKSAITeamStimulusEvent>              RegisteredEvents;                                         // 0x0080(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISense_Team");
		return ptr;
	}

};


// Class Killstreak.KSAISenseConfig_MapPoint
// 0x0000 (0x0048 - 0x0048)
class UKSAISenseConfig_MapPoint : public UAISenseConfig
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISenseConfig_MapPoint");
		return ptr;
	}

};


// Class Killstreak.KSAISenseConfig_Player
// 0x0000 (0x0048 - 0x0048)
class UKSAISenseConfig_Player : public UAISenseConfig
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISenseConfig_Player");
		return ptr;
	}

};


// Class Killstreak.KSAISenseConfig_Team
// 0x0000 (0x0048 - 0x0048)
class UKSAISenseConfig_Team : public UAISenseConfig
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISenseConfig_Team");
		return ptr;
	}

};


// Class Killstreak.KSAISenseEvent_Objective
// 0x0030 (0x0058 - 0x0028)
class UKSAISenseEvent_Objective : public UAISenseEvent
{
public:
	struct FAIObjectiveEvent                           _Event;                                                   // 0x0028(0x0030) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISenseEvent_Objective");
		return ptr;
	}

};


// Class Killstreak.KSAISightTargetInterface
// 0x0000 (0x0028 - 0x0028)
class UKSAISightTargetInterface : public UAISightTargetInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAISightTargetInterface");
		return ptr;
	}

};


// Class Killstreak.KSAkAmbientSound
// 0x0040 (0x0370 - 0x0330)
class AKSAkAmbientSound : public AActor
{
public:
	class UAkAudioEvent*                               _AkAudioEvent;                                            // 0x0330(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UKSAkComponent*                              _AkComponent;                                             // 0x0338(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               StopWhenOwnerIsDestroyed;                                 // 0x0340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoPost;                                                 // 0x0341(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ForceNoTickingOnAkComponent;                              // 0x0342(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2D];                                      // 0x0343(0x002D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAkAmbientSound");
		return ptr;
	}


	void StopAmbientSound();
	void STATIC_StopAllKSAmbientSounds(class UObject** WorldContextObject);
	void StartAmbientSound();
	void STATIC_StartAllKSAmbientSounds(class UObject** WorldContextObject);
};


// Class Killstreak.KSAkComponent
// 0x0040 (0x0490 - 0x0450)
class UKSAkComponent : public UAkComponent
{
public:
	EOcclusionType                                     _OcclusionType;                                           // 0x0450(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	float                                              MinTimeBetweenOcclusionUpdates;                           // 0x0454(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionDistanceMultiplier;                              // 0x0458(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                OcclusionInterpolationMilliseconds;                       // 0x045C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CurrentObstruction;                                       // 0x0460(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CurrentOcclusion;                                         // 0x0464(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0468(0x0004) MISSED OFFSET
	bool                                               RequiresListenerDistance;                                 // 0x046C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	float                                              MinTimeBetweenDistanceUpdates;                            // 0x0470(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	bool                                               RequiresListenerDirection;                                // 0x0478(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0479(0x0003) MISSED OFFSET
	float                                              MinTimeBetweenDirectionUpdates;                           // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0480(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAkComponent");
		return ptr;
	}

};


// Class Killstreak.KSItemDrop
// 0x0128 (0x0458 - 0x0330)
class AKSItemDrop : public AActor
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0330(0x0028) MISSED OFFSET
	TArray<class AKSCharacter*>                        AllowedCharacters;                                        // 0x0358(0x0010) (Net, ZeroConstructor)
	float                                              ItemDropInteractDuration;                                 // 0x0368(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x036C(0x0004) MISSED OFFSET
	class UKSItemStimuliSourceComponent*               _StimuliSourceComponent;                                  // 0x0370(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FVector                                     SightOffset;                                              // 0x0378(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	TArray<class AActor*>                              ActorsSeenBy;                                             // 0x0388(0x0010) (ZeroConstructor)
	class UKSItem*                                     ItemAsset;                                                // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UClass*                                      InteractionType;                                          // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDestroyOnPickUp;                                         // 0x03A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnItemPickup;                                             // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x20];                                      // 0x03C0(0x0020) MISSED OFFSET
	class AKSCharacter*                                PendingPickupCharacter;                                   // 0x03E0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UKSInteractionManager*                       CurrentInteractionManager;                                // 0x03E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UKSStaticMeshComponent*                      CollisionMesh;                                            // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x03F8(0x0003) MISSED OFFSET
	EPlayerSilhouetteType                              InactiveStencilValue;                                     // 0x03FB(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EPlayerSilhouetteType                              ActiveStencilValue;                                       // 0x03FC(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x03FD(0x0003) MISSED OFFSET
	struct FRotator                                    LootSiteSpawnRotation;                                    // 0x0400(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x040C(0x0004) MISSED OFFSET
	struct FGameplayTagContainer                       SkinTagContainer;                                         // 0x0410(0x0020)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0430(0x0018) MISSED OFFSET
	class AController*                                 DropHidePlayer;                                           // 0x0448(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bClientDropUnhide;                                        // 0x0450(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	int                                                OriginalOwnerId;                                          // 0x0454(0x0004) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSItemDrop");
		return ptr;
	}


	bool ShouldShowViewedItemLabel();
	void SetInactiveStencilValue(EPlayerSilhouetteType* Value);
	void SetActiveStencilValue(EPlayerSilhouetteType* Value);
	void PlayDestroyedEffects();
	bool PickUp(class AKSCharacter** Receiver);
	void OverridePickupFunction(struct FScriptDelegate* ItemPickupOverride);
	void OnRootMeshDetached(class UKSStaticMeshComponent** ResponsibleMesh);
	void OnRep_PendingPickupCharacter();
	void OnRep_ItemAsset();
	void OnRep_DropHidePlayer();
	struct FScriptDelegate GetPickupDelegate();
	class AKSCharacter* GetPendingPickupCharacter();
	struct FRotator GetLootSiteSpawnRotation();
	bool GetLabelInfoForSecondaryTitle(struct FText* LabelText);
	bool GetLabelInfoForPrimaryTitle(struct FText* LabelText);
	class UKSItem* GetItemAsset();
	void CalculateRandomImpulse(struct FVector* LinearImpulse, struct FVector* AngularImpulse);
	void AsyncItemGiveComplete(class UKSItem** Item, class UObject** GivenObject, struct FGiveItemParameters* InGiveItemParameters, bool* bSuccess);
	void ApplyRandomImpulse();
	void AllowPickup(class AKSCharacter** Character);
};


// Class Killstreak.KSAmmoDrop
// 0x0008 (0x0460 - 0x0458)
class AKSAmmoDrop : public AKSItemDrop
{
public:
	int                                                Amount;                                                   // 0x0458(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x045C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAmmoDrop");
		return ptr;
	}

};


// Class Killstreak.KSItem
// 0x00B8 (0x0158 - 0x00A0)
class UKSItem : public UPlatformInventoryItem
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSItem.ItemDropClass
	int                                                ItemPrice;                                                // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FGameplayTagContainer                       CollectionContainer;                                      // 0x00D0(0x0020) (Edit, DisableEditOnInstance)
	class UTexture2D*                                  DefaultItemIcon;                                          // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x00F8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSItem.SpecialItemWidgetClass
	struct FColor                                      ColorCode;                                                // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x24];                                      // 0x0124(0x0024) MISSED OFFSET
	struct FPrimaryAssetRules                          _Rules;                                                   // 0x0148(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSItem");
		return ptr;
	}


	bool STATIC_SoftGiveToAsync(class AActor** Owner, struct FGiveItemParameters* InGiveItemParameters, struct FScriptDelegate* GivenToEvent);
	bool STATIC_SoftCreateDropAsync(struct FTransform* SpawnTransform, class UObject** WorldContextObject, struct FDropItemParameters* InDropItemParameters, struct FScriptDelegate* ItemDroppedEvent, bool* bEnablePhysics, struct FVector* InSpawnLinearVelocity, struct FVector* InSpawnAngularVelocity);
	void SetCollectionContainer(struct FGameplayTagContainer* InContainer);
	void InitNewlyCreatedItem(int64_t* InItemId);
	bool STATIC_GiveToAsync(class UKSItem** Item, class AActor** Owner, struct FGiveItemParameters* InGiveItemParameters, struct FScriptDelegate* GivenToEvent);
	bool STATIC_GiveTo(class UKSItem** Item, class AActor** Owner, struct FGiveItemParameters* InGiveItemParameters, class UObject** OutObject);
	void GetTextureAsync(struct FScriptDelegate* IconLoadedEvent);
	void GetSpecialItemWidgetClass();
	int GetItemPrice();
	void GetItemDropClass();
	TArray<struct FItemDisplayStat> GetItemDisplayStats();
	struct FText GetItemCategoryText();
	struct FColor GetColorCode();
	struct FGameplayTagContainer GetCollectionContainer();
	bool STATIC_CreateDropAsync(class UKSItem** Item, struct FTransform* SpawnTransform, class UObject** WorldContextObject, struct FDropItemParameters* InDropItemParameters, struct FScriptDelegate* ItemDroppedEvent, bool* bEnablePhysics, struct FVector* InSpawnLinearVelocity, struct FVector* InSpawnAngularVelocity);
	class AKSItemDrop* STATIC_CreateDrop(class UKSItem** Item, struct FTransform* SpawnTransform, class UObject** WorldContextObject, struct FDropItemParameters* InDropItemParameters);
	bool CanBePickedUpByCharacter(class AKSCharacter** PotentialOwner);
	bool CanBePickedUpBy(class AActor** PotentialOwner);
};


// Class Killstreak.KSAmmoDropAsset
// 0x0008 (0x0160 - 0x0158)
class UKSAmmoDropAsset : public UKSItem
{
public:
	EAmmoType                                          _AmmoType;                                                // 0x0158(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                AmmoCount;                                                // 0x015C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAmmoDropAsset");
		return ptr;
	}


	EAmmoType GetAmmoType();
};


// Class Killstreak.KSAnalogStickFilter
// 0x0008 (0x0030 - 0x0028)
class UKSAnalogStickFilter : public UObject
{
public:
	EKSAnalogStickType                                 _StickType;                                               // 0x0028(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAnalogStickFilter");
		return ptr;
	}

};


// Class Killstreak.KSAnimationAuditComponent
// 0x0008 (0x0100 - 0x00F8)
class UKSAnimationAuditComponent : public UActorComponent
{
public:
	class UKSAnimInstance*                             CurrentAnimInst;                                          // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAnimationAuditComponent");
		return ptr;
	}


	void AnimAuditStop(class UKSAnimInstance** AnimInst, bool* bExportImmediately);
	void AnimAuditStart(class UKSAnimInstance** AnimInst);
	void AnimAuditClear(class UKSAnimInstance** AnimInst);
};


// Class Killstreak.KSAnimInstance
// 0x0020 (0x0290 - 0x0270)
class UKSAnimInstance : public USkinnedAnimInstance
{
public:
	bool                                               bRecordAnimStats;                                         // 0x0270(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0271(0x0007) MISSED OFFSET
	class UKSAnimationAuditComponent*                  AuditingComponent;                                        // 0x0278(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0280(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAnimInstance");
		return ptr;
	}


	void Montage_JumpToRandomSection(TArray<struct FName>* SectionNames, class UAnimMontage** Montage, bool* bDisallowCurrentSection);
};


// Class Killstreak.KSAnimNotify_EmotionDuration
// 0x0008 (0x0040 - 0x0038)
class UKSAnimNotify_EmotionDuration : public UAnimNotify
{
public:
	EKSEmotion                                         _Emotion;                                                 // 0x0038(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              Duration;                                                 // 0x003C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAnimNotify_EmotionDuration");
		return ptr;
	}

};


// Class Killstreak.KSAnimNotifyState_Emotion
// 0x0008 (0x0038 - 0x0030)
class UKSAnimNotifyState_Emotion : public UAnimNotifyState
{
public:
	EKSEmotion                                         _Emotion;                                                 // 0x0030(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAnimNotifyState_Emotion");
		return ptr;
	}

};


// Class Killstreak.KSAnnouncer
// 0x0168 (0x0498 - 0x0330)
class AKSAnnouncer : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0330(0x0018) MISSED OFFSET
	class UAkComponent*                                AnnouncerAkComponent;                                     // 0x0348(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TMap<struct FName, struct FTimeAnnouncementList>   PhaseTimeAnnouncements;                                   // 0x0350(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x60];                                      // 0x03A0(0x0060) MISSED OFFSET
	struct FAnnouncementList                           _AnnouncementList;                                        // 0x0400(0x0088) (Net)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0488(0x0008) MISSED OFFSET
	float                                              MaxAnnouncementDuration;                                  // 0x0490(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0494(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAnnouncer");
		return ptr;
	}


	bool ShouldPlayTimeAnnouncementFromGroup(TArray<struct FName>* Groups);
	void QueueAnnouncementStruct(struct FAnnouncement* Announcement, int* teamNum, bool* DelayProcessing);
	void QueueAnnouncement(class UAkAudioEvent** AkEvent, class UAkAudioEvent** AltAkEvent, float* Priority, float* Lifetime, float* Delay, float* Lockout, int* teamNum, bool* DelayProcessing);
	void ProcessTimeAnnouncementList(float* Time, int* teamNum, struct FTimeAnnouncementList* TimeAnnouncementList);
	void ProcessQueue();
	void OnMatchTimerUpdate(float* TimeInWholeSeconds);
	void OnLockoutComplete();
	void OnLocalViewTargetMovementModeChanged(TEnumAsByte<EMovementMode>* OldMode, unsigned char* OldCustomMode, TEnumAsByte<EMovementMode>* NewMode, unsigned char* NewCustomMode);
	void OnLocalViewTargetChanged(class AKSPlayerController** Controller, class AActor** OldViewTarget, class AActor** NewViewTarget);
	void LocalPlayerControllerDestroyed(class AActor** PlayerController);
	int GetTeamOverrideForAnnouncementGroup(TArray<struct FName>* Groups);
	class AKSPlayerController* GetPlayerController();
	void EventQueueInGame();
	void EventLocalPlayerControllerDestroyed(class AKSPlayerController** PlayerController);
};


// Class Killstreak.KSApparelAsset
// 0x0070 (0x01C8 - 0x0158)
class UKSApparelAsset : public UKSItem
{
public:
	int                                                Priority;                                                 // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	struct FGameplayTag                                ApparelSlot;                                              // 0x015C(0x0008) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	struct FGameplayTagContainer                       SlotsToOverride;                                          // 0x0168(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0188(0x0028) MISSED OFFSET
	int                                                AsyncLoadPriority;                                        // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                LocalPlayerAsyncLoadPriority;                             // 0x01B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x01B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSApparelAsset");
		return ptr;
	}

};


// Class Killstreak.KSApparelAsset_SkinDataTables
// 0x0020 (0x01E8 - 0x01C8)
class UKSApparelAsset_SkinDataTables : public UKSApparelAsset
{
public:
	TArray<struct FSoftDataTableInfo>                  AssetDataTables;                                          // 0x01C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               ApparelObjectsToInfluence;                                // 0x01D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSApparelAsset_SkinDataTables");
		return ptr;
	}

};


// Class Killstreak.KSApparelAsset_CustomComponent
// 0x0028 (0x0210 - 0x01E8)
class UKSApparelAsset_CustomComponent : public UKSApparelAsset_SkinDataTables
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSApparelAsset_CustomComponent.CustomComponentClass

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSApparelAsset_CustomComponent");
		return ptr;
	}

};


// Class Killstreak.KSApparelAsset_SkinnedMesh
// 0x0050 (0x0238 - 0x01E8)
class UKSApparelAsset_SkinnedMesh : public UKSApparelAsset_SkinDataTables
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSApparelAsset_SkinnedMesh.MeshClass
	struct FName                                       AttachPointName;                                          // 0x0210(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CollisionProfile;                                         // 0x0218(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSlaveToCharacterMesh;                                    // 0x0220(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSimulatePhysics;                                         // 0x0221(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0222(0x0006) MISSED OFFSET
	TArray<struct FName>                               ApparelObjectsToListenTo;                                 // 0x0228(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSApparelAsset_SkinnedMesh");
		return ptr;
	}

};


// Class Killstreak.KSEquipment
// 0x0078 (0x03A8 - 0x0330)
class AKSEquipment : public AInfo
{
public:
	bool                                               bInitialized;                                             // 0x0330(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	struct FKSEquipRepInfo                             EquipInfo;                                                // 0x0334(0x0014) (Net)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0348(0x0018) MISSED OFFSET
	TScriptInterface<class UKSEquipmentManagerOwner>   _EquipmentManagerOwner;                                   // 0x0360(0x0010) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UKSEquipmentManagerComponent*                _EquipmentManagerComponent;                               // 0x0370(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0378(0x0018) MISSED OFFSET
	int                                                OriginalOwnerId;                                          // 0x0390(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint16_t                                           EquipmentId;                                              // 0x0394(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0396(0x0002) MISSED OFFSET
	class UKSEquipmentCosmeticComponent*               _EquipmentCosmeticComponent;                              // 0x0398(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEquipment");
		return ptr;
	}


	void Unequip(bool* bLocal, bool* bWillReequip);
	bool SetEquipPoint(struct FGameplayTag* InEquipPoint);
	void OnUnequipped(bool* bWillReequip);
	void OnRep_EquipPoint();
	void OnRep_EquipmentId();
	void OnEquipped();
	bool IsInitialized();
	bool IsInAction();
	bool IsEquipped();
	int GetOriginalOwnerId();
	class UKSItem* GetKSItem();
	struct FGameplayTag GetEquipPoint();
	uint16_t GetEquipmentId();
	class UKSEquipmentCosmeticComponent* GetCosmeticComponent();
	bool EquipNoPoint();
	void Drop();
};


// Class Killstreak.KSWeapon
// 0x03F0 (0x0798 - 0x03A8)
class AKSWeapon : public AKSEquipment
{
public:
	bool                                               bCanSwapOnFire;                                           // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSwapOnDown;                                           // 0x03A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSwapOutOnInteraction;                                 // 0x03AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSwapOutWhileAimingDownSights;                         // 0x03AB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x03AC(0x0014) MISSED OFFSET
	class UClass*                                      LoadedDropClass;                                          // 0x03C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET
	bool                                               bNoWeaponAsset;                                           // 0x03D0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData03[0x28];                                      // 0x03D1(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeapon.WeaponAssetPtr
	class UKSWeaponAsset*                              _WeaponAsset;                                             // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0408(0x0010) MISSED OFFSET
	uint32_t                                           AutoSwapOutWeaponId;                                      // 0x0418(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	struct FAuxiliaryWeaponInfo                        _AuxiliaryWeaponInfo;                                     // 0x0420(0x0010) (Net)
	TMap<struct FName, class AKSWeapon*>               AuxiliaryWeapons;                                         // 0x0430(0x0050) (ZeroConstructor, Transient)
	EKSWeaponDestroyReason                             _DestroyReason;                                           // 0x0480(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0481(0x0007) MISSED OFFSET
	class AKSCharacter*                                CharacterOwner;                                           // 0x0488(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	EWeaponStateNew                                    _WeaponState;                                             // 0x0490(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	EWeaponStateNew                                    LocalWeaponState;                                         // 0x0491(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0492(0x0002) MISSED OFFSET
	float                                              LastStateChangeTimeStamp;                                 // 0x0494(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TArray<struct FWeaponStateChangeRequest>           PendingStateChangeRequests;                               // 0x0498(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData08[0x2];                                       // 0x04A8(0x0002) MISSED OFFSET
	uint16_t                                           NextStateRequestId;                                       // 0x04AA(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x04AC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponStateChangedDel;                                  // 0x04B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x30];                                      // 0x04C0(0x0030) MISSED OFFSET
	bool                                               bPendingFire;                                             // 0x04F0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bBotPendingFire;                                          // 0x04F1(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bFireOnce;                                                // 0x04F2(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x04F3(0x0001) MISSED OFFSET
	int                                                KickbackShotIndex;                                        // 0x04F4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              KickbackResetTimeLeft;                                    // 0x04F8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                BurstShotIndex;                                           // 0x04FC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MinCookTimeStamp;                                         // 0x0500(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bUsingPostFireForgiveness;                                // 0x0504(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0505(0x0003) MISSED OFFSET
	float                                              PrefireStartTime;                                         // 0x0508(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FKSActionRestrictor                         FireLockout;                                              // 0x050C(0x0008) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFire;                                                   // 0x0518(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReloadFailed;                                           // 0x0528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              DeathShotForgivenessTime;                                 // 0x0538(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryToReloadEveryTickOnEmpty;                             // 0x053C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x053D(0x0003) MISSED OFFSET
	int                                                CachedReloadSize;                                         // 0x0540(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                AmmoInClip;                                               // 0x0544(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                ClipSize;                                                 // 0x0548(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                AmmoConsumedSinceLastReload;                              // 0x054C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FWeaponStateChangeRequest                   LastReloadRequest;                                        // 0x0550(0x0010)
	bool                                               bWeaponStartsLoaded;                                      // 0x0560(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EReloadReplicationFlags                            _ReloadReplicationFlags;                                  // 0x0561(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x6];                                       // 0x0562(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnExhaustedDel;                                           // 0x0568(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bShouldResumeReload;                                      // 0x0578(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFirstReload;                                             // 0x0579(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x6];                                       // 0x057A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAmmoChangedDel;                                         // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData17[0x20];                                      // 0x0590(0x0020) MISSED OFFSET
	class UClass*                                      LoadedDamageTypeClass;                                    // 0x05B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x18];                                      // 0x05B8(0x0018) MISSED OFFSET
	float                                              NextExpectedTimerEndTime;                                 // 0x05D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x05D4(0x0004) MISSED OFFSET
	struct FTimerHandle                                ActiveTimer;                                              // 0x05D8(0x0008)
	bool                                               bCanEverInterruptSprinting;                               // 0x05E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x05E1(0x0003) MISSED OFFSET
	float                                              SprintRecoveryRemaining;                                  // 0x05E4(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bReleasedFireInSprintRecovery;                            // 0x05E8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSprintInterruptedReload;                                 // 0x05E9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDodgeRollInterruptedReload;                              // 0x05EA(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSprintCanInterruptReload;                                // 0x05EB(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDodgeRollCanInterruptReload;                             // 0x05EC(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x05ED(0x0003) MISSED OFFSET
	float                                              DodgeRollRecoveryRemaining;                               // 0x05F0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x1C];                                      // 0x05F4(0x001C) MISSED OFFSET
	bool                                               bInLockon;                                                // 0x0610(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0611(0x0003) MISSED OFFSET
	float                                              LockonProgress;                                           // 0x0614(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LockonDuration;                                           // 0x0618(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LockonStartRotation;                                      // 0x061C(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LockonEndRotation;                                        // 0x0628(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x58];                                      // 0x0634(0x0058) MISSED OFFSET
	struct FRandomStream                               WeaponRandomStream;                                       // 0x068C(0x0008) (BlueprintVisible, Net, ZeroConstructor)
	unsigned char                                      UnknownData25[0x54];                                      // 0x0694(0x0054) MISSED OFFSET
	class UKSAimFrictionData*                          AimAssistFrictionData;                                    // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSAimMagnetismData*                         AimAssistMagnetismData;                                   // 0x06F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSAimLockData*                              AimAssistLockData;                                        // 0x06F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSAimSnapData*                              AimAssistSnapData;                                        // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireInputForAimAssistFriction;                        // 0x0708(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireInputForAimAssistMagnetism;                       // 0x0709(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireInputForAimAssistLock;                            // 0x070A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData26[0x5];                                       // 0x070B(0x0005) MISSED OFFSET
	class UCurveVector*                                AimAssistFrictionCurve;                                   // 0x0710(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AimAssistFrictionDistanceCurve;                           // 0x0718(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                AimAssistMagnetismCurve;                                  // 0x0720(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AimAssistMagnetismDistanceCurve;                          // 0x0728(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                AimAssistLockCurve;                                       // 0x0730(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 AimAssistLockDistanceCurve;                               // 0x0738(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireInputForHipAimAssistFriction;                     // 0x0740(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireInputForHipAimAssistMagnetism;                    // 0x0741(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireInputForHipAimAssistLock;                         // 0x0742(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData27[0x5];                                       // 0x0743(0x0005) MISSED OFFSET
	class UCurveVector*                                HipAimAssistFrictionCurve;                                // 0x0748(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 HipAimAssistFrictionDistanceCurve;                        // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                HipAimAssistMagnetismCurve;                               // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 HipAimAssistMagnetismDistanceCurve;                       // 0x0760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                HipAimAssistLockCurve;                                    // 0x0768(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 HipAimAssistLockDistanceCurve;                            // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    MaxAimAssistSnapRotation;                                 // 0x0778(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x4];                                       // 0x0784(0x0004) MISSED OFFSET
	class UCurveFloat*                                 AimAssistSnapDistanceCurve;                               // 0x0788(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                AimAssistSnapCurve;                                       // 0x0790(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon");
		return ptr;
	}


	bool StopFireOnRelease();
	void StopFire();
	void StopDefaultAim();
	bool StopAltFire();
	void StopAimOverShoulder();
	void StopAimDownSights();
	void StateRequestTimeoutExpired();
	bool StartRetrieving();
	bool StartReload();
	bool StartHolstering();
	bool StartFire();
	void StartDefaultAim();
	bool StartAltFire();
	void StartAimOverShoulder();
	void StartAimDownSights();
	void SimulateConsumeAmmo(int* AmmoInClipAfterConsume, int* AmmoToConsumeFromInventory);
	bool ShouldStartReloadInterruptSprinting();
	bool ShouldStartHolsterInterruptSprinting();
	bool ShouldStartFireInterruptSprinting();
	bool ShouldStartFireInterruptAimDownSights();
	bool ShouldConsumeAmmoDirectlyFromInventory();
	bool ShouldBeRemovedWhenExhausted();
	void SetAutoSwapOutWeaponId(uint32_t* OtherWeaponId);
	void ServerRetrieveActiveWeapon(struct FWeaponStateChangeRequest* request);
	void ServerRequestStateChange(struct FWeaponStateChangeRequest* request);
	void ServerPostReload(struct FWeaponStateChangeRequest* request, int* AmmoDelta);
	void ServerCookReleased(struct FWeaponStateChangeRequest* request, float* AdditionalCookTime);
	void Reload();
	void ProcessHits(struct FAimData* ReceivedAim, TArray<struct FHitResult>* Hits);
	void PreLoadAmmo();
	bool OwnerIsTransitioningAimState();
	bool OwnerIsSwimming();
	bool OwnerIsSprinting();
	bool OwnerIsReloadingAnyWeapon();
	bool OwnerIsMovingOnGround();
	bool OwnerIsLocallyViewed();
	bool OwnerIsFreeFalling();
	bool OwnerIsFiringMeleeWeapon();
	bool OwnerIsDowned();
	bool OwnerIsAlive();
	bool OwnerHasAmmo();
	float OnStartRetrieving(EWeaponStateNew* PreviousState);
	float OnStartReloadCooldown(EWeaponStateNew* PreviousState);
	float OnStartPreReload(EWeaponStateNew* PreviousState);
	float OnStartPreFire(EWeaponStateNew* PreviousState);
	float OnStartPostReload(EWeaponStateNew* PreviousState);
	float OnStartPostFire(EWeaponStateNew* PreviousState);
	void OnStartInactive(EWeaponStateNew* PreviousState);
	float OnStartHolstering(EWeaponStateNew* PreviousState);
	float OnStartCooldown(EWeaponStateNew* PreviousState);
	float OnStartBuildup(EWeaponStateNew* PreviousState);
	void OnRep_WeaponState();
	void OnRep_WeaponAsset();
	void OnRep_AuxiliaryWeaponInfo();
	void OnRep_AutoSwapOutWeaponId();
	void OnRep_Ammo();
	void OnPostMantleLockoutEnd();
	void OnOwnerMovementModeChangedNative(TEnumAsByte<EMovementMode>* OldMode, unsigned char* OldCustomMode, TEnumAsByte<EMovementMode>* NewMode, unsigned char* NewCustomMode);
	void OnOwnerMovementModeChanged(TEnumAsByte<EMovementMode>* OldMode, unsigned char* OldCustomMode, TEnumAsByte<EMovementMode>* NewMode, unsigned char* NewCustomMode);
	void OnEndRetrieving(EWeaponStateNew* NextState);
	void OnEndReloadCooldown(EWeaponStateNew* NewState);
	void OnEndPreReload(EWeaponStateNew* NextState);
	void OnEndPreFire(EWeaponStateNew* NextState);
	void OnEndPostReload(EWeaponStateNew* NextState);
	void OnEndPostFire(EWeaponStateNew* NextState);
	void OnEndInactive(EWeaponStateNew* NextState);
	void OnEndIdleState(EWeaponStateNew* NextState);
	void OnEndHolstering(EWeaponStateNew* NextState);
	void OnEndCooldown(EWeaponStateNew* NextState);
	void OnEndBuildup(EWeaponStateNew* NextState);
	void OnBeginIdleState(EWeaponStateNew* PreviousState);
	float ModifyDamageDealt(float* DamageAmount, struct FDamageEvent* DamageEvent, class AController** EventInstigator, class AActor** DamageCauser, class AActor** DamagedActor);
	bool IsRetrieving();
	bool IsReloading();
	bool IsInSprintRecovery();
	bool IsInReloadingLoop();
	bool IsInFiringLoop();
	bool IsInDodgeRollRecovery();
	bool IsHolstering();
	bool IsFiring();
	bool IsExhausted();
	bool IsEquippedMelee();
	bool IsEquippedMainWeapon();
	bool IsEquippedGrenade();
	bool IsClipFull();
	bool IsClipEmpty();
	bool IsActiveWeapon();
	bool InstantReload();
	bool HasAttachment(class UKSWeaponAttachmentInstance** InAttachment);
	void HandleExhausted();
	EWeaponStateNew GetWeaponState();
	class UKSWeaponComponent* GetWeaponComponent();
	class UKSWeaponAsset* GetWeaponAsset();
	float GetWalkSpeedModifier();
	float GetReloadCooldownTime();
	float GetPreReloadTime();
	float GetPostReloadTime();
	float GetMovementAccuracyPenalty();
	float GetMaxFiringAccuracyLoss();
	float GetLimbDamageAmount();
	float GetInAirAccuracyModifier();
	float GetHeadDamageAmount();
	class AController* GetDamageInstigator();
	float GetDamageFalloffRangeScaler();
	float GetCrouchAccuracyModifier();
	int GetClipSize();
	class AKSCharacter* GetCharacterOwner();
	bool GetCanUseOffGround();
	float GetBaseDamageAmount();
	float GetBaseAccuracy();
	void GetAttachments(TArray<class UKSWeaponAttachment*>* OutWeaponAttachments);
	void GetAttachmentInstances(TArray<class UKSWeaponAttachmentInstance*>* OutWeaponAttachmentInstances);
	class UKSWeaponAttachmentInstance* GetAttachment(struct FGameplayTag* InAttachPoint);
	EAmmoType GetAmmoType();
	int GetAmmoInOwnerInventory();
	int GetAmmoInClip();
	float GetAimOverShoulderAccuracyModifier();
	float GetAimDownSightsFOV();
	float GetAccuracyReturnRate();
	float GetAccuracyReturnDelay();
	float GetAccuracyLossPerShot();
	void FireWeapon();
	void EndState(EWeaponStateNew* NextState);
	void ConsumePendingFire();
	int ConsumeAmmo();
	void ClientStateChangeRejected(uint16_t* nRequestId, EWeaponStateNew* RestoreState);
	void ClientStateChangeAccepted(uint16_t* nRequestId);
	void ClientRecoverSeedMisalignment(uint16_t* RequestID, struct FRandomStream* ServerStream);
	void ClientNotifyRecoveryFinish();
	void ClientForceUpdateAmmoInClip(int* NewAmmo);
	void ClientForceIdleFromFire();
	void ClientFixLastReload(uint16_t* RequestID, int* InAmmoInClip);
	void CheckExhausted();
	bool CanUseAnAimStateNow();
	bool CanToggleOutOfAimDownSightsNow();
	bool CanToggleIntoAimDownSightsNow();
	bool CanStartReloadNow();
	bool CanStartFireNow();
	bool CanRetrieveNow();
	bool CanReloadNowCommon();
	bool CanRefireNow();
	bool CanReceiveAttachment(class UKSWeaponAttachment** InAttachment, struct FGameplayTagContainer* AvailableAttachPoints);
	bool CanInteractWith(class AActor** InteractableTarget);
	bool CanHolsterNow();
	bool CanFireNowCommon();
	bool CanEverReload();
	bool CanEverAimOverShoulder();
	bool CanEverAimDownSights();
	bool CanEverAimAlternate();
	bool CanDropNow();
	bool CanCookNow();
	bool CanContinueReloadNow();
	bool CancelHolstering();
	bool CanBeSwappedTo(bool* bByForce);
	bool CanBeSwappedFrom();
	bool CanBeInterruptedNow();
	float CalculateDamageFromHitInfo(struct FHitResult* HitInfo);
	float CalculateDamageFalloffFromHitResults(struct FHitResult* HitInfo);
	float CalculateDamageFalloffFromDistance(float* Distance);
	void BeginState(EWeaponStateNew* PreviousState);
	void AltFireInitiated();
	void AltFireEnded();
	bool AllowSprintingRightNow();
	bool AllowDodgeRollRightNow();
	void AimTransitionComplete(EKSCharacterAimMode* NewAimState);
	bool AbortReload();
	void AbortFire();
};


// Class Killstreak.KSArmor
// 0x0008 (0x07A0 - 0x0798)
class AKSArmor : public AKSWeapon
{
public:
	float                                              Durability;                                               // 0x0798(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x079C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSArmor");
		return ptr;
	}


	float GetDurability();
	class UKSArmorAsset* GetArmorAsset();
	bool CanAbsorbDamageType(class UClass** DamageTypeClass);
	float CalcAbsorbRadialDamage(float* Damage, struct FRadialDamageEvent* RadialDamageEvent, class AController** EventInstigator, class AActor** DamageCauser);
	float CalcAbsorbPointDamage(float* Damage, struct FPointDamageEvent* PointDamageEvent, class AController** EventInstigator, class AActor** DamageCauser);
};


// Class Killstreak.KSWeaponAsset
// 0x0468 (0x05C0 - 0x0158)
class UKSWeaponAsset : public UKSItem
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0158(0x0008) MISSED OFFSET
	struct FText                                       WeaponDisplayName;                                        // 0x0160(0x0018) (Deprecated)
	struct FText                                       WeaponDescription;                                        // 0x0178(0x0018) (Deprecated)
	struct FGameplayTag                                WeaponType;                                               // 0x0190(0x0008) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0198(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset.WeaponClass
	unsigned char                                      UnknownData02[0x28];                                      // 0x01C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset.WeaponComponentClass
	unsigned char                                      UnknownData03[0x28];                                      // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset.WeaponAmmoWidgetClass
	unsigned char                                      UnknownData04[0x28];                                      // 0x0210(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset.WeaponDropClass
	bool                                               bUnique;                                                  // 0x0238(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldBeRemovedWhenExhausted;                            // 0x0239(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBeDropped;                                            // 0x023A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForceUprightDrops;                                       // 0x023B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDoesRestoreAmmo;                                         // 0x023C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bModsCanReplenishAmmo;                                    // 0x023D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanEverFire;                                             // 0x023E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLagCompensatedFire;                                      // 0x023F(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLimitNumInPlay;                                          // 0x0240(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0241(0x0003) MISSED OFFSET
	int                                                MaxNumInPlay;                                             // 0x0244(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsesEquipPoint;                                          // 0x0248(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0249(0x0007) MISSED OFFSET
	struct FGameplayTagContainer                       ValidEquipPoints;                                         // 0x0250(0x0020) (Deprecated)
	EFireModeType                                      _FireModeType;                                            // 0x0270(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0271(0x0003) MISSED OFFSET
	int                                                RoundsPerBurst;                                           // 0x0274(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAltFire;                                              // 0x0278(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseBuildupForCooking;                                    // 0x0279(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x027A(0x0002) MISSED OFFSET
	float                                              BuildupTime;                                              // 0x027C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreFireTime;                                              // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreFireInterruptThreshold;                                // 0x0284(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AltPreFireTime;                                           // 0x0288(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostFireTime;                                             // 0x028C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AltPostFireTime;                                          // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostFireForgivenessTime;                                  // 0x0294(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CooldownTime;                                             // 0x0298(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanEverReload;                                           // 0x029C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bConsumeAmmoDirectlyFromInventory;                        // 0x029D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EReloadType                                        _ReloadType;                                              // 0x029E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x029F(0x0001) MISSED OFFSET
	float                                              PreReloadTime;                                            // 0x02A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostReloadTime;                                           // 0x02A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadCooldownTime;                                       // 0x02A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FirstShotPreReloadTime;                                   // 0x02AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ClipSize;                                                 // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanInterruptPreReload;                                   // 0x02B4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EAmmoType                                          _AmmoType;                                                // 0x02B5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x02B6(0x0002) MISSED OFFSET
	int                                                DefaultAmmo;                                              // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUnlimitedAmmo;                                           // 0x02BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x02BD(0x0003) MISSED OFFSET
	float                                              HolsterTime;                                              // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RetriveTime;                                              // 0x02C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanFireFromRetrieve;                                     // 0x02C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EReticleType                                       _ReticleType;                                             // 0x02C9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x6];                                       // 0x02CA(0x0006) MISSED OFFSET
	struct FWeaponStateGraph                           _WeaponStateGraph;                                        // 0x02D0(0x0010) (Transient)
	bool                                               bDoRadialDamage;                                          // 0x02E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsRadialDamageConical;                                   // 0x02E1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x02E2(0x0002) MISSED OFFSET
	float                                              HeadDamageAmount;                                         // 0x02E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageAmount;                                             // 0x02E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LimbDamageAmount;                                         // 0x02EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FInterpCurveFloat                           DamageFalloffCurve;                                       // 0x02F0(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FRadialDamageParams                         _RadialDamageParams;                                      // 0x0308(0x0014) (Edit, DisableEditOnInstance)
	bool                                               bIgnoreFriendlies;                                        // 0x031C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreSelf;                                              // 0x031D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreWalls;                                             // 0x031E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x031F(0x0001) MISSED OFFSET
	float                                              RadialConicalHalfAngle;                                   // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0324(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData16[0x28];                                      // 0x0324(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset.DamageTypeClass
	float                                              CautionRadius;                                            // 0x0350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ShotPenetrationCount;                                     // 0x0354(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAimTransitionTime;                                 // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanEverAimOverShoulder;                                  // 0x035C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x035D(0x0003) MISSED OFFSET
	float                                              AimOverShoulderTransitionTime;                            // 0x0360(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanEverAimDownSights;                                    // 0x0364(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0365(0x0003) MISSED OFFSET
	float                                              AimDownSightsTransitionTime;                              // 0x0368(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLockoutAimStateInCooldown;                               // 0x036C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x036D(0x0003) MISSED OFFSET
	float                                              AimDownSightsFov;                                         // 0x0370(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanEverAimAlternate;                                     // 0x0374(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x0375(0x0003) MISSED OFFSET
	float                                              AimAlternateTransitionTime;                               // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPrefireLockon;                                           // 0x037C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x037D(0x0003) MISSED OFFSET
	float                                              PrefireLockonAngle;                                       // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PrefireLockonDistance;                                    // 0x0384(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPrefireOverlapSkipsToFire;                               // 0x0388(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x7];                                       // 0x0389(0x0007) MISSED OFFSET
	TArray<struct FPrefireSkipWindow>                  PrefireSkipWindows;                                       // 0x0390(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              PrefireOverlapGracePeriod;                                // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EThirdPersonAimOriginType                          _ThirdPersonAimOriginType;                                // 0x03A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x03A5(0x0003) MISSED OFFSET
	struct FVector                                     ThirdPersonFixedRelativeOffset;                           // 0x03A8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ThirdPersonAimOriginSocketName;                           // 0x03B4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseAccuracy;                                             // 0x03BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchAccuracyModifier;                                   // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOverShoulderAccuracyModifier;                          // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InAirAccuracyModifier;                                    // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MovementAccuracyPenalty;                                  // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AccuracyLossPerShot;                                      // 0x03D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFiringAccuracyLoss;                                    // 0x03D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AccuracyReturnRate;                                       // 0x03D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AccuracyReturnDelay;                                      // 0x03DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKickbackModule*                             _KickbackModule;                                          // 0x03E0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              KickbackApplicationTimeOverride;                          // 0x03E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanResetKickback;                                        // 0x03EC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET
	float                                              KickbackResetTime;                                        // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseKickbackRecovery;                                     // 0x03F4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0x3];                                       // 0x03F5(0x0003) MISSED OFFSET
	float                                              KickbackRecoveryDelay;                                    // 0x03F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickbackRecoveryRate;                                     // 0x03FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickbackRecoveryAcceleration;                             // 0x0400(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCumulativeKickbackVerticalAngle;                       // 0x0404(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GamepadKickbackScaling;                                   // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintRecoveryTime;                                       // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStartFireInterruptsSprinting;                            // 0x0410(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStartReloadInterruptsSprinting;                          // 0x0411(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStartHolsterInterruptsSprinting;                         // 0x0412(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData26[0x1];                                       // 0x0413(0x0001) MISSED OFFSET
	float                                              DodgeRollRecoveryTime;                                    // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldPreventDodgeRollDuringFire;                        // 0x0418(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsAudible;                                               // 0x0419(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData27[0x2];                                       // 0x041A(0x0002) MISSED OFFSET
	float                                              AudibleRange;                                             // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WalkSpeedModifier;                                        // 0x0420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ADSSpeedModifier;                                         // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanUseOffGround;                                         // 0x0428(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x7];                                       // 0x0429(0x0007) MISSED OFFSET
	struct FGameplayTagContainer                       ValidWeaponAttachmentPoints;                              // 0x0430(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData29[0x50];                                      // 0x0450(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSWeaponAsset.ValidAttachments
	int                                                AttachmentSlotCount;                                      // 0x04A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData30[0x4];                                       // 0x04A4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData31[0x50];                                      // 0x04A4(0x0050) UNKNOWN PROPERTY: MapProperty Killstreak.KSWeaponAsset.AuxiliaryWeapons
	unsigned char                                      UnknownData32[0x28];                                      // 0x04F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAsset.VibrationEffect
	unsigned char                                      UnknownData33[0x28];                                      // 0x0520(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAsset.AlternativeVibrationEffect
	unsigned char                                      UnknownData34[0x28];                                      // 0x0548(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAsset.AlternativeVibrationAttenuation
	unsigned char                                      UnknownData35[0x28];                                      // 0x0570(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAsset.WeaponUpgrade
	unsigned char                                      UnknownData36[0x28];                                      // 0x0598(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAsset.ItemRenderImage

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAsset");
		return ptr;
	}


	class AKSWeapon* STATIC_TryToEquipToCharacterNoPointGiven(class UKSWeaponAsset** WeaponAsset, class AKSCharacter** InOwner, struct FGiveItemParameters* InGiveItemParameters, bool* bAllowSyncLoad);
	class AKSWeapon* STATIC_TryToEquipToCharacter(class UKSWeaponAsset** WeaponAsset, class AKSCharacter** InOwner, struct FGameplayTag* EquipPoint, struct FGiveItemParameters* InGiveItemParameters, bool* bAllowSyncLoad);
	bool ShouldUseBuildupForCooking();
	bool ShouldStartReloadInterruptSprinting();
	bool ShouldStartHolsterInterruptSprinting();
	bool ShouldStartFireInterruptSprinting();
	bool ShouldPreventDodgeRollDuringFire();
	bool ShouldPrefireOverlapSkipToFire();
	bool ShouldLockonPrefire();
	bool ShouldLagCompensateFire();
	bool ShouldForceUprightDrops();
	bool ShouldDoRadialDamage();
	bool ShouldBeRemovedWhenExhausted();
	bool RequiresAnEquipPoint();
	struct FInterpCurveVector2D MakeKickbackCurve(int* nShotIndex, float* AbsoluteMaxDuration);
	bool LockoutAimStateInCooldown();
	bool LimitNumInPlay();
	bool IsUnique();
	bool IsRadialDamageConical();
	bool IsGadget();
	float IsAudible();
	bool HasKickback();
	void GetWeaponUpgrade();
	struct FGameplayTag GetWeaponType();
	void GetWeaponStats(TArray<struct FString>* OutStats);
	struct FString GetWeaponNameAsString();
	struct FText GetWeaponName();
	void GetWeaponDropClass();
	struct FString GetWeaponDescriptionAsString();
	struct FText GetWeaponDescription();
	void GetWeaponComponentClass();
	void GetWeaponClass();
	void GetWeaponAttachmentPoints(struct FGameplayTagContainer* OutAttachPoints);
	void GetWeaponAmmoWidgetClass();
	float GetWalkSpeedModifier();
	void GetVibrationEffect();
	struct FGameplayTagContainer GetValidEquipPoints();
	void GetValidAttachments();
	bool GetUseAltFire();
	bool GetUnlimitedAmmo();
	struct FVector GetThirdPersonFixedRelativeOffset();
	float GetSprintRecoveryTime();
	void GetSoftItemRenderImage();
	int GetShotPenetrationCount();
	int GetRoundsPerBurst();
	float GetRetrieveTime();
	EReticleType GetReticleType();
	EReloadType GetReloadType();
	float GetReloadCooldownTime();
	bool GetRadialIgnoreWalls();
	bool GetRadialIgnoreSelf();
	bool GetRadialIgnoreFriendlies();
	struct FRadialDamageParams GetRadialDamageParams();
	float GetRadialConicalHalfAngle();
	float GetPreReloadTime();
	float GetPreFireTime();
	int GetPrefireSkipWindowNum();
	struct FPrefireSkipWindow GetPrefireSkipWindow(int* Index);
	float GetPrefireOverlapGracePeriod();
	float GetPrefireLockonDistance();
	float GetPrefireLockonAngle();
	float GetPreFireInterruptThreshold();
	float GetPostReloadTime();
	float GetPostFireTime();
	float GetPostFireForgivenessTime();
	float GetOuterRadius();
	float GetMovementAccuracyPenalty();
	int GetMaxNumInPlay();
	float GetMaxFiringAccuracyLoss();
	float GetMaxFalloffDistance();
	float GetMaxCumulativeKickbackVerticalAngle();
	float GetLimbDamageAmount();
	float GetKickbackResetTime();
	float GetKickbackRecoveryRate();
	float GetKickbackRecoveryDelay();
	float GetKickbackRecoveryAcceleration();
	float GetKickbackApplicationOverride();
	float GetInnerRadius();
	float GetInAirAccuracyModifier();
	float GetHolsterTime();
	float GetHeadDamageAmount();
	float GetGamepadKickbackScaling();
	float GetFirstShotPreReloadTime();
	EFireModeType GetFireModeType();
	float GetDodgeRollRecoveryTime();
	int GetDefaultAmmo();
	float GetDefaultAimTransitionTime();
	void GetDamageTypeClass();
	float GetDamageAmount();
	float GetCrouchAccuracyModifier();
	float GetCooldownDownTime();
	bool GetConsumeAmmoDirectlyFromInventory();
	void GetCompatibleAttachments(TArray<class UKSWeaponAttachment*>* OutAttachments);
	void GetCompatibleAttachmentAssets();
	int GetClipSize();
	float GetCautionRadius();
	bool GetCanUseOffGround();
	float GetBuildupTime();
	float GetBaseRadialDamage();
	float GetBaseAccuracy();
	float GetAudibleRange();
	int GetAttachmentSlotCount();
	EAmmoType GetAmmoType();
	void GetAlternativeVibrationEffect();
	void GetAlternativeVibrationAttenuation();
	float GetAlternatePreFireTime();
	float GetAlternatePostFireTime();
	float GetAimOverShoulderTransitionTime();
	float GetAimOverShoulderAccuracyModifier();
	float GetAimDownSightsTransitionTime();
	float GetAimDownSightsFOV();
	float GetAimAlternateTransitionTime();
	float GetADSSpeedModifier();
	float GetAccuracyReturnRate();
	float GetAccuracyReturnDelay();
	float GetAccuracyLossPerShot();
	bool DoesRestoreAmmo();
	class AKSProjectile* STATIC_CreateProjectile(class UObject** WorldContextObject, class UKSWeaponAsset** WeaponAsset, struct FVector* SpawnLocation, struct FRotator* SpawnRotation, struct FDropItemParameters* InDropItemParameters, class AKSWeapon** SpawningWeapon, class AActor** SpawningOwner, class APawn** SpawningInstigator);
	float STATIC_ConeHalfAngleToAccuracy(float* HalfAngle);
	bool CanWeaponStateTransition(EWeaponStateNew* OldState, EWeaponStateNew* NewState);
	bool CanResetKickback();
	bool CanRecoverFromKickback();
	bool CanReceiveAttachment(class UKSWeaponAttachment** InAttachment, struct FGameplayTagContainer* AvailableAttachPoints);
	bool CanModsReplenishAmmo();
	bool CanInterruptPreReload();
	bool CanEverReload();
	bool CanEverFire();
	bool CanEverAimOverShoulder();
	bool CanEverAimDownSights();
	bool CanEverAimAlternate();
	bool CanBeDropped();
	float CalculateDamageFromProjectileHit(struct FHitResult* HitInfo, class AKSProjectile** Projectile);
	float CalculateDamageFromInstantHit(struct FHitResult* HitInfo, float* DamageFalloffRangeScaler);
	float CalculateDamageFalloffFromProjectileHit(struct FHitResult* HitInfo, class AKSProjectile** Projectile);
	float CalculateDamageFalloffFromHitResults(struct FHitResult* HitInfo, float* FalloffRangeScaler);
	float CalculateDamageFalloffFromDistance(float* Distance, float* FalloffRangeScaler);
	float STATIC_AccuracyToConeHalfAngle(float* Accuracy);
};


// Class Killstreak.KSArmorAsset
// 0x0010 (0x05D0 - 0x05C0)
class UKSArmorAsset : public UKSWeaponAsset
{
public:
	float                                              Durability;                                               // 0x05C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageAbsorbPercent;                                      // 0x05C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DisplayLevel;                                             // 0x05C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAbsorbsHeadDamage;                                       // 0x05CC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAbsorbsBreakingHit;                                      // 0x05CD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05CE(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSArmorAsset");
		return ptr;
	}


	float GetMaxDurability();
	int GetDisplayLevel();
	float GetDamageAbsorbPercent();
	bool DoesAbsorbBreakingHit();
	float CalcAbsorbRadialDamage(float* Damage, struct FRadialDamageEvent* RadialDamageEvent, class AController** EventInstigator, class AActor** DamageCauser);
	float CalcAbsorbPointDamage(float* Damage, struct FPointDamageEvent* PointDamageEvent, class AController** EventInstigator, class AActor** DamageCauser);
};


// Class Killstreak.KSWeaponAssetDrop
// 0x03A8 (0x0800 - 0x0458)
class AKSWeaponAssetDrop : public AKSItemDrop
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0458(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnProjectileSpawned;                                      // 0x0460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0470(0x0018) MISSED OFFSET
	class AKSProjectile*                               ReturnProjectile;                                         // 0x0488(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UKSWeaponComponent*                          _WeaponComponent;                                         // 0x0490(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class UKSWeaponAsset*                              _WeaponAsset;                                             // 0x0498(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	uint16_t                                           WeaponComponentEquipmentId;                               // 0x04A0(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x04A2(0x0006) MISSED OFFSET
	class UKSWeaponAsset*                              CachedWeaponAsset;                                        // 0x04A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xD8];                                      // 0x04B0(0x00D8) MISSED OFFSET
	struct FBundledAmmoInfo                            _BundledAmmo;                                             // 0x0588(0x000C) (Edit, Net)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0594(0x0004) MISSED OFFSET
	struct FKSWeaponDropAttachmentContainer            _AttachmentContainer;                                     // 0x0598(0x00D0) (Edit, Net, DisableEditOnTemplate)
	struct FKSEquipmentContainer                       _EquipmentContainer;                                      // 0x0668(0x0198)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAssetDrop");
		return ptr;
	}


	void SetBundledAmmoToDefault();
	void OverrideDropAmmo(int* ReserveAmmo, int* AmmoInClip);
	void OnReturnProjectileStopped(struct FHitResult* HitResult);
	void OnRep_ReturnProjectile();
	class UKSWeaponComponent* GetWeaponComponent();
	class UKSWeaponAsset* GetWeaponAsset();
	class AKSProjectile* GetReturnProjectile();
	bool GetLabelInfoForFireModeType(EFireModeType* FireModeType);
	bool GetLabelInfoForAmmoType(EAmmoType* AmmoType);
	void BroadcastPickupFailedInventoryFull(class AKSCharacter** Receiver);
	bool AddAttachment(class UKSWeaponAttachment** InAttachment);
};


// Class Killstreak.KSArmorAssetDrop
// 0x0008 (0x0808 - 0x0800)
class AKSArmorAssetDrop : public AKSWeaponAssetDrop
{
public:
	float                                              RemainingDurability;                                      // 0x0800(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0804(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSArmorAssetDrop");
		return ptr;
	}

};


// Class Killstreak.KSAssetManager
// 0x00A0 (0x0528 - 0x0488)
class UKSAssetManager : public UPInv_AssetManager
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0488(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAssetManager");
		return ptr;
	}

};


// Class Killstreak.KSNeutralBombDrop
// 0x0140 (0x0940 - 0x0800)
class AKSNeutralBombDrop : public AKSWeaponAssetDrop
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0800(0x0008) MISSED OFFSET
	class AKSCharacter*                                CurrentInteractor;                                        // 0x0808(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              NeutralPickupTime;                                        // 0x0810(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0814(0x0004) MISSED OFFSET
	struct FText                                       NeutralPickupPrompt;                                      // 0x0818(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       NeutralPickupProgressText;                                // 0x0830(0x0018) (Edit, DisableEditOnInstance)
	float                                              DisarmTime;                                               // 0x0848(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x084C(0x0004) MISSED OFFSET
	struct FText                                       DisarmPrompt;                                             // 0x0850(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       DisarmProgressText;                                       // 0x0868(0x0018) (Edit, DisableEditOnInstance)
	class UClass*                                      DisarmInteractionType;                                    // 0x0880(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDisarmInteractionDistance;                             // 0x0888(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x088C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData04[0x28];                                      // 0x088C(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSNeutralBombDrop.MinimapDisplayWidget
	unsigned char                                      UnknownData05[0x28];                                      // 0x08B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSNeutralBombDrop.FullmapDisplayWidget
	unsigned char                                      UnknownData06[0x28];                                      // 0x08E0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSNeutralBombDrop.OverlayDisplayWidget
	struct FName                                       DisarmCameraName;                                         // 0x0908(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DisarmCameraTransitionInTime;                             // 0x0910(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DisarmCameraTransitionOutTime;                            // 0x0914(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DisarmCameraMaxRotation;                                  // 0x0918(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisarmCameraRotationLockout;                              // 0x091C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisarmCameraShake;                                       // 0x091D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x091E(0x0002) MISSED OFFSET
	class UClass*                                      DisarmCameraShake;                                        // 0x0920(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0928(0x0004) MISSED OFFSET
	int                                                TeamSpottingBitmask;                                      // 0x092C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpottingRange;                                         // 0x0930(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpottingSweepRadius;                                      // 0x0934(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroundCheckDistance;                                      // 0x0938(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x093C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNeutralBombDrop");
		return ptr;
	}


	void OnNeutralBombStateChanged(struct FKSNeutralBombState* NewState);
	bool IsSpottedByTeam(class AKSTeamState** Team);
	bool IsSpottedByPlayer(class AController** Controller);
	void ExplodeCosmetic();
	void Explode();
};


// Class Killstreak.KSAttackBombDrop
// 0x0000 (0x0940 - 0x0940)
class AKSAttackBombDrop : public AKSNeutralBombDrop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAttackBombDrop");
		return ptr;
	}

};


// Class Killstreak.KSObjectiveBase
// 0x0110 (0x0440 - 0x0330)
class AKSObjectiveBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnObjectiveUpdate;                                        // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EObjectiveIconType                                 MapIconType;                                              // 0x0348(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	int                                                DisplayId;                                                // 0x034C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                ActiveObjectiveIndex;                                     // 0x0350(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FObjectiveState                             _ObjectiveState;                                          // 0x0354(0x0014) (BlueprintVisible, Net)
	int                                                ObjectiveId;                                              // 0x0368(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EObjectiveType                                     _ObjectiveType;                                           // 0x036C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x036D(0x0003) MISSED OFFSET
	struct FName                                       DefaultState;                                             // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       DisplayName;                                              // 0x0378(0x0018) (Edit, DisableEditOnTemplate)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0390(0x0018) MISSED OFFSET
	int                                                ObjectiveLootGroup;                                       // 0x03A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NavigationLocation;                                       // 0x03AC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData05[0x28];                                      // 0x03B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSObjectiveBase.MinimapDisplayWidget
	unsigned char                                      UnknownData06[0x28];                                      // 0x03F0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSObjectiveBase.FullmapDisplayWidget
	unsigned char                                      UnknownData07[0x28];                                      // 0x0418(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSObjectiveBase.OverlayDisplayWidget

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSObjectiveBase");
		return ptr;
	}


	void SetState(struct FName* NewState, int* NewOwner);
	void ResetState(bool* ClearOwner);
	void OnRep_ObjectiveState();
	void OnRep_ObjectiveId();
	void HandleNewState();
	int GetOwningTeamOrPlayer();
	float GetObjectiveMeterProgressTotal();
	float GetObjectiveMeterProgress();
	int GetObjectiveId();
	struct FText GetObjectiveDisplayName();
	struct FString GetObjectiveDisplayLabel();
	struct FName GetCurrentState();
	bool CanChangeState(struct FName* NewState, int* NewOwner);
	void AssignObjectiveId(int* NewId);
};


// Class Killstreak.KSExtractionComputer
// 0x0100 (0x0540 - 0x0440)
class AKSExtractionComputer : public AKSObjectiveBase
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0440(0x0020) MISSED OFFSET
	struct FName                                       SoundEventName;                                           // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SoundEventLoudness;                                       // 0x0468(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToNotifyBots;                                         // 0x046C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FavoredSide;                                              // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TimeToHack;                                               // 0x0474(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToDehack;                                             // 0x0478(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBeDehacked;                                           // 0x047C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x047D(0x0003) MISSED OFFSET
	float                                              CurrentInteractionProgress;                               // 0x0480(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	class UKSInteractionManager*                       CurrentInteractionManager;                                // 0x0488(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AKSCharacter*                                ComputerUser;                                             // 0x0490(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FText                                       HackingInteractionProgressText;                           // 0x0498(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       DehackingInteractionProgressText;                         // 0x04B0(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       HackingInteractionPromptText;                             // 0x04C8(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       DehackingInteractionPromptText;                           // 0x04E0(0x0018) (Edit, DisableEditOnInstance)
	class USphereComponent*                            InteractionRangeSphereComponent;                          // 0x04F8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FVector                                     RelativeInteractionPoint;                                 // 0x0500(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CameraName;                                               // 0x050C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraTransitionInTime;                                   // 0x0514(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraTransitionOutTime;                                  // 0x0518(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraMaxRotation;                                        // 0x051C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CameraRotationLockout;                                    // 0x0520(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FacesInteract;                                            // 0x0521(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCameraShake;                                             // 0x0522(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0523(0x0005) MISSED OFFSET
	class UClass*                                      CameraShake;                                              // 0x0528(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsed;                                                    // 0x0530(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0531(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSExtractionComputer");
		return ptr;
	}


	void OnTeamSidesFlipped();
	void NotifyBotsOfHackedState();
	void LocalHoverStateChanged(bool* bIsHovered);
	void InteractionEndOverlap(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void InteractionComplete();
};


// Class Killstreak.KSAttackExtractionComputer
// 0x0000 (0x0540 - 0x0540)
class AKSAttackExtractionComputer : public AKSExtractionComputer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAttackExtractionComputer");
		return ptr;
	}

};


// Class Killstreak.KSAvatar
// 0x0000 (0x0158 - 0x0158)
class UKSAvatar : public UKSItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAvatar");
		return ptr;
	}

};


// Class Killstreak.KSAvenger
// 0x0020 (0x00B0 - 0x0090)
class UKSAvenger : public UKSAccoladeTracker
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET
	TArray<struct FPlayerCombatInfo>                   PlayerTrackers;                                           // 0x0098(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              MaxTrackerTimer;                                          // 0x00A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAvenger");
		return ptr;
	}


	void StoreCombatInfo(struct FCombatEventInfo* ElimEvent);
	void RemoveTracker(struct FPlayerCombatInfo* CurrentTrackPlayer);
	bool CheckPlayerTrackers(class AKSPlayerState** Instigator, class AKSPlayerState** Victim);
};


// Class Killstreak.KSAwardActivity
// 0x0000 (0x01E8 - 0x01E8)
class UKSAwardActivity : public UKSActivity
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAwardActivity");
		return ptr;
	}

};


// Class Killstreak.KSAwardsManager
// 0x0000 (0x01C0 - 0x01C0)
class UKSAwardsManager : public UKSActivityManagerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSAwardsManager");
		return ptr;
	}


	bool GetAchievementActivityInstances(TArray<class UKSActivityInstance*>* Instances);
};


// Class Killstreak.KSBanner
// 0x0050 (0x01A8 - 0x0158)
class UKSBanner : public UKSItem
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0158(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSBanner.SmallBannerIcon
	unsigned char                                      UnknownData01[0x28];                                      // 0x0180(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSBanner.LargeBannerIcon

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBanner");
		return ptr;
	}


	void GetSoftSmallBannerIcon();
	void GetSoftLargeBannerIcon();
};


// Class Killstreak.KSBlendableCameraModifier
// 0x0000 (0x0048 - 0x0048)
class UKSBlendableCameraModifier : public UCameraModifier
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBlendableCameraModifier");
		return ptr;
	}

};


// Class Killstreak.KSFXCurveComponent
// 0x0080 (0x0178 - 0x00F8)
class UKSFXCurveComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00F8(0x0050) MISSED OFFSET
	class UMaterialInstanceDynamic*                    PostProcessMID;                                           // 0x0148(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          PostProcessMIDParent;                                     // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData)
	class UParticleSystemComponent*                    _ParticleSystem;                                          // 0x0158(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UParticleSystem*                             ParticleSystemParent;                                     // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bPlaying;                                                 // 0x0168(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bReversing;                                               // 0x0169(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLooping;                                                 // 0x016A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x016B(0x0001) MISSED OFFSET
	float                                              CurrentTime;                                              // 0x016C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0170(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFXCurveComponent");
		return ptr;
	}


	void UpdateScalarTrack(struct FName* TrackName, float* TrackValue);
	void UpdateColorTrack(struct FName* TrackName, struct FLinearColor* TrackValue);
	void Stop();
	void Reverse();
	void ResetTime();
	void Play();
	bool IsPlaying();
	struct FName GetFxID();
	class AKSCharacter* GetCharacterOwner();
};


// Class Killstreak.KSBloodSplatterComponent
// 0x0008 (0x0180 - 0x0178)
class UKSBloodSplatterComponent : public UKSFXCurveComponent
{
public:
	float                                              Damage;                                                   // 0x0178(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBloodSplatterComponent");
		return ptr;
	}


	void AddDamageInstance(float* DamageAmount, struct FVector* DamageOrigin);
};


// Class Killstreak.KSInteractionState
// 0x0008 (0x0030 - 0x0028)
class UKSInteractionState : public UObject
{
public:
	EKSInteractionResult                               _Result;                                                  // 0x0028(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInteractionState");
		return ptr;
	}

};


// Class Killstreak.KSHoldOrTapStart
// 0x0000 (0x0030 - 0x0030)
class UKSHoldOrTapStart : public UKSInteractionState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSHoldOrTapStart");
		return ptr;
	}

};


// Class Killstreak.KSBlueprintStart
// 0x0000 (0x0030 - 0x0030)
class UKSBlueprintStart : public UKSHoldOrTapStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBlueprintStart");
		return ptr;
	}

};


// Class Killstreak.KSWaitingForTimer
// 0x0000 (0x0030 - 0x0030)
class UKSWaitingForTimer : public UKSInteractionState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWaitingForTimer");
		return ptr;
	}

};


// Class Killstreak.KSBlueprintWaiting
// 0x0000 (0x0030 - 0x0030)
class UKSBlueprintWaiting : public UKSWaitingForTimer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBlueprintWaiting");
		return ptr;
	}

};


// Class Killstreak.KSBlueprintableInteractable
// 0x00C8 (0x03F8 - 0x0330)
class AKSBlueprintableInteractable : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET
	float                                              Duration;                                                 // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanInteractFromBehind;                                   // 0x033C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanInteractWhileDowned;                                  // 0x033D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldDisplayInteractionProgress;                        // 0x033E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x033F(0x0001) MISSED OFFSET
	struct FName                                       InteractionName;                                          // 0x0340(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxNumberOfInteractors;                                   // 0x0348(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InteractionPriority;                                      // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInteractionAllowed;                                      // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	class UClass*                                      InteractionType;                                          // 0x0358(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UPrimitiveComponent*>                 OutlinedComponents;                                       // 0x0360(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0370(0x0010) MISSED OFFSET
	TArray<class UKSInteractionManager*>               ActiveInteractions;                                       // 0x0380(0x0010) (ExportObject, ZeroConstructor)
	int                                                NumActiveInteractions;                                    // 0x0390(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	struct FText                                       ProgressText;                                             // 0x0398(0x0018) (Edit, BlueprintVisible)
	struct FText                                       PromptText;                                               // 0x03B0(0x0018) (Edit, BlueprintVisible)
	struct FScriptMulticastDelegate                    OnInteractionStarted;                                     // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractionEnded;                                       // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractionComplete;                                    // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBlueprintableInteractable");
		return ptr;
	}


	void SetInteractability(bool* NewInteractable);
	void InterruptInteraction(class AKSCharacter** InteractingCharacter, bool* bForce);
	void InterruptAllInteractions(bool* bForce);
	bool InternalCanInteractOnPress(class AKSCharacter** InteractingCharacter);
	bool InternalCanInteractOnHold(class AKSCharacter** InteractingCharacter);
	void BlueprintInteractionStarted(class AKSCharacter** InteractingCharacter, float* InDuration);
	struct FVector BlueprintInteractionPoint();
	void BlueprintInteractionEnded(class AKSCharacter** InteractingCharacter);
	void AddOutlinedPrimitiveComponent(class UPrimitiveComponent** InComponent);
};


// Class Killstreak.KSBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UKSBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBlueprintFunctionLibrary");
		return ptr;
	}


	bool STATIC_TryToStartCarry(class UObject** WorldContextObject, TScriptInterface<class UKSCarriedInterface>* CarriedObject, class AKSCharacter** InHauler);
	class UTracerParticleSystemComponent* STATIC_SpawnTracerEmitterWithRotation(class UObject** WorldContextObject, class UParticleSystem** EmitterTemplate, struct FVector* start, struct FVector* end, float* TravelSpeed, struct FRotator* Rotation);
	class UTracerParticleSystemComponent* STATIC_SpawnTracerEmitter(class UObject** WorldContextObject, class UParticleSystem** EmitterTemplate, struct FVector* start, struct FVector* end, float* TravelSpeed);
	class UTracerStaticMeshComponent* STATIC_SpawnMeshTracerWithRotation(class UObject** WorldContextObject, class UStaticMesh** StaticMesh, struct FVector* start, struct FVector* end, class AActor** Instigator, class UMaterial** FriendlyMaterial, class UMaterialInstance** EnemyMaterial, float* TravelSpeed, struct FRotator* Rotation);
	class UTracerStaticMeshComponent* STATIC_SpawnMeshTracer(class UObject** WorldContextObject, class UStaticMesh** StaticMesh, struct FVector* start, struct FVector* end, class AActor** Instigator, class UMaterial** FriendlyMaterial, class UMaterialInstance** EnemyMaterial, float* TravelSpeed);
	class UDecalComponent* STATIC_SpawnImpactDecalAtLocation(class UObject** WorldContextObject, class UMaterialInterface** DecalMaterial, struct FVector* DecalSize, struct FVector* Location, struct FRotator* Rotation, float* LifeSpan);
	bool STATIC_ShouldDropshipDoorBeOpen(class UObject** WorldContextObject);
	void STATIC_SetupSkeletalMeshLODReductionGroups(class USkeletalMesh** SkeletalMesh, TArray<struct FSkeletalMeshMaterialToReductionGroup>* InReductionGroupMap);
	void STATIC_ResetRenderTargetBuffer();
	void STATIC_RemoveRowFromLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName);
	bool STATIC_QuickMeshMerge(TArray<class USkeletalMesh*>* SourceMeshList, class USkeletalMesh** OutMesh);
	void STATIC_ProcessTakePointHitDamage(class AKSCharacter** HitCharacter, struct FVector* RelativeHitLocation, struct FVector* RelativeHitNormal, class AActor** DamageCauser, struct FVector* WorldHitLocation, struct FVector* WorldHitNormal, struct FVector* VectorToHitSource, EKSMovementDirection* HitDirection);
	void STATIC_PrintStringInShipping(class UObject** WorldContextObject, struct FString* inString, bool* bPrintToScreen, bool* bPrintToLog, struct FLinearColor* TextColor, float* Duration);
	int STATIC_PostEventKS(class UAkAudioEvent** AkEvent, class AActor** Actor, int* CallbackMask, struct FScriptDelegate* PostEventCallback, bool* bStopWhenAttachedToDestroyed, struct FString* EventName, EOcclusionType* OcclusionType, bool* UseDistance, bool* UseDirection);
	int STATIC_PostEvent(class UAkAudioEvent** AkEvent, class UObject** GameObject, bool* bStopWhenAttachedToDestroyed, struct FString* EventName);
	void STATIC_PlayWorldCameraShake1P3P(class UObject** WorldContextObject, class UClass** Shake1P, class UClass** Shake3P, struct FVector* Epicenter, float* InnerRadius, float* OuterRadius, float* Falloff, bool* bOrientShakeTowardsEpicenter);
	struct FActivityReference STATIC_MakeActivityReference(int64_t* ReferenceValue1, int64_t* ReferenceValue2, int64_t* ReferenceValue3);
	void STATIC_KSConvertRenderTargetToTexture2D(class UObject** WorldContextObject, class UTextureRenderTarget2D** RenderTarget, class UTexture2D** Texture);
	bool STATIC_ItemHasToggleRelationship(struct FShopItem* Item, TArray<EShopItemType>* ValidShopTypes);
	bool STATIC_IsViewportWorld(class UObject** WorldContextObject);
	bool STATIC_IsRecurringDamageTypeClass(class UClass** DamageTypeClass);
	bool STATIC_IsRecurringDamageType(class UDamageType** DamageType);
	bool STATIC_IsRecurringDamageCategory(EDamageCategory* DamageCategory);
	bool STATIC_IsKillCamWorld(class UObject** WorldContextObject);
	bool STATIC_IsItemAvailable();
	bool STATIC_IsInViewportWorld(class AActor** Actor);
	bool STATIC_IsInKillCamWorld(class AActor** Actor);
	bool STATIC_IsChunkInstalling(int* ChunkId);
	bool STATIC_IsChunkAvailable(int* ChunkId);
	bool STATIC_IsAssetAvailable(struct FAssetData* AssetData);
	bool STATIC_IsAnyChunkInstalling();
	void STATIC_HideOutline(class UPrimitiveComponent** TargetComponent);
	TArray<class AKSCharacter*> STATIC_GetTeammatesFor(class UObject** WorldContextObject, class AActor** Actor, bool* bIncludeSelf);
	class AKSTeamState* STATIC_GetTeamFor(class UObject** WorldContextObject, class AActor** Actor);
	int STATIC_GetSkeletalMeshSettingsLODNum(class USkeletalMeshLODSettings** SkeletalMeshLODSettings);
	int STATIC_GetSkeletalMeshLODNum(class USkeletalMesh** SkeletalMesh);
	int STATIC_GetSideForTeam(class UObject** WorldContextObject, int* teamNum);
	void STATIC_GetScreenSpaceAccuracyRadius(class APlayerController** PlayerController, float* Accuracy, float* ViewPortRadius);
	struct FKSOutlineParameters STATIC_GetOutlineParameters(EPlayerSilhouetteType* ColorType, bool* bHideWhenOccluded, bool* bShouldFill, bool* bIsHot, bool* bIsFriendly);
	unsigned char STATIC_GetOutlineCustomDepth(EPlayerSilhouetteType* ColorType, bool* bHideWhenOccluded, bool* bShouldFill, bool* bIsHot, bool* bIsFriendly);
	int STATIC_GetNumEventAssistantsForCombatEvent(struct FCombatEventInfo* CombatEvent);
	int STATIC_GetNumberOfEmittersInSystem(class UParticleSystemComponent** SystemComponent);
	void STATIC_GetMinimapTextureForMap(struct FString* mapName);
	class AKSMiniMapAssistant* STATIC_GetMiniMapAssistant(class UObject** WorldContextObject);
	struct FVector STATIC_GetMeshOffsetForSimulatedCharacter(class AKSCharacter** SimulatedCharacter);
	class APlayerController* STATIC_GetLocalPlayerController(class UObject** WorldContextObject, int* PlayerIndex);
	class AKSGameState_RoundGame* STATIC_GetKSGameState_RoundGame(class UObject** WorldContextObject);
	class AKSGameState_NeutralBomb* STATIC_GetKSGameState_NeutralBomb(class UObject** WorldContextObject);
	class AKSGameState_Extraction* STATIC_GetKSGameState_Extraction(class UObject** WorldContextObject);
	class AKSGameState* STATIC_GetKSGameState(class UObject** WorldContextObject);
	class AKSGameMode_RoundGame* STATIC_GetKSGameMode_RoundGame(class UObject** WorldContextObject);
	class AKSGameMode_Extraction* STATIC_GetKSGameMode_Extraction(class UObject** WorldContextObject);
	class AKSGameMode* STATIC_GetKSGameMode(class UObject** WorldContextObject);
	class UKSKillCam* STATIC_GetKillCamForPlayer(class UObject** WorldContextObject, int* LocalPlayerIndex);
	int STATIC_GetKillCamActorGuidFor(class UObject** WorldContextObject, class AActor** Actor);
	class APlayerState* STATIC_GetEventAssistantAtIndexForCombatEvent(int* Index, struct FCombatEventInfo* CombatEvent);
	TArray<class AKSTeamState*> STATIC_GetEnemyTeamsFor(class UObject** WorldContextObject, class AActor** Actor);
	TArray<class AKSCharacter*> STATIC_GetEnemiesFor(class UObject** WorldContextObject, class AActor** Actor);
	struct FVector STATIC_GetEndTraceLocation(struct FAimData* Aim, float* Range);
	void STATIC_GetCurrentFrameTimestamp(struct FDateTime* Timestamp);
	float STATIC_GetAnimMontageSectionLength(class UAnimMontage** TargetMontage, struct FName* SectionName);
	void STATIC_GetAllWeaponComponents(TScriptInterface<class UKSEquipmentContainerOwner>* Target, TArray<class UKSWeaponComponent*>* OutWeaponComponents);
	TArray<struct FItemTableElement> STATIC_GetAllItemTableElements(class UDataTable** InDataTable, TArray<struct FName>* OutRowNames);
	void STATIC_GetAllEquipment(TScriptInterface<class UKSEquipmentContainerOwner>* Target, TArray<class UObject*>* OutEquipment);
	void STATIC_FadeIn(class UObject** WorldContextObject, float* FadeInDuration);
	bool STATIC_ExportCSVData(struct FString* Filename, TArray<struct FKSCSVRow>* CSVRows, bool* AppendTime, bool* AllowOverwriting, struct FString* SaveDirectory);
	class USphereComponent* STATIC_CreateSphereComponentFor(class UObject** WorldContextObject, class AActor** Owner, float* Radius, struct FTransform* Transform);
	void STATIC_ApplyOutlineParameters(struct FKSOutlineParameters* OutlineParameters, class UPrimitiveComponent** TargetComponent, bool* bEnabled);
	void STATIC_AddStaticMeshToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, class UStaticMesh** Asset);
	void STATIC_AddSkeletalMeshToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, class USkeletalMesh** Asset);
	void STATIC_AddRowToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, struct FHardAssetTableRow* Row);
	void STATIC_AddParticleSystemToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, class UParticleSystem** Asset);
	void STATIC_AddMaterialInterfaceToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, class UMaterialInterface** Asset);
	void STATIC_AddClassToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, class UClass** Asset);
	void STATIC_AddAudioEventToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, class UAkAudioEvent** Asset);
	void STATIC_AddAnimationAssetToLegacyAssetDataTable(class UDataTable** DataTable, struct FName* RowName, class UAnimationAsset** Asset);
};


// Class Killstreak.KSBotDefinition
// 0x0198 (0x01C8 - 0x0030)
class UKSBotDefinition : public UDataAsset
{
public:
	struct FString                                     FriendlySearchName;                                       // 0x0030(0x0010) (Edit, ZeroConstructor)
	struct FBotSpawnTableRow                           Info;                                                     // 0x0040(0x0188) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBotDefinition");
		return ptr;
	}

};


// Class Killstreak.KSBotDefinitionCollection
// 0x0010 (0x0040 - 0x0030)
class UKSBotDefinitionCollection : public UDataAsset
{
public:
	TArray<class UKSBotDefinition*>                    BotDefinitions;                                           // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBotDefinitionCollection");
		return ptr;
	}

};


// Class Killstreak.KSBotFactory
// 0x00F0 (0x0420 - 0x0330)
class AKSBotFactory : public AActor
{
public:
	bool                                               bUseTeamInsteadOfSide;                                    // 0x0330(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	int                                                SideNum;                                                  // 0x0334(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                teamNum;                                                  // 0x0338(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	ECharacterBehaviorState                            InitialBehaviorState;                                     // 0x033C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x033D(0x0003) MISSED OFFSET
	class UKSBotDefinitionCollection*                  SpawnCollection;                                          // 0x0340(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRandomBot;                                               // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bWithoutReplacement;                                      // 0x0349(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreserveAIControllers;                                   // 0x034A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideTeamSizeFromQueue;                                // 0x034B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FillTeamTo;                                               // 0x034C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class AKSWayPointSet*                              _WayPointSet;                                             // 0x0350(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldReverseWayPointSetDirection;                        // 0x0358(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0359(0x0007) MISSED OFFSET
	TArray<class APlayerStart*>                        SpawnPoints;                                              // 0x0360(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                SpawnOnBeginPlay;                                         // 0x0370(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SpawnOnRoundStart;                                        // 0x0374(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class AKSDropShipLocation*                         AssociatedDropShipLocation;                               // 0x0378(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SpawnOnRoundSetup;                                        // 0x0380(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SpawnOnCollectionTimeout;                                 // 0x0384(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SpawnOnHackTimeout;                                       // 0x0388(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SpawnOnEscapeTimeout;                                     // 0x038C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SpawnOnDownloadStart;                                     // 0x0390(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SpawnOnAlarm;                                             // 0x0394(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinSpawnCount;                                            // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxSpawnCount;                                            // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bMaintainCountOnBotDeath;                                 // 0x03A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET
	TArray<class AKSAIController*>                     ActiveBots;                                               // 0x03A8(0x0010) (ZeroConstructor)
	class AKSTeamState*                                _TeamState;                                               // 0x03B8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               RelevantObjectiveStates;                                  // 0x03C0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               RelevantGameStatesForObjectiveSpawning;                   // 0x03D0(0x0010) (Edit, ZeroConstructor)
	int                                                NumberOfTimesToSpawnForObjectiveRelevancy;                // 0x03E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	class UBoxComponent*                               RelevancyVolume;                                          // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class AKSCharacter*>                        ContainedPlayers;                                         // 0x03F0(0x0010) (ZeroConstructor)
	TArray<class AKSObjectiveBase*>                    ContainedObjectives;                                      // 0x0400(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0410(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBotFactory");
		return ptr;
	}


	TArray<class AKSAIController*> Spawn(int* Count);
	void ShuffleSpawnPoints();
	void SetWayPointSet(class AKSWayPointSet** InWPS);
	void SetSpawnPoints(TArray<class APlayerStart*>* InPlayerStarts);
	void SetSideNum(int* InSideNum);
	void SetShouldReverseWayPointSetDirection(bool* InShouldReverse);
	void SetBotSpawnCollection(class UKSBotDefinitionCollection** InSpawnCollection);
	void OnSpawnedBotDestroyed(class AActor** DestroyedActor);
	void OnRoundStart(struct FRoundInitState* RoundInitState);
	void OnRoundSetup(struct FRoundInitState* RoundInitState);
	void OnRelevancyOverlapEnd(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnRelevancyOverlapBegin(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void OnPhaseChanged(struct FName* PreviousPhaseName, struct FName* NewPhaseName);
	void OnExtractionPhaseTimeout(struct FName* PhaseName);
	void OnAllPlayersFinishedPrePrep();
	void OnAlarmPeriodStart();
	int GetTeamSize();
};


// Class Killstreak.KSBotJobConfigMap
// 0x0050 (0x0080 - 0x0030)
class UKSBotJobConfigMap : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) UNKNOWN PROPERTY: MapProperty Killstreak.KSBotJobConfigMap.JobConfigs

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBotJobConfigMap");
		return ptr;
	}

};


// Class Killstreak.KSBoxDeadZoneFilter
// 0x0010 (0x0040 - 0x0030)
class UKSBoxDeadZoneFilter : public UKSAnalogStickFilter
{
public:
	struct FVector2D                                   InnerDeadZone;                                            // 0x0030(0x0008) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   OuterDeadZone;                                            // 0x0038(0x0008) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBoxDeadZoneFilter");
		return ptr;
	}

};


// Class Killstreak.KSBTAction
// 0x0010 (0x0040 - 0x0030)
class UKSBTAction : public UDataAsset
{
public:
	struct FString                                     ActionName;                                               // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTAction");
		return ptr;
	}

};


// Class Killstreak.KSBTD_AbilityState
// 0x0008 (0x0098 - 0x0090)
class UKSBTD_AbilityState : public UBTDecorator_BlackboardBase
{
public:
	bool                                               bCheckAbilityReady;                                       // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    AbilityReady;                                             // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckActive;                                             // 0x0092(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    AbilityActive;                                            // 0x0093(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_AbilityState");
		return ptr;
	}

};


// Class Killstreak.KSBTD_AnyActorPerceived
// 0x0110 (0x0178 - 0x0068)
class UKSBTD_AnyActorPerceived : public UBTDecorator
{
public:
	TArray<class UClass*>                              SensesToUse;                                              // 0x0068(0x0010) (Edit, ZeroConstructor)
	struct FKSPerceptionFilter                         _PerceptionFilter;                                        // 0x0078(0x0100) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_AnyActorPerceived");
		return ptr;
	}

};


// Class Killstreak.KSBTD_BlackboardPerceived
// 0x0018 (0x00A8 - 0x0090)
class UKSBTD_BlackboardPerceived : public UBTDecorator_BlackboardBase
{
public:
	TArray<class UClass*>                              SensesToUse;                                              // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       PerceptionEvent;                                          // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_BlackboardPerceived");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CanActivateAbility
// 0x0028 (0x0090 - 0x0068)
class UKSBTD_CanActivateAbility : public UBTDecorator
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0068(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSBTD_CanActivateAbility.Ability

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CanActivateAbility");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CharacterState
// 0x0040 (0x00D0 - 0x0090)
class UKSBTD_CharacterState : public UBTDecorator_BlackboardBase
{
public:
	struct FKSCharacterStateFilter                     _CharacterStateFilter;                                    // 0x0090(0x0040) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CharacterState");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CompareBetweenBlackboards
// 0x00A0 (0x0108 - 0x0068)
class UKSBTD_CompareBetweenBlackboards : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                      SourceBlackboardActor;                                    // 0x0068(0x0028) (Edit)
	struct FBlackboardKeySelector                      SourceKey;                                                // 0x0090(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetBlackboardActor;                                    // 0x00B8(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetKey;                                                // 0x00E0(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CompareBetweenBlackboards");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CompareBlackboardToValue
// 0x0008 (0x0098 - 0x0090)
class UKSBTD_CompareBlackboardToValue : public UBTDecorator_BlackboardBase
{
public:
	float                                              TargetValue;                                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CompareBlackboardToValue");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CompareGrenadeFuseTimeLeft
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_CompareGrenadeFuseTimeLeft : public UBTDecorator
{
public:
	float                                              Time;                                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               ArithmeticOperation;                                      // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CompareGrenadeFuseTimeLeft");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CompareKeyToObjective
// 0x0008 (0x0098 - 0x0090)
class UKSBTD_CompareKeyToObjective : public UBTDecorator_BlackboardBase
{
public:
	class UKSBTObjective*                              _Objective;                                               // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CompareKeyToObjective");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CompareMatchPhaseTimeLeft
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_CompareMatchPhaseTimeLeft : public UBTDecorator
{
public:
	float                                              Time;                                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               ArithmeticOperation;                                      // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CompareMatchPhaseTimeLeft");
		return ptr;
	}

};


// Class Killstreak.KSBTD_CompareRoundNumber
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_CompareRoundNumber : public UBTDecorator
{
public:
	int                                                RoundNumber;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               ArithmeticOperation;                                      // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_CompareRoundNumber");
		return ptr;
	}

};


// Class Killstreak.KSBTD_DestroyableHazardState
// 0x0008 (0x0098 - 0x0090)
class UKSBTD_DestroyableHazardState : public UBTDecorator_BlackboardBase
{
public:
	struct FKSDestroyableHazardStateFilter             _DestroyableHazardStateFilter;                            // 0x0090(0x0007) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0097(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_DestroyableHazardState");
		return ptr;
	}

};


// Class Killstreak.KSBTD_DestructibleState
// 0x0008 (0x0098 - 0x0090)
class UKSBTD_DestructibleState : public UBTDecorator_BlackboardBase
{
public:
	struct FKSDestructibleStateFilter                  _DestructibleStateFilter;                                 // 0x0090(0x0002) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0092(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_DestructibleState");
		return ptr;
	}

};


// Class Killstreak.KSBTD_DistanceFromBlackboard
// 0x0008 (0x0098 - 0x0090)
class UKSBTD_DistanceFromBlackboard : public UBTDecorator_BlackboardBase
{
public:
	TEnumAsByte<EArithmeticKeyOperation>               ArithmeticOperation;                                      // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              DistanceThreshold;                                        // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_DistanceFromBlackboard");
		return ptr;
	}

};


// Class Killstreak.KSBTD_EquipmentState
// 0x0090 (0x00F8 - 0x0068)
class UKSBTD_EquipmentState : public UBTDecorator
{
public:
	struct FGameplayTag                                EquipPoint;                                               // 0x0068(0x0008) (Edit)
	bool                                               bCheckIsEquipped;                                         // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    IsEquipped;                                               // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckIsActiveWeapon;                                     // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    IsActiveWeapon;                                           // 0x0073(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckIsReloading;                                        // 0x0074(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    IsReloading;                                              // 0x0075(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckEquipmentType;                                      // 0x0076(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    EquipmentType;                                            // 0x0077(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGameplayTagContainer                       ComparedEquipmentTypes;                                   // 0x0078(0x0020) (Edit)
	bool                                               bCheckEquipmentClass;                                     // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    EquipmentClassComparison;                                 // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x009A(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x009A(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSBTD_EquipmentState.ComparedEquipmentClass
	bool                                               bCheckComponentClass;                                     // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    ComponentClassComparison;                                 // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x00CA(0x0006) MISSED OFFSET
	unsigned char                                      UnknownData03[0x28];                                      // 0x00CA(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSBTD_EquipmentState.ComparedComponentClass

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_EquipmentState");
		return ptr;
	}

};


// Class Killstreak.KSBTD_GameState
// 0x0010 (0x0078 - 0x0068)
class UKSBTD_GameState : public UBTDecorator
{
public:
	bool                                               bCheckMatchInProgress;                                    // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    MatchInProgress;                                          // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckMatchPhase;                                         // 0x006A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBasicKeyOperation>                    MatchPhase;                                               // 0x006B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       MatchPhaseName;                                           // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_GameState");
		return ptr;
	}

};


// Class Killstreak.KSBTD_HasAmmo
// 0x0018 (0x0080 - 0x0068)
class UKSBTD_HasAmmo : public UBTDecorator
{
public:
	struct FGameplayTag                                EquipPoint;                                               // 0x0068(0x0008) (Edit)
	TEnumAsByte<EArithmeticKeyOperation>               ClipOperation;                                            // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              ClipPercentage;                                           // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOrCheck;                                                 // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               InventoryOperation;                                       // 0x0079(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x007A(0x0002) MISSED OFFSET
	float                                              InventoryPercentage;                                      // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_HasAmmo");
		return ptr;
	}

};


// Class Killstreak.KSBTD_HasBeenCollected
// 0x0000 (0x0090 - 0x0090)
class UKSBTD_HasBeenCollected : public UBTDecorator_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_HasBeenCollected");
		return ptr;
	}

};


// Class Killstreak.KSBTD_HasBeenHitRecently
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_HasBeenHitRecently : public UBTDecorator
{
public:
	float                                              MaxTimeSinceHit;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_HasBeenHitRecently");
		return ptr;
	}

};


// Class Killstreak.KSBTD_InteractableState
// 0x0018 (0x00A8 - 0x0090)
class UKSBTD_InteractableState : public UBTDecorator_BlackboardBase
{
public:
	struct FKSInteractableStateFilter                  _InteractableStateFilter;                                 // 0x0090(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_InteractableState");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsActionAllowed
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_IsActionAllowed : public UBTDecorator
{
public:
	class UKSBTAction*                                 _Action;                                                  // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsActionAllowed");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsActorPendingKill
// 0x0000 (0x0090 - 0x0090)
class UKSBTD_IsActorPendingKill : public UBTDecorator_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsActorPendingKill");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsApproachingDropLocation
// 0x0050 (0x00B8 - 0x0068)
class UKSBTD_IsApproachingDropLocation : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                      DropLocationKey;                                          // 0x0068(0x0028) (Edit)
	struct FBlackboardKeySelector                      DropLocationVectorKey;                                    // 0x0090(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsApproachingDropLocation");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsApproachingFall
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_IsApproachingFall : public UBTDecorator
{
public:
	float                                              LookAheadDistance;                                        // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallDistance;                                             // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsApproachingFall");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsBlackboardSet
// 0x0000 (0x0090 - 0x0090)
class UKSBTD_IsBlackboardSet : public UBTDecorator_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsBlackboardSet");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsBlackboardVisible
// 0x0000 (0x0090 - 0x0090)
class UKSBTD_IsBlackboardVisible : public UBTDecorator_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsBlackboardVisible");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsFreeFalling
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_IsFreeFalling : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsFreeFalling");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsOnNavMesh
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_IsOnNavMesh : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsOnNavMesh");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsRidingZipline
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_IsRidingZipline : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsRidingZipline");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsSprinting
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_IsSprinting : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsSprinting");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsSwimming
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_IsSwimming : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsSwimming");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsWeaponFiring
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_IsWeaponFiring : public UBTDecorator
{
public:
	struct FGameplayTag                                EquipPoint;                                               // 0x0068(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsWeaponFiring");
		return ptr;
	}

};


// Class Killstreak.KSBTD_IsWeaponReady
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_IsWeaponReady : public UBTDecorator
{
public:
	struct FGameplayTag                                EquipPoint;                                               // 0x0068(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_IsWeaponReady");
		return ptr;
	}

};


// Class Killstreak.KSBTD_NearbyEnemyCount
// 0x0020 (0x0088 - 0x0068)
class UKSBTD_NearbyEnemyCount : public UBTDecorator
{
public:
	TArray<class UClass*>                              SensesToUse;                                              // 0x0068(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<EArithmeticKeyOperation>               ArithmeticOperation;                                      // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	int                                                EnemyCount;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceThreshold;                                        // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckLOS;                                                // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0085(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_NearbyEnemyCount");
		return ptr;
	}

};


// Class Killstreak.KSBTD_RandomCooldown
// 0x0008 (0x0070 - 0x0068)
class UKSBTD_RandomCooldown : public UBTDecorator
{
public:
	float                                              MinCoolDownTime;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxCoolDownTime;                                          // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_RandomCooldown");
		return ptr;
	}

};


// Class Killstreak.KSBTD_ShouldCrouchAtPoint
// 0x0028 (0x0090 - 0x0068)
class UKSBTD_ShouldCrouchAtPoint : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                      PointKey;                                                 // 0x0068(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_ShouldCrouchAtPoint");
		return ptr;
	}

};


// Class Killstreak.KSBTD_ShouldDodgeRoll
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_ShouldDodgeRoll : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_ShouldDodgeRoll");
		return ptr;
	}

};


// Class Killstreak.KSBTD_ShouldStrafe
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_ShouldStrafe : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_ShouldStrafe");
		return ptr;
	}

};


// Class Killstreak.KSBTD_ShouldThrowGrenade
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_ShouldThrowGrenade : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_ShouldThrowGrenade");
		return ptr;
	}

};


// Class Killstreak.KSBTD_ShouldThrowMelee
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_ShouldThrowMelee : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_ShouldThrowMelee");
		return ptr;
	}

};


// Class Killstreak.KSBTD_TimerComplete
// 0x0000 (0x0090 - 0x0090)
class UKSBTD_TimerComplete : public UBTDecorator_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_TimerComplete");
		return ptr;
	}

};


// Class Killstreak.KSBTD_WantsToVaultFromSwimming
// 0x0000 (0x0068 - 0x0068)
class UKSBTD_WantsToVaultFromSwimming : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_WantsToVaultFromSwimming");
		return ptr;
	}

};


// Class Killstreak.KSBTD_WillActiveGrenadeHitTarget
// 0x0008 (0x0098 - 0x0090)
class UKSBTD_WillActiveGrenadeHitTarget : public UBTDecorator_BlackboardBase
{
public:
	float                                              OverrideMinRadius;                                        // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTD_WillActiveGrenadeHitTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTDifficulty
// 0x0010 (0x0040 - 0x0030)
class UKSBTDifficulty : public UDataAsset
{
public:
	struct FString                                     DifficultyName;                                           // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTDifficulty");
		return ptr;
	}

};


// Class Killstreak.KSBTObjective
// 0x0040 (0x0070 - 0x0030)
class UKSBTObjective : public UDataAsset
{
public:
	struct FString                                     ObjectiveName;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)
	struct FString                                     ObjectiveTargetKeyName;                                   // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<class UKSBTAction*>                         RequiredActions;                                          // 0x0050(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSBTObjective.RequiredAbilities

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTObjective");
		return ptr;
	}

};


// Class Killstreak.KSBTObjective_DestroyHazard
// 0x0000 (0x0070 - 0x0070)
class UKSBTObjective_DestroyHazard : public UKSBTObjective
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTObjective_DestroyHazard");
		return ptr;
	}

};


// Class Killstreak.KSBTObjective_Patrol
// 0x0000 (0x0070 - 0x0070)
class UKSBTObjective_Patrol : public UKSBTObjective
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTObjective_Patrol");
		return ptr;
	}

};


// Class Killstreak.KSBTObjective_PickUpItem
// 0x0000 (0x0070 - 0x0070)
class UKSBTObjective_PickUpItem : public UKSBTObjective
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTObjective_PickUpItem");
		return ptr;
	}

};


// Class Killstreak.KSBTTargetSelector
// 0x0118 (0x0148 - 0x0030)
class UKSBTTargetSelector : public UDataAsset
{
public:
	TArray<class UClass*>                              SensesToUse;                                              // 0x0030(0x0010) (Edit, ZeroConstructor)
	struct FKSPerceptionFilter                         _PerceptionFilter;                                        // 0x0040(0x0100) (Edit)
	bool                                               SelectCombatTargetOfResult;                               // 0x0140(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SelectClosestTarget;                                      // 0x0141(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SelectFurthestTarget;                                     // 0x0142(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SelectRandomTarget;                                       // 0x0143(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0144(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTargetSelector");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_ActivateAbility
// 0x0028 (0x0098 - 0x0070)
class UKSBTTask_ActivateAbility : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0070(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSBTTask_ActivateAbility.ActivatedAbility

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_ActivateAbility");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_LookAt
// 0x0020 (0x00C0 - 0x00A0)
class UKSBTTask_LookAt : public UBTTask_RotateToFaceBBEntry
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A0(0x0004) MISSED OFFSET
	float                                              LookRotationRate;                                         // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    HorizonAngle;                                             // 0x00A8(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                CorridorSmoothingCount;                                   // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FirstCorridorIndex;                                       // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_LookAt");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_AimAt
// 0x0018 (0x00D8 - 0x00C0)
class UKSBTTask_AimAt : public UKSBTTask_LookAt
{
public:
	float                                              AimRadius;                                                // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     AimOffset;                                                // 0x00C4(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AimAheadSeconds;                                          // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_AimAt");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_BuyItemFromShop
// 0x0000 (0x0070 - 0x0070)
class UKSBTTask_BuyItemFromShop : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_BuyItemFromShop");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_ClearFocus
// 0x0000 (0x0070 - 0x0070)
class UKSBTTask_ClearFocus : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_ClearFocus");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_ClearNavigationInteractTarget
// 0x0000 (0x0070 - 0x0070)
class UKSBTTask_ClearNavigationInteractTarget : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_ClearNavigationInteractTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_ClearReviverForTarget
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_ClearReviverForTarget : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_ClearReviverForTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_ClearValue
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_ClearValue : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_ClearValue");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_CopyActorLocation
// 0x0050 (0x00C0 - 0x0070)
class UKSBTTask_CopyActorLocation : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      ActorKey;                                                 // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      LocationKey;                                              // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_CopyActorLocation");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_CopyObjectFacingVector
// 0x0050 (0x00C0 - 0x0070)
class UKSBTTask_CopyObjectFacingVector : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      CopyTarget;                                               // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      FacingVector;                                             // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_CopyObjectFacingVector");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_CopyReviverToBlackboard
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_CopyReviverToBlackboard : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_CopyReviverToBlackboard");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_GetNavigationInteractTarget
// 0x0028 (0x0098 - 0x0070)
class UKSBTTask_GetNavigationInteractTarget : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      InteractTarget;                                           // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_GetNavigationInteractTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_GetRotationFromPoint
// 0x0050 (0x00C0 - 0x0070)
class UKSBTTask_GetRotationFromPoint : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      MapPointActorKey;                                         // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      MapPointRotationKey;                                      // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_GetRotationFromPoint");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_HandleChangedCombatTarget
// 0x0000 (0x0070 - 0x0070)
class UKSBTTask_HandleChangedCombatTarget : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_HandleChangedCombatTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_InteractWith
// 0x0008 (0x00A0 - 0x0098)
class UKSBTTask_InteractWith : public UBTTask_BlackboardBase
{
public:
	bool                                               ShouldHold;                                               // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_InteractWith");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_InterruptInteraction
// 0x0000 (0x0070 - 0x0070)
class UKSBTTask_InterruptInteraction : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_InterruptInteraction");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_LeaveDefensePoint
// 0x0028 (0x0098 - 0x0070)
class UKSBTTask_LeaveDefensePoint : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      DefensePoint;                                             // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_LeaveDefensePoint");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_LookInDirection
// 0x0030 (0x00A0 - 0x0070)
class UKSBTTask_LookInDirection : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      DirectionKey;                                             // 0x0070(0x0028) (Edit)
	float                                              LookRotationRate;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_LookInDirection");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_MakeNoiseEvent
// 0x0010 (0x0080 - 0x0070)
class UKSBTTask_MakeNoiseEvent : public UBTTaskNode
{
public:
	float                                              Loudness;                                                 // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       EventTag;                                                 // 0x0074(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_MakeNoiseEvent");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_MarkAsSeen
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_MarkAsSeen : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_MarkAsSeen");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_MoveToBlackboard
// 0x0040 (0x00F0 - 0x00B0)
class UKSBTTask_MoveToBlackboard : public UBTTask_MoveTo
{
public:
	float                                              SpeedMultiplier;                                          // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSprint;                                                  // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	class UKSBTAction*                                 MoveAction;                                               // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UKSBTAction*                                 SprintAction;                                             // 0x00C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      AcceptableRadiusOverrideKey;                              // 0x00C8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_MoveToBlackboard");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_MoveToward
// 0x0018 (0x00D0 - 0x00B8)
class UKSBTTask_MoveToward : public UBTTask_MoveDirectlyToward
{
public:
	float                                              SpeedMultiplier;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSprint;                                                  // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	class UKSBTAction*                                 MoveAction;                                               // 0x00C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UKSBTAction*                                 SprintAction;                                             // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_MoveToward");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_PerformPawnAction
// 0x0000 (0x0078 - 0x0078)
class UKSBTTask_PerformPawnAction : public UBTTask_PushPawnAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_PerformPawnAction");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_PerformRandomDodgeRoll
// 0x0030 (0x00A0 - 0x0070)
class UKSBTTask_PerformRandomDodgeRoll : public UBTTask_PawnActionBase
{
public:
	TArray<float>                                      PreferredAngles;                                          // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      SecondaryAngles;                                          // 0x0080(0x0010) (Edit, ZeroConstructor)
	float                                              MinDodgeRollMovementPercent;                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DodgeRollCheckDistance;                                   // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaximumHeightChangePerCheckDistance;                      // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_PerformRandomDodgeRoll");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_PlayVO
// 0x0010 (0x0080 - 0x0070)
class UKSBTTask_PlayVO : public UBTTaskNode
{
public:
	struct FGameplayTag                                VOEvent;                                                  // 0x0070(0x0008) (Edit)
	float                                              ChanceToPlay;                                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_PlayVO");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_RandomizeWayPointDefensePoint
// 0x0050 (0x00C0 - 0x0070)
class UKSBTTask_RandomizeWayPointDefensePoint : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      WayPoint;                                                 // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      DefensePoint;                                             // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_RandomizeWayPointDefensePoint");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_RunBehaviorForTarget
// 0x00F0 (0x0168 - 0x0078)
class UKSBTTask_RunBehaviorForTarget : public UBTTask_RunBehavior
{
public:
	TArray<struct FBlackboardKeySelector>              SourceKeyVector;                                          // 0x0078(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBlackboardKeySelector>              TargetKeyVector;                                          // 0x0088(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      SourceFloatVector;                                        // 0x0098(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBlackboardKeySelector>              TargetFloatKeyVector;                                     // 0x00A8(0x0010) (Edit, ZeroConstructor)
	TArray<bool>                                       TempBools;                                                // 0x00B8(0x0010) (ZeroConstructor, Transient)
	TArray<class UClass*>                              TempClasses;                                              // 0x00C8(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              TempEnums;                                                // 0x00D8(0x0010) (ZeroConstructor, Transient)
	TArray<float>                                      TempFloats;                                               // 0x00E8(0x0010) (ZeroConstructor, Transient)
	TArray<int>                                        TempInts;                                                 // 0x00F8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               TempNames;                                                // 0x0108(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              TempNativeEnums;                                          // 0x0118(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             TempObjects;                                              // 0x0128(0x0010) (ZeroConstructor, Transient)
	TArray<struct FRotator>                            TempRotators;                                             // 0x0138(0x0010) (ZeroConstructor, Transient)
	TArray<struct FString>                             TempStrings;                                              // 0x0148(0x0010) (ZeroConstructor, Transient)
	TArray<struct FVector>                             TempVectors;                                              // 0x0158(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_RunBehaviorForTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectBlackboardTarget
// 0x0138 (0x01A8 - 0x0070)
class UKSBTTask_SelectBlackboardTarget : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      _BlackboardKey;                                           // 0x0070(0x0028) (Edit)
	TArray<class UClass*>                              SensesToUse;                                              // 0x0098(0x0010) (Edit, ZeroConstructor)
	struct FKSPerceptionFilter                         _PerceptionFilter;                                        // 0x00A8(0x0100) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectBlackboardTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectDefensePoint
// 0x0028 (0x0098 - 0x0070)
class UKSBTTask_SelectDefensePoint : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      DefensePointActorKey;                                     // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectDefensePoint");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectDropLocation
// 0x0078 (0x00E8 - 0x0070)
class UKSBTTask_SelectDropLocation : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      DropLocationKey;                                          // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      DropLocationVectorKey;                                    // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      FlightLocationVectorKey;                                  // 0x00C0(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectDropLocation");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectEvadePoint
// 0x0140 (0x01B0 - 0x0070)
class UKSBTTask_SelectEvadePoint : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      EvadePointKey;                                            // 0x0070(0x0028) (Edit)
	TArray<class UClass*>                              SensesToUse;                                              // 0x0098(0x0010) (Edit, ZeroConstructor)
	struct FKSPerceptionFilter                         _PerceptionFilter;                                        // 0x00A8(0x0100) (Edit)
	float                                              Distance;                                                 // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectEvadePoint");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectObjective
// 0x0078 (0x00E8 - 0x0070)
class UKSBTTask_SelectObjective : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      ObjectiveTargetKey;                                       // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      ObjectiveTypeKey;                                         // 0x0098(0x0028) (Edit)
	TArray<class UKSBTObjective*>                      BlackboardKeyObjectives;                                  // 0x00C0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	class UKSBTObjective*                              CurrentHighestPriorityObjective;                          // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      CurrentHighestPriorityActor;                              // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectObjective");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectTargetOfTarget
// 0x0050 (0x00C0 - 0x0070)
class UKSBTTask_SelectTargetOfTarget : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      CopyTarget;                                               // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      KeyToCopy;                                                // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectTargetOfTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectVaultTargetLocation
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_SelectVaultTargetLocation : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectVaultTargetLocation");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SelectWayPoint
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_SelectWayPoint : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SelectWayPoint");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetBehaviorState
// 0x0008 (0x0078 - 0x0070)
class UKSBTTask_SetBehaviorState : public UBTTaskNode
{
public:
	ECharacterBehaviorState                            _BehaviorState;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetBehaviorState");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetBetweenBlackboards
// 0x00A0 (0x0110 - 0x0070)
class UKSBTTask_SetBetweenBlackboards : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      SourceBlackboardActor;                                    // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      SourceKey;                                                // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetBlackboardActor;                                    // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetKey;                                                // 0x00E8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetBetweenBlackboards");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetBoolOnBlackboard
// 0x0008 (0x00A0 - 0x0098)
class UKSBTTask_SetBoolOnBlackboard : public UBTTask_BlackboardBase
{
public:
	bool                                               BoolValue;                                                // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetBoolOnBlackboard");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetFloatOnBlackboard
// 0x0008 (0x00A0 - 0x0098)
class UKSBTTask_SetFloatOnBlackboard : public UBTTask_BlackboardBase
{
public:
	float                                              FloatValue;                                               // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetFloatOnBlackboard");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetObjectiveOnBlackboard
// 0x0008 (0x00A0 - 0x0098)
class UKSBTTask_SetObjectiveOnBlackboard : public UBTTask_BlackboardBase
{
public:
	class UKSBTObjective*                              _Objective;                                               // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetObjectiveOnBlackboard");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetReviveTarget
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_SetReviveTarget : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetReviveTarget");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetTimer
// 0x0008 (0x00A0 - 0x0098)
class UKSBTTask_SetTimer : public UBTTask_BlackboardBase
{
public:
	float                                              Duration;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomDeviation;                                          // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetTimer");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SetWaypointDefenseTimer
// 0x0050 (0x00C0 - 0x0070)
class UKSBTTask_SetWaypointDefenseTimer : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      WayPoint;                                                 // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      DefenseTimer;                                             // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SetWaypointDefenseTimer");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_SkydiveToward
// 0x0030 (0x0100 - 0x00D0)
class UKSBTTask_SkydiveToward : public UKSBTTask_MoveToward
{
public:
	struct FBlackboardKeySelector                      TargetSkydiveLocation;                                    // 0x00D0(0x0028) (Edit)
	float                                              BlendStartDistance;                                       // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlendEndDistance;                                         // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_SkydiveToward");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_StopMovement
// 0x0000 (0x0070 - 0x0070)
class UKSBTTask_StopMovement : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_StopMovement");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_Strafe
// 0x0018 (0x0108 - 0x00F0)
class UKSBTTask_Strafe : public UKSBTTask_MoveToBlackboard
{
public:
	float                                              DirectionAngleMax;                                        // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DirectionAngleMin;                                        // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bInvertAngle;                                             // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	float                                              MinDistance;                                              // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0104(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_Strafe");
		return ptr;
	}

};


// Class Killstreak.KSBTTask_TryToVault
// 0x0000 (0x0098 - 0x0098)
class UKSBTTask_TryToVault : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTask_TryToVault");
		return ptr;
	}

};


// Class Killstreak.KSBTTaskNode_SetCrowdFollowing
// 0x0008 (0x0078 - 0x0070)
class UKSBTTaskNode_SetCrowdFollowing : public UBTTaskNode
{
public:
	bool                                               bEnable;                                                  // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBTTaskNode_SetCrowdFollowing");
		return ptr;
	}

};


// Class Killstreak.KSBuild
// 0x00D0 (0x0430 - 0x0360)
class AKSBuild : public AKSLagCompensatedActor
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0360(0x0030) MISSED OFFSET
	float                                              PointDamageMultiplier;                                    // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RadialDamageMultiplier;                                   // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealth;                                                // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Health;                                                   // 0x039C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              SelfDestructDelay;                                        // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03A4(0x000C) MISSED OFFSET
	class UBoxComponent*                               _Box;                                                     // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UKSNavModifierComponent*                     _KSNavModifierComponent;                                  // 0x03B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBuildReclaim;                                           // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bCanReclaim;                                              // 0x03D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	struct FVector                                     RelativeInteractionPoint;                                 // 0x03D4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReclaimTime;                                              // 0x03E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRestoreWeaponOnReclaim;                                  // 0x03E4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03E5(0x0003) MISSED OFFSET
	class UKSWeaponAsset_Build*                        WeaponToRestore;                                          // 0x03E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       ReclaimItemName;                                          // 0x03F0(0x0018) (Edit, DisableEditOnInstance)
	class UClass*                                      ReclaimInteractionType;                                   // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBeingReclaimed;                                          // 0x0410(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0411(0x0007) MISSED OFFSET
	class UKSItemStimuliSourceComponent*               _StimuliSourceComponent;                                  // 0x0418(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	int                                                OriginalOwnerId;                                          // 0x0428(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x042C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBuild");
		return ptr;
	}


	void YieldToRealTimerExpired();
	void SelfDestructAfterDelay();
	void SelfDestruct();
	void OnSelfDestructDelayStart();
	void OnSelfDestruct();
	void OnRep_Health();
	void OnRadialDamageTaken(class UDamageType** DamageType);
	void OnPointDamageTaken(class UDamageType** DamageType, class UPrimitiveComponent** PrimitiveComponent, struct FName* HitBone);
	void OnHealthChanged();
	void OnBuildComponentDestroyed(class UPrimitiveComponent** PrimitiveComponent);
	float GetRealActorTakeoverDelay();
	class AKSPlayerState* GetPlayerStateOwner();
	void GetOutlineableMeshes(TArray<class UPrimitiveComponent*>* OutMeshes);
	class AKSCharacter* GetCharacterOwner();
	void DestroyBuildComponent(class UPrimitiveComponent** PrimitiveComponent);
	float ComponentTakeDamage(class UPrimitiveComponent** PrimitiveComponent, float* DamageAmount);
	void BroadcastSelfDestructStart();
	void BroadcastSelfDestruct();
	void BroadcastDestroyBuildComponent(class UPrimitiveComponent** PrimitiveComponent);
};


// Class Killstreak.KSBuild_APS
// 0x0038 (0x0468 - 0x0430)
class AKSBuild_APS : public AKSBuild
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0430(0x0008) MISSED OFFSET
	class USphereComponent*                            DetectionSphere;                                          // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DetectionSphereRadius;                                    // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxProjectilesDestroyed;                                  // 0x0444(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToActivate;                                           // 0x0448(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x044C(0x0018) MISSED OFFSET
	bool                                               bIsActive;                                                // 0x0464(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0465(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBuild_APS");
		return ptr;
	}


	void OnRep_Active();
	void OnProjectileIntercepted(struct FVector* InterceptedProjectileLocation);
	void OnDeactivated();
	void OnActorOverlapBegin(class AActor** OverlappedActor, class AActor** OtherActor);
	void OnActivated();
	void BroadcastProjectileIntercept(class AKSProjectile** DestroyedProjectile, struct FVector* BackupLocation);
};


// Class Killstreak.KSBuildPreview
// 0x0018 (0x0348 - 0x0330)
class AKSBuildPreview : public AActor
{
public:
	class UMaterialInterface*                          ValidBuildMaterial;                                       // 0x0330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          InvalidBuildMaterial;                                     // 0x0338(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBoxComponent*                               _Box;                                                     // 0x0340(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSBuildPreview");
		return ptr;
	}

};


// Class Killstreak.KSCarriedInterface
// 0x0000 (0x0028 - 0x0028)
class UKSCarriedInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCarriedInterface");
		return ptr;
	}


	void StopActiveCarry();
	bool IsBeingCarriedRightNow();
	class AKSCharacter* GetHauler();
	class AActor* GetAsActor();
	bool CanBeCarriedByRightNow(class AKSCharacter** InHauler);
	bool CanBeCarriedBy(class AKSCharacter** InHauler);
};


// Class Killstreak.KSCash
// 0x0020 (0x0178 - 0x0158)
class UKSCash : public UKSItem
{
public:
	int                                                Amount;                                                   // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	struct FText                                       CashReasonText;                                           // 0x0160(0x0018) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCash");
		return ptr;
	}

};


// Class Killstreak.KSCashDrop
// 0x0008 (0x0460 - 0x0458)
class AKSCashDrop : public AKSItemDrop
{
public:
	int                                                Amount;                                                   // 0x0458(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoPickup;                                              // 0x045C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x045D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCashDrop");
		return ptr;
	}


	void EndOverlap(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void BeginOverlap(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
};


// Class Killstreak.KSCashExtractionPoint
// 0x0138 (0x0578 - 0x0440)
class AKSCashExtractionPoint : public AKSObjectiveBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0440(0x0008) MISSED OFFSET
	int                                                ContainedCash;                                            // 0x0448(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	struct FPGame_ReplicatedTimer                      ReplicatedStateTimer;                                     // 0x0450(0x0038) (Edit, Net, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0488(0x0010) MISSED OFFSET
	float                                              UpdateReplicatedTimerPeriod;                              // 0x0498(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreparingStateDuration;                                   // 0x049C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DepositingStateDuration;                                  // 0x04A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtractedStateDuration;                                   // 0x04A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CooldownStateDuration;                                    // 0x04A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04AC(0x0004) MISSED OFFSET
	struct FText                                       CallInInteractionPrompt;                                  // 0x04B0(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       CallInInteractionProgressText;                            // 0x04C8(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       DepositInteractionPrompt;                                 // 0x04E0(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       DepositInteractionProgressText;                           // 0x04F8(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       CancelInteractionPrompt;                                  // 0x0510(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       CancelInteractionProgressText;                            // 0x0528(0x0018) (Edit, DisableEditOnInstance)
	class USphereComponent*                            InteractionRangeSphereComponent;                          // 0x0540(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              CallInInteractDuration;                                   // 0x0548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DepositInteractDuration;                                  // 0x054C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CancelInteractDuration;                                   // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0554(0x0004) MISSED OFFSET
	TArray<class AKSCharacter*>                        Interactors;                                              // 0x0558(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0568(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCashExtractionPoint");
		return ptr;
	}


	void StateTimerExpired();
	bool ShouldShowLabel();
	void OnRep_ContainedCash();
	void HideCashPoint();
	void GetRemainingTimeInState(float* RemainingTime, float* TotalDuration);
	void ActivateCashPoint();
};


// Class Killstreak.KSCharacterBase
// 0x0600 (0x0D50 - 0x0750)
class AKSCharacterBase : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0750(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTakeArmorDamage;                                        // 0x0768(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0778(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHealthChangedDel;                                       // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x07A0(0x0018) MISSED OFFSET
	float                                              HealthRegenerationPerSecond;                              // 0x07B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthRegenerationPeriod;                                 // 0x07BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthRegenerationDelay;                                  // 0x07C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x07C4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHealthRegenDelayTimerActive;                            // 0x07C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHealthRegenDelayTimerTick;                              // 0x07D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHealthRegenDelayTimerComplete;                          // 0x07E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSTimerComponent*                           HealthRegenDelayTimer;                                    // 0x07F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0800(0x0008) MISSED OFFSET
	float                                              CurrentOverheal;                                          // 0x0808(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              OverhealDecayPerSecond;                                   // 0x080C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OverhealDecayPeriod;                                      // 0x0810(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x24];                                      // 0x0814(0x0024) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnOverhealChanged;                                        // 0x0838(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              QueuedMovementForgivenessPeriod;                          // 0x0848(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              QueuedMovementForgivenessEndTime;                         // 0x084C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	EKSQueuedMovement                                  CurrentQueuedMovement;                                    // 0x0850(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0851(0x0003) MISSED OFFSET
	struct FName                                       FreeFallCollisionProfileName;                             // 0x0854(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x14];                                      // 0x085C(0x0014) MISSED OFFSET
	class UCameraShake*                                CurrentFreeFallCameraShake;                               // 0x0870(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      FreeFallCameraShake;                                      // 0x0878(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEndFreeFallDel;                                         // 0x0880(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSprintChanged;                                          // 0x0890(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bReplicatedSprinting;                                     // 0x08A0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x08A1(0x0003) MISSED OFFSET
	struct FVector_NetQuantizeNormal                   ReplicatedAccelDirection;                                 // 0x08A4(0x000C) (Net)
	struct FScriptMulticastDelegate                    OnPowerSlideChanged;                                      // 0x08B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSPowerSlideInfo                           bReplicatedPowerSlide;                                    // 0x08C0(0x0002) (Net)
	unsigned char                                      UnknownData09[0x2];                                       // 0x08C2(0x0002) MISSED OFFSET
	float                                              DodgeRollDuration;                                        // 0x08C4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReplicatedDodgeRoll;                                     // 0x08C8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x08C9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDOdgeRollChanged;                                       // 0x08D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x30];                                      // 0x08E0(0x0030) MISSED OFFSET
	struct FKSLungeInfo                                _LungeInfo;                                               // 0x0910(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnLungeChanged;                                           // 0x0920(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bReplicatedAbilityMovement;                               // 0x0930(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReplicatedZipLineBracing;                                // 0x0931(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReplicatedZipLineEnding;                                 // 0x0932(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReplicatedUpline;                                        // 0x0933(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SecondsAwayToBraceOnZipLine;                              // 0x0934(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SecondsAwayToEndOnZipLine;                                // 0x0938(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x093C(0x0004) MISSED OFFSET
	struct FKSZipLineInfo                              ReplicatedZipLineInfo;                                    // 0x0940(0x0010) (Net, Transient)
	bool                                               bPrevPressedJump;                                         // 0x0950(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0951(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnJumpedDel;                                              // 0x0958(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLandedDel;                                              // 0x0968(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartFallingDel;                                        // 0x0978(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData14[0x16];                                      // 0x0988(0x0016) MISSED OFFSET
	bool                                               bReplicatedStun;                                          // 0x099E(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x21];                                      // 0x099F(0x0021) MISSED OFFSET
	bool                                               bReplicatedHardLand;                                      // 0x09C0(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x37];                                      // 0x09C1(0x0037) MISSED OFFSET
	class UCameraShake*                                CurrentSprintCameraShake;                                 // 0x09F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      SprintCameraShake;                                        // 0x0A00(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCameraShake*                                CurrentLandedCameraShake;                                 // 0x0A08(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      LandedCameraShake;                                        // 0x0A10(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnAimStateChanged;                                        // 0x0A18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class USceneComponent*                             GrenadeThrowComponent;                                    // 0x0A28(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USceneComponent*                             MeleeThrowComponent;                                      // 0x0A30(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	EKSCharacterAimMode                                ReplicatedAimState;                                       // 0x0A38(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	EKSCharacterAimMode                                LastReplicatedAimState;                                   // 0x0A39(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableSmoothedAimRotation;                               // 0x0A3A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x1];                                       // 0x0A3B(0x0001) MISSED OFFSET
	struct FReplicatedViewInfo                         _ViewInfo;                                                // 0x0A3C(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCameraLagSubstepping;                                 // 0x0A44(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0A45(0x0003) MISSED OFFSET
	float                                              CameraLagMaxTimeStep;                                     // 0x0A48(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraRotationLagSpeed;                                   // 0x0A4C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    PreviousDesiredRot;                                       // 0x0A50(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    SmoothedViewRotation;                                     // 0x0A5C(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnKilled;                                                 // 0x0A68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSDeathInfo                                _DeathInfo;                                               // 0x0A78(0x0028) (Edit, Net, DisableEditOnTemplate, EditConst)
	class UClass*                                      InstantDeathDamageType;                                   // 0x0AA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRadialMiss;                                              // 0x0AA8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData19[0x7];                                       // 0x0AA9(0x0007) MISSED OFFSET
	class AKSCharacterBase*                            LastCharacterToDamageMe;                                  // 0x0AB0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x18];                                      // 0x0AB8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDeathStateChangedDel;                                   // 0x0AD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData21[0x38];                                      // 0x0AE0(0x0038) MISSED OFFSET
	class USphereComponent*                            HeadCollisionComponent;                                   // 0x0B18(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      ZiplineMeshComponent;                                     // 0x0B20(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class APlayerState*                                BackupPlayerState;                                        // 0x0B28(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x10];                                      // 0x0B30(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerStateChangedDel;                                  // 0x0B40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData23[0x18];                                      // 0x0B50(0x0018) MISSED OFFSET
	TArray<struct FName>                               HeadBones;                                                // 0x0B68(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               LimbBones;                                                // 0x0B78(0x0010) (Edit, ZeroConstructor)
	TMap<struct FName, EHitLocationType>               CachedBoneToHitLocationType;                              // 0x0B88(0x0050) (ZeroConstructor, Transient)
	TArray<struct FName>                               HeadshotPassthroughBones;                                 // 0x0BD8(0x0010) (Edit, ZeroConstructor)
	bool                                               bReevaluateSilhouetteNextTick;                            // 0x0BE8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bForceSilhouette;                                         // 0x0BE9(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData)
	EPlayerSilhouetteType                              ForcedSilhouetteType;                                     // 0x0BEA(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bForcedFillSilhouette;                                    // 0x0BEB(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bForcedMarkSilhouette;                                    // 0x0BEC(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData)
	EPlayerSilhouetteType                              _SilhouetteType;                                          // 0x0BED(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bFillSilhouette;                                          // 0x0BEE(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bMarkSilhouette;                                          // 0x0BEF(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x20];                                      // 0x0BF0(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRevealChanged;                                          // 0x0C10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSMantleInfo                               ReplicatedMantleInfo;                                     // 0x0C20(0x0044) (Net, Transient)
	unsigned char                                      UnknownData25[0x4];                                       // 0x0C64(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMantleChanged;                                          // 0x0C68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData26[0x18];                                      // 0x0C78(0x0018) MISSED OFFSET
	bool                                               CachedAimAssistVisibility;                                // 0x0C90(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData27[0x3];                                       // 0x0C91(0x0003) MISSED OFFSET
	float                                              NextValidAimAssistVisibiltyTime;                          // 0x0C94(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCanEverBeConsideredForAimAssist;                         // 0x0C98(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x0C99(0x0003) MISSED OFFSET
	struct FName                                       InteractionState;                                         // 0x0C9C(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	float                                              InteractionHeight;                                        // 0x0CA4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              InteractionTime;                                          // 0x0CA8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0x34];                                      // 0x0CAC(0x0034) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSwimmingChangedDel;                                     // 0x0CE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSubmergedChangedDel;                                    // 0x0CF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBreathUpdate;                                           // 0x0D00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsSubmerged;                                             // 0x0D10(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x3];                                       // 0x0D11(0x0003) MISSED OFFSET
	float                                              MaximumLungCapacity;                                      // 0x0D14(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CurrentLungCapacity;                                      // 0x0D18(0x0004) (Edit, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LungCapacityRecoveryTime;                                 // 0x0D1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDestroyOnRoundSetup;                                     // 0x0D20(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      RoundCreated;                                             // 0x0D21(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x1E];                                      // 0x0D22(0x001E) MISSED OFFSET
	bool                                               bIgnoreCollisionWithTeammates;                            // 0x0D40(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData32[0xF];                                       // 0x0D41(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCharacterBase");
		return ptr;
	}


	void UpdateDebugHealthVisibility();
	void UnSubmerge(bool* bClientSimulation);
	void Submerge(bool* bClientSimulation);
	void StopSprint(bool* bInterrupted);
	void StopRegenerationTimers();
	void StartSprint();
	class UCameraShake* StartCameraShake(class UClass** ShakeClass);
	void ShowDebugLocation(bool* bVisible);
	void SetRevealed(bool* Reveal);
	void SetHealth(float* NewHealth);
	void RevealToWholeTeam(float* Duration, class AController** Revealer, float* Delay, EPlayerSilhouetteType* Type, bool* Fill, bool* Mark);
	void RevealForDuration(float* RevealTime);
	struct FRevealInfo Reveal(float* Duration, class AController** Revealer, EPlayerSilhouetteType* Type, bool* Fill, bool* Mark);
	void ResetHealthRegeneration();
	void ResetHealthRegenDelay();
	void ResetFreeFallState();
	void RemoveCameraShake(class UCameraShake** CameraShake);
	void OverhealDecayTick();
	float Overheal(float* OverhealValue, class AController** HealInstigator, class AActor** HealCauser);
	void OnTeamUpdated();
	void OnStopDefaultAim();
	void OnStopAimOverShoulder();
	void OnStopAimDownSights();
	void OnStopAimAlternate();
	void OnStartDefaultAim();
	void OnStartAimOverShoulder();
	void OnStartAimDownSights();
	void OnStartAimAlternate();
	void OnRep_Sprint();
	void OnRep_Silhouette();
	void OnRep_ReplicatedStun();
	void OnRep_ReplicatedAimState();
	void OnRep_ReplicatedAbilityMovement();
	void OnRep_PowerSlide();
	void OnRep_MantleInfo();
	void OnRep_LungeInfo();
	void OnRep_IsSubmerged();
	void OnRep_DeathState();
	void OnRep_CurrentOverheal();
	void OnRep_CurrentLungCapacity();
	void OnRep_BackupPlayerState();
	void OnLeaveTeam(class AKSTeamState** OldTeam);
	void OnJoinTeam(class AKSTeamState** NewTeam);
	void OnEndPowerSlide(EKSPowerSlideEndReason* EndReason);
	void OnBeginPowerSlide();
	void LockoutMovement(float* Time);
	bool IsUnderwater();
	bool IsThermalDetectable();
	bool IsStunned();
	bool IsSprinting();
	bool IsRevealPermanent();
	bool IsRevealedToLocalPlayer();
	bool IsRevealed();
	bool IsLunging();
	bool IsLocallyViewed();
	bool IsLaunched();
	bool IsInPowerSlide();
	bool IsInHardLandLockout();
	bool IsInAimTransition();
	bool IsDeadOrDestroyed();
	bool IsBot();
	bool IsAimingOverShoulder();
	bool IsAimingDownSights();
	bool IsAimingAlternate();
	bool IsAiming();
	bool IsAbilityMoving();
	void HealthRegenerationTick();
	void HealthRegenDelayTimerTick(float* Seconds);
	void HealthRegenDelayTimerComplete();
	void HealthRegenDelayTimerActive(bool* bActive);
	float Heal(float* HealAmount, class AController** HealInstigator, class AActor** HealCauser);
	float GetZiplineAdjustHeight();
	class AActor* GetStartSpot();
	void GetSilhouetteComponents(TArray<class UPrimitiveComponent*>* SilhouetteComponents);
	EKSCharacterAimMode GetReplicatedAimState();
	float GetPowerSlideProgress();
	float GetPowerSlideAngle();
	struct FVector GetMeleeThrowLocation();
	class USceneComponent* GetMeleeThrowComponent();
	float GetMaximumLungCapacity();
	float GetMaxHealth();
	float GetLungRecoveryTime();
	EKSCharacterAimMode GetLastReplicatedAimState();
	class AKSPlayerState* GetKSPlayerState();
	class UKSCharacterMovementComponent* GetKSMovementComponent();
	class UKSCharacterAnimInst* GetKSCharacterAnimInst();
	class AKSPlayerState* GetKSBestPlayerState();
	class UKSAnimInstance* GetKSAnimInstance();
	struct FName GetInteractionState();
	bool GetImmediateDeathRagdoll();
	float GetHealthRegenDelayTime();
	float GetHealthPct();
	float GetHealth();
	struct FVector GetGrenadeThrowLocation();
	class USceneComponent* GetGrenadeThrowComponent();
	EKSDeathState GetDeathState();
	float GetCurrentOverheal();
	float GetCurrentLungCapacity();
	struct FVector GetCurrentDesiredMovementDirection();
	EKSCharacterAimMode GetCurrentAimState();
	struct FVector GetCurrentAccelDirection();
	class APlayerState* GetBestPlayerState();
	class APlayerState* GetBackupPlayerState();
	void ForceSilhouette(bool* bInForceSilhouette, EPlayerSilhouetteType* InSilhouetteType, bool* InFillSilhouette, bool* InMarkSilhouette);
	void EndAbilityMovement();
	void DoStun(float* StunDuration, bool* FreezeInPlace);
	void DoHardLandAvoid();
	void DoHardLand(float* LockoutDuration);
	bool CanViewDebugHealth();
	void BroadcastInstantInteraction(struct FName* InInteractionState, float* InInteractionHeight);
	void BroadcastHardLandAvoid();
	void BlueprintOnStopSwimming();
	void BlueprintOnStopSubmerged();
	void BlueprintOnStartSwimming();
	void BlueprintOnStartSubmerged();
	void BeginDodgeRoll();
	void BeginAbilityMovement();
	bool AllowSprintingRightNow();
	bool AllowPowerSlideRightNow();
};


// Class Killstreak.KSCharacter
// 0x2360 (0x30B0 - 0x0D50)
class AKSCharacter : public AKSCharacterBase
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0D50(0x00A0) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPossessedBy;                                            // 0x0DF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnpossessed;                                            // 0x0E00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class AKSPlayerController*                         CachedKSPlayerController;                                 // 0x0E10(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bProcessingReverseFriendlyFireDamageEvent;                // 0x0E18(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1F];                                      // 0x0E19(0x001F) MISSED OFFSET
	class UKSOutOfBoundsManager*                       _OutOfBoundsManager;                                      // 0x0E38(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              MinimumFlinchHeight;                                      // 0x0E40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumFlinchDamage;                                      // 0x0E44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaximumFlinchHeight;                                      // 0x0E48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaximumFlinchDamage;                                      // 0x0E4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchDuration;                                           // 0x0E50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchRecoveryRate;                                       // 0x0E54(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFlinchSnipersOnly;                                       // 0x0E58(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0E59(0x0007) MISSED OFFSET
	TMap<class AKSPlayerState*, float>                 DamageRecord;                                             // 0x0E60(0x0050) (ZeroConstructor, Transient)
	float                                              DamageRecordResetTime;                                    // 0x0EB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0EB4(0x0004) MISSED OFFSET
	struct FTimerHandle                                DamageRecordResetTimer;                                   // 0x0EB8(0x0008) (Transient)
	struct FKSShotgunHitChangeList                     ReplicatedShotgunHits;                                    // 0x0EC0(0x0088) (Net)
	struct FScriptMulticastDelegate                    OnNewShotgunHit;                                          // 0x0F48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayHitFromPointDamageDel;                              // 0x0F58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayHitFromRadialDamageDel;                             // 0x0F68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x50];                                      // 0x0F78(0x0050) MISSED OFFSET
	float                                              KillCamHitRecordTime;                                     // 0x0FC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x34];                                      // 0x0FCC(0x0034) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLocalViewChanged;                                       // 0x1000(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<TWeakObjectPtr<class APlayerController>>    LocalViewers;                                             // 0x1010(0x0010) (ZeroConstructor)
	struct FPostProcessSettings                        BlendableSettings;                                        // 0x1020(0x0530) (Transient)
	struct FScriptMulticastDelegate                    OnCanRemoveBackPackChanged;                               // 0x1550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterFreeFallStartedDel;                            // 0x1560(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterFreeFallCompletedDel;                          // 0x1570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x8];                                       // 0x1580(0x0008) MISSED OFFSET
	struct FText                                       RemoveBackpackInteractionPromptText;                      // 0x1588(0x0018) (Edit, DisableEditOnInstance)
	float                                              SkyDiveMaxPitch;                                          // 0x15A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SkyDiveMinPitch;                                          // 0x15A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SkyDiveExitDistance;                                      // 0x15A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SkyDiveExitThreshold;                                     // 0x15AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SkyDiveForceExitDistance;                                 // 0x15B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLeftHandMantleIK;                                        // 0x15B4(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bRightHandMantleIK;                                       // 0x15B5(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x15B6(0x0002) MISSED OFFSET
	struct FVector                                     LeftHandMantleIKLocation;                                 // 0x15B8(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RightHandMantleIKLocation;                                // 0x15C4(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	float                                              LeftHandMantleIKAlpha;                                    // 0x15D0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              RightHandMantleIKAlpha;                                   // 0x15D4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bFadeOutLeftHandMantleIK;                                 // 0x15D8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFadeOutRightHandMantleIK;                                // 0x15D9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x15DA(0x0006) MISSED OFFSET
	TArray<struct FSmoothedComponentInfo>              SmoothedComponents;                                       // 0x15E0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UKSSmoothingComponent*>               RegisteredSmoothingComponents;                            // 0x15F0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData09[0x8];                                       // 0x1600(0x0008) MISSED OFFSET
	float                                              SprintPressLeeway;                                        // 0x1608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLeewayExpire;                                       // 0x160C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFacingVaultWall;                                         // 0x1610(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x1611(0x0003) MISSED OFFSET
	float                                              LeftHandMantleIKOffset;                                   // 0x1614(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RightHandMantleIKOffset;                                  // 0x1618(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HandMantleIKFadeTime;                                     // 0x161C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MantleIKHandsToWallForwardOffset;                         // 0x1620(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchCameraShiftInterpSpeed;                             // 0x1624(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchCameraBoomLengthScale;                              // 0x1628(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintCameraChangeDuration;                               // 0x162C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x50];                                      // 0x1630(0x0050) MISSED OFFSET
	class UKSModInst_Activated*                        AbilityMovementMod;                                       // 0x1680(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              ZiplineMeshHeightAdjust;                                  // 0x1688(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimCameraBoomFloatHeight;                                // 0x168C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DrownDamagePeriod;                                        // 0x1690(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DrownPerTickDamage;                                       // 0x1694(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DrownDamageType;                                          // 0x1698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x8];                                       // 0x16A0(0x0008) MISSED OFFSET
	class UPGame_PositionHistoryComponent*             _PositionHistoryComponent;                                // 0x16A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData13[0x8];                                       // 0x16B0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnOutOfBoundsBeginDel;                                    // 0x16B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOutOfBoundsWarningEndDel;                               // 0x16C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOutOfBoundsEndDel;                                      // 0x16D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSOutOfBoundsInfo                          _OutOfBoundsInfo;                                         // 0x16E8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalOutOfBounds;                                        // 0x16F0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x7];                                       // 0x16F1(0x0007) MISSED OFFSET
	struct FPGame_ReplicatedTimer                      ReplicatedEMPLockoutTimer;                                // 0x16F8(0x0038) (Edit, Net, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData15[0x18];                                      // 0x1730(0x0018) MISSED OFFSET
	bool                                               bIsEMPLocked;                                             // 0x1748(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x7];                                       // 0x1749(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEMPLocked;                                              // 0x1750(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEMPLockoutTick;                                         // 0x1760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData17[0x18];                                      // 0x1770(0x0018) MISSED OFFSET
	bool                                               bIsOnFire;                                                // 0x1788(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x1789(0x0003) MISSED OFFSET
	float                                              CachedPrimaryWeaponFieldOfView;                           // 0x178C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSSmoothingComponent*                       CameraRootComponent;                                      // 0x1790(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSSpringArmComponent*                       MainCameraBoom;                                           // 0x1798(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            MainCameraComponent;                                      // 0x17A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSSpringArmComponent*                       SprintCameraBoom;                                         // 0x17A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            SprintCameraComponent;                                    // 0x17B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSSpringArmComponent*                       TransitionCameraBoom;                                     // 0x17B8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            TransitionCameraComponent;                                // 0x17C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSSpringArmComponent*                       ShoulderCameraBoom;                                       // 0x17C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            ShoulderCameraComponent;                                  // 0x17D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            FirstPersonCameraComponent;                               // 0x17D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSSpringArmComponent*                       TabletCameraBoom;                                         // 0x17E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            TabletCameraComponent;                                    // 0x17E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSSpringArmComponent*                       ActionCameraBoom1;                                        // 0x17F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            ActionCameraComponent;                                    // 0x17F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSSpringArmComponent*                       SwimCameraBoom;                                           // 0x1800(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            SwimCameraComponent;                                      // 0x1808(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            ActiveCameraComponent;                                    // 0x1810(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData19[0x8];                                       // 0x1818(0x0008) MISSED OFFSET
	class UCameraComponent*                            PendingCameraComponent;                                   // 0x1820(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData20[0x8];                                       // 0x1828(0x0008) MISSED OFFSET
	ECameraShoulder                                    _CameraShoulder;                                          // 0x1830(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x1831(0x0003) MISSED OFFSET
	float                                              ShoulderSwapProgress;                                     // 0x1834(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShoulderSwapTime;                                         // 0x1838(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ShoulderSwapCooldownTime;                                 // 0x183C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ShoulderSwapBlendExponent;                                // 0x1840(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NextShoulderSwapTime;                                     // 0x1844(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData22[0x4];                                       // 0x1848(0x0004) MISSED OFFSET
	float                                              AimDownSightsScopeInterpSpeed;                            // 0x184C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CrouchAOSCamVertOffset;                                   // 0x1850(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchAOSCamVertOffsetBlendTime;                          // 0x1854(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x38];                                      // 0x1858(0x0038) MISSED OFFSET
	bool                                               bFocalPointMaintenanceEnabled;                            // 0x1890(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMantainFocualPointOnCameraTransition;                    // 0x1891(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData24[0x2];                                       // 0x1892(0x0002) MISSED OFFSET
	float                                              CameraFocualThreshold;                                    // 0x1894(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaximumFocalPointMaintenanceAngle;                        // 0x1898(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaximumFocalPointMaintenanceAngleLeaveADS;                // 0x189C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinimumFocalPointMaintenanceDistance;                     // 0x18A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	struct FRotator                                    CameraTransitionRotationDelta;                            // 0x18A4(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    CameraTransitionRotationDeltaRemaining;                   // 0x18B0(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseAdvancedFocalPointTracking;                           // 0x18BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseFocalPointDoubleCheck;                                // 0x18BD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0x2];                                       // 0x18BE(0x0002) MISSED OFFSET
	float                                              FocalPointDoubleCheckAllowedBlockDistance;                // 0x18C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData26[0x4];                                       // 0x18C4(0x0004) MISSED OFFSET
	struct FVector                                     RelativeFocalPoint;                                       // 0x18C8(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    AppliedFocalPointCorrection;                              // 0x18D4(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       MeshADSPitchPivotBoneName;                                // 0x18E0(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AimSnapThrottleTime;                                      // 0x18E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData27[0x14];                                      // 0x18EC(0x0014) MISSED OFFSET
	class UKSAimAssistAnchorComponent*                 CachedSnapAnchor;                                         // 0x1900(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              NextValidAimSnapTime;                                     // 0x1908(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData28[0x4];                                       // 0x190C(0x0004) MISSED OFFSET
	float                                              LockoutCameraCooldownSpeed;                               // 0x1910(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData29[0x1C];                                      // 0x1914(0x001C) MISSED OFFSET
	struct FRotator                                    NonFocalPointRotation;                                    // 0x1930(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    AppliedFocalPointYawRotation;                             // 0x193C(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 CameraPivotCurve;                                         // 0x1948(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DeathCameraPivotTime;                                     // 0x1950(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPivotCameraToActorNotLocation;                           // 0x1954(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bTrackTargetAfterPivotingToIt;                            // 0x1955(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x3A];                                      // 0x1956(0x003A) MISSED OFFSET
	class AActor*                                      CameraPivotTargetActor;                                   // 0x1990(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x10];                                      // 0x1998(0x0010) MISSED OFFSET
	EKSCharacterAimMode                                AimState;                                                 // 0x19A8(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	EKSCharacterAimMode                                DesiredAimState;                                          // 0x19A9(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bAimPressed;                                              // 0x19AA(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bWasAimDownSightsWhenAimPressed;                          // 0x19AB(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bWasAimAlternateWhenAimPressed;                           // 0x19AC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData32[0x3];                                       // 0x19AD(0x0003) MISSED OFFSET
	float                                              AimHoldTime;                                              // 0x19B0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              AimOverShoulderHoldTime;                                  // 0x19B4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TMap<EKSMaterialHideType, class UMaterial*>        MaterialHideTypeMap;                                      // 0x19B8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<int, EKSMaterialHideType>                     MaterialIndexesToHide;                                    // 0x1A08(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<int, class UMaterialInterface*>               HiddenMaterials;                                          // 0x1A58(0x0050) (ZeroConstructor)
	bool                                               bIsAimLocked;                                             // 0x1AA8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData33[0x7];                                       // 0x1AA9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAimLockedChangedDel;                                    // 0x1AB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsCrosshairHidden;                                       // 0x1AC0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData34[0x7];                                       // 0x1AC1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCrosshairHiddenChangedDel;                              // 0x1AC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData35[0x48];                                      // 0x1AD8(0x0048) MISSED OFFSET
	struct FGameplayTagContainer                       AvailableEquipPoints_New;                                 // 0x1B20(0x0020) (Edit, DisableEditOnTemplate, Transient, EditConst, DuplicateTransient)
	TArray<struct FKSInitialInventoryItem>             _InitialInventory;                                        // 0x1B40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FKSInitialAmmo>                      _InitialAmmo;                                             // 0x1B50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UKSEquipmentManagerComponent*                _EquipmentManagerComponent;                               // 0x1B60(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bDropAmmoOnDeath;                                         // 0x1B68(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData36[0x7];                                       // 0x1B69(0x0007) MISSED OFFSET
	struct FGameplayTagContainer                       WeaponSlotsToDropOnDeath;                                 // 0x1B70(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FGameplayTagContainer>               ActiveWeaponSlotTiers;                                    // 0x1B90(0x0010) (ZeroConstructor, Deprecated)
	TArray<struct FGameplayTagContainer>               GrenadeSlotTiers;                                         // 0x1BA0(0x0010) (ZeroConstructor, Deprecated)
	TArray<struct FKSLootLockerItem>                   LootLockerInventory;                                      // 0x1BB0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                                StartingActiveWeaponEquipPoint;                           // 0x1BC0(0x0008) (Net)
	class UKSSwapHandlerProfile*                       MainSwapHandlerProfile;                                   // 0x1BC8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData)
	class UKSSwapHandlerProfile*                       GadgetSwapHandlerProfile;                                 // 0x1BD0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData)
	class UKSSwapHandlerProfile*                       MedpackSwapHandlerProfile;                                // 0x1BD8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData)
	class UKSSwapHandlerProfile*                       PassiveSwapHandlerProfile;                                // 0x1BE0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData)
	class UKSSwapHandlerProfile*                       QuickMeleeSwapHandlerProfile;                             // 0x1BE8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData)
	class UKSWeaponAsset*                              EmergencyWeaponAsset;                                     // 0x1BF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData37[0x8];                                       // 0x1BF8(0x0008) MISSED OFFSET
	struct FText                                       ObjectiveWeaponDropPrompt;                                // 0x1C00(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       ObjectiveWeaponDropProgressText;                          // 0x1C18(0x0018) (Edit, DisableEditOnInstance)
	float                                              DropObjectiveWeaponInteractTime;                          // 0x1C30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData38[0x1C];                                      // 0x1C34(0x001C) MISSED OFFSET
	bool                                               bSelfDestruct;                                            // 0x1C50(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData39[0x77];                                      // 0x1C51(0x0077) MISSED OFFSET
	float                                              MeleeHoldTime;                                            // 0x1CC8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PrimaryTier;                                              // 0x1CCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SecondaryTier;                                            // 0x1CD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MeleeTier;                                                // 0x1CD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponDropHoldTime;                                       // 0x1CD8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData40[0x4];                                       // 0x1CDC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActiveWeaponChangedDel;                                 // 0x1CE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData41[0x18];                                      // 0x1CF0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActiveGrenadeChangedDel;                                // 0x1D08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData42[0x18];                                      // 0x1D18(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActiveMedPackChangedDel;                                // 0x1D30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData43[0x18];                                      // 0x1D40(0x0018) MISSED OFFSET
	struct FTimerHandle                                MeleeHoldTimer;                                           // 0x1D58(0x0008) (Transient)
	struct FTimerHandle                                DropHoldTimer;                                            // 0x1D60(0x0008) (Transient)
	float                                              WeaponSwapThrottleExpire;                                 // 0x1D68(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              WeaponSwapThrottlePeriod;                                 // 0x1D6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              QuickMeleeHoldTime;                                       // 0x1D70(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData44[0x4];                                       // 0x1D74(0x0004) MISSED OFFSET
	class AKSWeapon_Melee*                             CurrentQuickMeleeWeapon;                                  // 0x1D78(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bQuickMeleeHoldCompleted;                                 // 0x1D80(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData45[0x17];                                      // 0x1D81(0x0017) MISSED OFFSET
	bool                                               bNoFire;                                                  // 0x1D98(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData46[0x1F];                                      // 0x1D99(0x001F) MISSED OFFSET
	bool                                               IsFireWeaponHeld;                                         // 0x1DB8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsPendingFire;                                            // 0x1DB9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsAimDownSightsHeld;                                      // 0x1DBA(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData47[0x5];                                       // 0x1DBB(0x0005) MISSED OFFSET
	struct FString                                     SwingMontageSection;                                      // 0x1DC0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnWeaponInventoryChanged;                                 // 0x1DD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMeleeHoldStart;                                         // 0x1DE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMeleeHoldEnd;                                           // 0x1DF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSWeaponComponent*                          ActiveWeaponComponent[0x6];                               // 0x1E00(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	uint16_t                                           ActiveEquipmentId[0x6];                                   // 0x1E30(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData48[0x4];                                       // 0x1E3C(0x0004) MISSED OFFSET
	struct FKSEquipmentContainer                       _EquipmentContainer;                                      // 0x1E40(0x0198) (Net)
	TMap<uint16_t, struct FKSPendingWeaponStateUpdates> _PendingWeaponStateUpdates;                               // 0x1FD8(0x0050) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEquipmentAddedDel;                                      // 0x2028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData49[0x18];                                      // 0x2038(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquipmentRemovedDel;                                    // 0x2050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData50[0x18];                                      // 0x2060(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquipmentBecomeActiveDel;                               // 0x2078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData51[0x18];                                      // 0x2088(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquipmentEndActiveDel;                                  // 0x20A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData52[0x18];                                      // 0x20B0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSpecialAmmoEvent;                                       // 0x20C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TMap<EAmmoType, class UKSAmmoDropAsset*>           AmmoDropAssets;                                           // 0x20D8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FKSAmmoManager                              _AmmoManager;                                             // 0x2128(0x0118) (Net)
	unsigned char                                      UnknownData53[0x18];                                      // 0x2240(0x0018) MISSED OFFSET
	float                                              WeaponPickupRange;                                        // 0x2258(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData54[0x4];                                       // 0x225C(0x0004) MISSED OFFSET
	class USphereComponent*                            PickUpSphereComponent;                                    // 0x2260(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              LabelPickupRange;                                         // 0x2268(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData55[0x4];                                       // 0x226C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnItemPickedUp;                                           // 0x2270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TMap<class AActor*, float>                         OutOfRangePickups;                                        // 0x2280(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData56[0x4];                                       // 0x22D0(0x0004) MISSED OFFSET
	float                                              ReloadTapThreshold;                                       // 0x22D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContextualPressTime;                                      // 0x22D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWantsToInteract;                                         // 0x22DC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData57[0x3];                                       // 0x22DD(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x22E0(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CachedMaxHealth;                                          // 0x22E4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DownedHealth;                                             // 0x22E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RevivedHealth;                                            // 0x22EC(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	int                                                ArmorHelmetLevel;                                         // 0x22F0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                ArmorVestLevel;                                           // 0x22F4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              ArmorDurabilityPercent;                                   // 0x22F8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              MaxHealthBonus;                                           // 0x22FC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxMaxHealthBonus;                                        // 0x2300(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocalMaxHealthBonus;                                      // 0x2304(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnMaxHealthBonusChanged;                                  // 0x2308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bDowned;                                                  // 0x2318(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData58[0x7];                                       // 0x2319(0x0007) MISSED OFFSET
	class UKSTimerComponent*                           GiveUpTimer;                                              // 0x2320(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              GiveUpHoldTime;                                           // 0x2328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData59[0x4];                                       // 0x232C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGiveUpTimerActive;                                      // 0x2330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGiveUpTimerTick;                                        // 0x2340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              DownedImmuneTime;                                         // 0x2350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DownedImmuneTimeStamp;                                    // 0x2354(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData60[0x8];                                       // 0x2358(0x0008) MISSED OFFSET
	float                                              BleedPeriod;                                              // 0x2360(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BleedDamage;                                              // 0x2364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BleedDamageType;                                          // 0x2368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData61[0x8];                                       // 0x2370(0x0008) MISSED OFFSET
	class AController*                                 DownInstigator;                                           // 0x2378(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      DownDamageType;                                           // 0x2380(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      DownDamageCauser;                                         // 0x2388(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData62[0x30];                                      // 0x2390(0x0030) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterDownedChangedDel;                              // 0x23C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              DefaultAssistDuration;                                    // 0x23D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData63[0x4];                                       // 0x23D4(0x0004) MISSED OFFSET
	TArray<struct FAssistTag>                          DownAssistTagQueue;                                       // 0x23D8(0x0010) (ZeroConstructor, Transient)
	TArray<class APlayerState*>                        DownAssists;                                              // 0x23E8(0x0010) (ZeroConstructor, Transient)
	class AController*                                 KillInstigator;                                           // 0x23F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class APlayerState*>                        EliminationAssists;                                       // 0x2400(0x0010) (ZeroConstructor, Transient)
	TArray<class APlayerState*>                        PlayersWithEliminationCredit;                             // 0x2410(0x0010) (ZeroConstructor, Transient)
	struct FText                                       ReviveInteractionProgressText;                            // 0x2420(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       ReviveInteractionPromptText;                              // 0x2438(0x0018) (Edit, DisableEditOnInstance)
	class UCameraShake*                                InteractionCameraShake;                                   // 0x2450(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeToRevive;                                             // 0x2458(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData64[0x4];                                       // 0x245C(0x0004) MISSED OFFSET
	struct FReviveInfo                                 _ReviveInfo;                                              // 0x2460(0x0028) (Net)
	bool                                               bCanMoveWhileRevivingOther;                               // 0x2488(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData65[0xF];                                       // 0x2489(0x000F) MISSED OFFSET
	class USphereComponent*                            ReviveRangeSphereComponent;                               // 0x2498(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData66[0x58];                                      // 0x24A0(0x0058) MISSED OFFSET
	TWeakObjectPtr<class AActor>                       ActorTargetingMeForRevive;                                // 0x24F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnStartReviveDel;                                         // 0x2500(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData67[0x18];                                      // 0x2510(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStartReviveOtherDel;                                    // 0x2528(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData68[0x18];                                      // 0x2538(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReviveInterruptedDel;                                   // 0x2550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData69[0x18];                                      // 0x2560(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReviveOtherInterruptedDel;                              // 0x2578(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData70[0x18];                                      // 0x2588(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReviveCompletedDel;                                     // 0x25A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData71[0x18];                                      // 0x25B0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReviveOtherCompletedDel;                                // 0x25C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData72[0x18];                                      // 0x25D8(0x0018) MISSED OFFSET
	int                                                NumOngoingRemoteRevives;                                  // 0x25F0(0x0004) (Net, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData73[0x24];                                      // 0x25F4(0x0024) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDamageImmune;                                           // 0x2618(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDamageReduced;                                          // 0x2628(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShoulderSwapChanged;                                    // 0x2638(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSInteractionManager*                       _InteractionManager;                                      // 0x2648(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UKSInteractionManager*                       ReceivedInteractionManager;                               // 0x2650(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       InteractionHoverTarget;                                   // 0x2658(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bHoverTargetPress;                                        // 0x2660(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bHoverTargetHold;                                         // 0x2661(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData74[0x6];                                       // 0x2662(0x0006) MISSED OFFSET
	class AActor*                                      InteractionTarget;                                        // 0x2668(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               IsInInteraction;                                          // 0x2670(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData75[0x7];                                       // 0x2671(0x0007) MISSED OFFSET
	class UClass*                                      MostRecentInteractionType;                                // 0x2678(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	EKSInteractionResult                               MostRecentInteractionResult;                              // 0x2680(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData76[0x3];                                       // 0x2681(0x0003) MISSED OFFSET
	struct FVector                                     MostRecentInteractionStartLocation;                       // 0x2684(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               InteractionFacesRotation;                                 // 0x2690(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData77[0x7];                                       // 0x2691(0x0007) MISSED OFFSET
	struct FKSInteractableCameraTransition             InteractionCameraTransition;                              // 0x2698(0x0028) (Net)
	class UClass*                                      DefaultInteractionType;                                   // 0x26C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InteractionDistance;                                      // 0x26C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxInteractionAngle;                                      // 0x26CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InteractionHoldTime;                                      // 0x26D0(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	float                                              InteractionPriorityBaseModifier;                          // 0x26D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData78[0x18];                                      // 0x26D8(0x0018) MISSED OFFSET
	struct FTimerHandle                                InstantInteractHandle;                                    // 0x26F0(0x0008)
	float                                              InstantInteractCooldownTime;                              // 0x26F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData79[0x4];                                       // 0x26FC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHoveredInteractableChanged;                             // 0x2700(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractStart;                                          // 0x2710(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRemotePlayerInteractStart;                              // 0x2720(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractEnd;                                            // 0x2730(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRemotePlayerInteractEnd;                                // 0x2740(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractSuccess;                                        // 0x2750(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractFailed;                                         // 0x2760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractInterrupted;                                    // 0x2770(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChargingActionStart;                                    // 0x2780(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChargingActionEnd;                                      // 0x2790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     BaseLocalDropLocation;                                    // 0x27A0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData80[0x4];                                       // 0x27AC(0x0004) MISSED OFFSET
	TMap<int, float>                                   TierToDropYawMap;                                         // 0x27B0(0x0050) (ZeroConstructor, Deprecated)
	TMap<struct FGameplayTag, float>                   EquipPointToDropYawMap;                                   // 0x2800(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              AmmoDropYaw;                                              // 0x2850(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DropLateralSpeed;                                         // 0x2854(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DropLateralSpeedVariance;                                 // 0x2858(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CompanionAmmoHeightShift;                                 // 0x285C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DropAngleVariance;                                        // 0x2860(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData81[0x14];                                      // 0x2864(0x0014) MISSED OFFSET
	bool                                               bInRagdoll;                                               // 0x2878(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData82[0x1B];                                      // 0x2879(0x001B) MISSED OFFSET
	float                                              DeathDisplayLifespan;                                     // 0x2894(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData83[0x28];                                      // 0x2898(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSCharacter.MinimapDeathDisplayWidget
	unsigned char                                      UnknownData84[0x28];                                      // 0x28C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSCharacter.FullmapDeathDisplayWidget
	unsigned char                                      UnknownData85[0x28];                                      // 0x28E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSCharacter.OverlayDeathDisplayWidget
	bool                                               bUseScreenSizeCutoff;                                     // 0x2910(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData86[0x3];                                       // 0x2911(0x0003) MISSED OFFSET
	float                                              PlayerHoverRange;                                         // 0x2914(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoverMinScreenHeightPct;                                  // 0x2918(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoverMinScreenHeightPctADS;                               // 0x291C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseConeHover;                                            // 0x2920(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData87[0x3];                                       // 0x2921(0x0003) MISSED OFFSET
	float                                              HoverConeAngle;                                           // 0x2924(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ADSHoverConeScreenRadius;                                 // 0x2928(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlwaysHoverDistance;                                      // 0x292C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUnhoverWhenOccludedByHoveredCharacter;                   // 0x2930(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData88[0xB];                                       // 0x2931(0x000B) MISSED OFFSET
	bool                                               bIsHovered;                                               // 0x293C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData89[0x3];                                       // 0x293D(0x0003) MISSED OFFSET
	float                                              CachedCameraFOV;                                          // 0x2940(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   CachedViewPortSize;                                       // 0x2944(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CachedHalfTanFOV;                                         // 0x294C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData90[0xD8];                                      // 0x2950(0x00D8) MISSED OFFSET
	bool                                               bGodMode;                                                 // 0x2A28(0x0001) (ZeroConstructor, IsPlainOldData)
	EKSRevealType                                      RevealedStatus;                                           // 0x2A29(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bRevealedToLocalPlayer;                                   // 0x2A2A(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData91[0x5];                                       // 0x2A2B(0x0005) MISSED OFFSET
	struct FRevealManager                              _RevealManager;                                           // 0x2A30(0x0110) (Net)
	unsigned char                                      UnknownData92[0x8];                                       // 0x2B40(0x0008) MISSED OFFSET
	class UKSPlayerMod*                                FlashBangEffectMod;                                       // 0x2B48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBlinded;                                                 // 0x2B50(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData93[0xF];                                       // 0x2B51(0x000F) MISSED OFFSET
	bool                                               bScrambled;                                               // 0x2B60(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bMedPackPressed;                                          // 0x2B61(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData94[0x6];                                       // 0x2B62(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStickDel;                                               // 0x2B68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMedPackFailed;                                          // 0x2B78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGrenadeFailed;                                          // 0x2B88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponPickupInventoryFull;                              // 0x2B98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bReplicatedActivatingMod;                                 // 0x2BA8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData95[0x7];                                       // 0x2BA9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModsUpdated;                                            // 0x2BB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActivatableModsUpdated;                                 // 0x2BC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData96[0x28];                                      // 0x2BD0(0x0028) MISSED OFFSET
	struct FHaulingInfo                                HaulerInfo;                                               // 0x2BF8(0x0010) (Net)
	bool                                               AllowEnemyHauling;                                        // 0x2C08(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData97[0x7];                                       // 0x2C09(0x0007) MISSED OFFSET
	struct FText                                       HaulEnemyInteractionPromptText;                           // 0x2C10(0x0018) (Edit, DisableEditOnInstance)
	struct FName                                       FriendlyCarrySocketName;                                  // 0x2C28(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EnemyCarrySocketName;                                     // 0x2C30(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData98[0x10];                                      // 0x2C38(0x0010) MISSED OFFSET
	struct FCarriedInfo                                _CarriedInfo;                                             // 0x2C48(0x0010) (Net)
	struct FScriptMulticastDelegate                    OnGamepadAbilityCycle;                                    // 0x2C58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData99[0x1C];                                      // 0x2C68(0x001C) MISSED OFFSET
	float                                              ChordDelay;                                               // 0x2C84(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RepeatPressDelay;                                         // 0x2C88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRefreshRepeatPressDelayOnRelease;                        // 0x2C8C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData100[0x3];                                      // 0x2C8D(0x0003) MISSED OFFSET
	float                                              DamageForMaxForceFeedback;                                // 0x2C90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageForceFeedbackScale;                                 // 0x2C94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageForceFeedbackDuration;                              // 0x2C98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDamageForceFeedbackUsesSmallMotors;                      // 0x2C9C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData101[0x3];                                      // 0x2C9D(0x0003) MISSED OFFSET
	float                                              ForceFeedbackOnErrorMagnitude;                            // 0x2CA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceFeedbackOnErrorDuration;                             // 0x2CA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LandingSpeedForMaxForceFeedback;                          // 0x2CA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData102[0x4];                                      // 0x2CAC(0x0004) MISSED OFFSET
	class UForceFeedbackComponent*                     LandForceFeedbackComponent;                               // 0x2CB0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UForceFeedbackEffect*                        JumpForceFeedbackEffect;                                  // 0x2CB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UForceFeedbackEffect*                        DownedForceFeedbackEffect;                                // 0x2CC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UForceFeedbackEffect*                        BeingRevivedForceFeedbackEffect;                          // 0x2CC8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSAIDifficultyComponent*                    _DifficultyComponent;                                     // 0x2CD0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UKSAIObjectivePriorityComponent*             _ObjectivePriorityComponent;                              // 0x2CD8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UKSAIItemPriorityComponent*                  _ItemPriorityComponent;                                   // 0x2CE0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<TScriptInterface<class UKSFootstepOverrideInterface>> FootstepOverrides;                                        // 0x2CE8(0x0010) (ZeroConstructor)
	class UClass*                                      MovingNavAreaClass;                                       // 0x2CF8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      StillNavAreaClass;                                        // 0x2D00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSNavModifierComponent*                     _KSNavModifierComponent;                                  // 0x2D08(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              NavModificationUpdateTimerPeriod;                         // 0x2D10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData103[0xC];                                      // 0x2D14(0x000C) MISSED OFFSET
	struct FName                                       DamagedHearingEventTag;                                   // 0x2D20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageForDefaultLoudness;                                 // 0x2D28(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FireHearingEventTag;                                      // 0x2D2C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireRangeForDefaultLoudness;                              // 0x2D34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FootstepHearingEventTag;                                  // 0x2D38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MovementSpeedForDefaultLoudness;                          // 0x2D40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TeamEventRange;                                           // 0x2D44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData104[0xC];                                      // 0x2D48(0x000C) MISSED OFFSET
	struct FName                                       BotName;                                                  // 0x2D54(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BotADSAccuracy;                                           // 0x2D5C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRandomBotName;                                           // 0x2D60(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBot;                                                     // 0x2D61(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	ECharacterBehaviorState                            CurrentBehaviorState;                                     // 0x2D62(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData105[0x5];                                      // 0x2D63(0x0005) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBehaviorStateChanged;                                   // 0x2D68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSAkComponent*                              CharacterAkComponent;                                     // 0x2D78(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      VOComponentClass;                                         // 0x2D80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSVOComponent*                              _VOComponent;                                             // 0x2D88(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UDataTable*>                          PossibleVOTables;                                         // 0x2D90(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData106[0x4];                                      // 0x2DA0(0x0004) MISSED OFFSET
	struct FGameplayTag                                DownOtherVOEvent;                                         // 0x2DA4(0x0008) (Edit, DisableEditOnInstance)
	EKSVehicleState                                    _VehicleState;                                            // 0x2DAC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData107[0x3];                                      // 0x2DAD(0x0003) MISSED OFFSET
	class AKSVehicle*                                  CurrentVehicle;                                           // 0x2DB0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData108[0x10];                                     // 0x2DB8(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVehicleStateChanged;                                    // 0x2DC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestructibleSpeedOverlap;                               // 0x2DD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bDoDrawDebugLines;                                        // 0x2DE8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData109[0x3];                                      // 0x2DE9(0x0003) MISSED OFFSET
	struct FName                                       MuzzleBone;                                               // 0x2DEC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LeftElbowBone;                                            // 0x2DF4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LeftWristBone;                                            // 0x2DFC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightElbowBone;                                           // 0x2E04(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightWristBone;                                           // 0x2E0C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HiddenArmScale;                                           // 0x2E14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShowWeaponWhenArmVisible;                                // 0x2E18(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData110[0x3];                                      // 0x2E19(0x0003) MISSED OFFSET
	float                                              MaxDistancePenetrationCheck;                              // 0x2E1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EKSArmVisibilityType                               LeftArmVisibility;                                        // 0x2E20(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	EKSArmVisibilityType                               RightArmVisibility;                                       // 0x2E21(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData111[0x6];                                      // 0x2E22(0x0006) MISSED OFFSET
	TArray<class UKSApparelAsset*>                     DefaultApparelSetup;                                      // 0x2E28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, class UKSApparelAsset*>         ApparelSlotAssetMap;                                      // 0x2E38(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData112[0x50];                                     // 0x2E88(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSCharacter.SlotlessApparel
	TArray<class UKSApparelAsset*>                     ApparelAssets;                                            // 0x2ED8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst)
	bool                                               bNoApparel;                                               // 0x2EE8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData113[0x7];                                      // 0x2EE9(0x0007) MISSED OFFSET
	TArray<TWeakObjectPtr<class UKSApparelAsset>>      LocalApparelAssets;                                       // 0x2EF0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	bool                                               bApparelAssetMapDirty;                                    // 0x2F00(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData114[0x7];                                      // 0x2F01(0x0007) MISSED OFFSET
	struct FTimerHandle                                ApparelTimeoutHandle;                                     // 0x2F08(0x0008)
	float                                              ApparelTimeoutTime;                                       // 0x2F10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFirstApparelApplicationSuccess;                          // 0x2F14(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData115[0x63];                                     // 0x2F15(0x0063) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNewApparelApplicationFinishedDel;                       // 0x2F78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData116[0x10];                                     // 0x2F88(0x0010) MISSED OFFSET
	EKSCharacterGender                                 _Gender;                                                  // 0x2F98(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	EKSCharacterGender                                 LocalGender;                                              // 0x2F99(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData117[0x6];                                      // 0x2F9A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGenderChangedDel;                                       // 0x2FA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData118[0x18];                                     // 0x2FB0(0x0018) MISSED OFFSET
	class USkinObjectManagerComponent*                 SkinsManager;                                             // 0x2FC8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class UMultiSkinObject*                            DefaultBodyApparelSkinObject;                             // 0x2FD0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FGameplayTagContainer                       SkinTagContainer;                                         // 0x2FD8(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FDataTableInfo>                      DefaultApparelSkinTables;                                 // 0x2FF8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData119[0x18];                                     // 0x3008(0x0018) MISSED OFFSET
	bool                                               bUseCameraProximityFading;                                // 0x3020(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData120[0x3];                                      // 0x3021(0x0003) MISSED OFFSET
	float                                              CameraFadeStartDistance;                                  // 0x3024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraFadeEndDistance;                                    // 0x3028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FadeAlphaParamName;                                       // 0x302C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastCameraProximityAlpha;                                 // 0x3034(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<struct FName, class UKSFXCurveComponent*>     ActiveFXCurveComponents;                                  // 0x3038(0x0050) (ExportObject, ZeroConstructor)
	EKSEmotion                                         _Emotion;                                                 // 0x3088(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	EKSEmotion                                         LocalEmotion;                                             // 0x3089(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	EKSEmotion                                         LastEmotion;                                              // 0x308A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData121[0x1];                                      // 0x308B(0x0001) MISSED OFFSET
	float                                              EmotionFloat;                                             // 0x308C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEmotionChangedDel;                                      // 0x3090(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSAnimationAuditComponent*                  _AnimationAuditComponent;                                 // 0x30A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData122[0x8];                                      // 0x30A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCharacter");
		return ptr;
	}


	void ViewedPawnTakeDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** DamageCauser, struct FVector* DamageOrigin);
	void ViewedPawnNoLongerRevealed();
	void ViewedPawnInstigatedHeadshot(float* DamageAmount, class UClass** DamageTypeClass, class AActor** Target, class AActor** DamageCauser);
	void ViewedPawnInstigatedDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** Target, class AActor** DamageCauser);
	void ViewedPawnHasBeenRevealed(bool* Permanent);
	void VehicleStateChanged(EKSVehicleState* CurrentVehicleState);
	void UpdateNavModification();
	void UpdateMantleHands(EKSPlayerHand* Hand, bool* bEnable);
	void UpdateHoveredInteractable();
	void UpdateAmmo(EAmmoType* AmmoType, int* AmmoDelta);
	void UpdateAimStatus();
	void UnregisterFootstepOverride(TScriptInterface<class UKSFootstepOverrideInterface>* ToRemove);
	void UnlockShoulderSwap(bool* ForceFullUnlock);
	void UnHideADSMaterials();
	void TryToStopRagdoll();
	void TryToStopAiming(bool* IsInterrupt);
	void TryToAimOverShoulder(bool* bSkipUpdate);
	void TryToAimDownSights(bool* bSkipUpdate);
	void TryToAimAlternate(bool* bSkipUpdate);
	void ToggleSprint();
	void ToggleScopeZoomIndexUp();
	void ToggleScopeZoomIndexLoop();
	void ToggleScopeZoomIndexDown();
	void ToggleCrouchRoll();
	void ToggleCrouch();
	void ToggleCarry();
	void ThrowGrenadeReleased();
	void ThrowGrenadePressed();
	void TagForDownAssist(class APlayerState** Assistant, float* Duration);
	void SwapWeapon(class AKSWeapon** NextWeapon, bool* bForce);
	void SwapToSecondary();
	void SwapToPrimary();
	void SwapToPreviousWeaponWithLoadedClip(bool* bForce);
	void SwapToPreviousWeaponWithAmmo(bool* bForce);
	void SwapToPreviousWeapon(bool* bForce);
	void SwapToPreviousGrenade(bool* bForce);
	void SwapToNextWeaponWithLoadedClip(bool* bForce);
	void SwapToNextWeaponWithAmmo(bool* bForce);
	void SwapToNextWeapon(bool* bForce);
	void SwapToNextGrenade(bool* bForce);
	void SwapToMelee();
	void SwapSeatsTimerComplete();
	void SwapSeatsReleased();
	void SwapSeatsPressed();
	void SwapGrenade(class AKSWeapon** NextWeapon, bool* bForce);
	void SwapActiveGrenade();
	void StopRevealedToLocalPlayer();
	void StopReveal(struct FRevealInfo* InRevealInfo);
	void StopKSEffect(struct FName* InFXID);
	void StopFire();
	bool StopAnimEvent(struct FName* AnimEventName, class UKSCharacterAnimInst** CharAnimInstance);
	void StopAimDownSights();
	void StopActiveHaul();
	void StartRevealedToLocalPlayer();
	void StartLockoutCamera();
	class UKSFXCurveComponent* StartKSSpecialEffect(struct FKSSpecialEffect* Effect, float* PlayRate, bool* bRestart);
	void StartHacking();
	bool StartFire();
	void SetupChords();
	void SetSelfDestruct(bool* InSelfDestruct);
	void SetOnFire(float* Duration);
	void SetNoFire();
	void SetInteractionFacesRotation(bool* FacesRotation);
	void SetInteractionCameraTransition(struct FKSInteractableCameraTransition* CameraTransition);
	void SetGodMode(bool* InGodMode);
	void SetActorTargetingMeForRevive(class AActor** Reviver);
	void SetActiveCameraSimple(struct FName* Tag, float* InBlendTime);
	void SetActiveCamera(struct FName* Tag, struct FViewTargetTransitionParams* InBlendParams);
	void ServerTryToCarry(class AActor** CarryTarget);
	void ServerStopGiveUpTimer();
	void ServerStopCarryChecked(class AActor** CarryTarget);
	void ServerStopCarry();
	void ServerStartGiveUpTimer();
	void ServerSetActiveWeaponToNone(int* InIndex);
	void ServerRequestActivateAbilityRelease(int* Ability);
	void ServerRequestActivateAbility(int* Ability);
	void ServerGetInNextEmptySeat();
	void ServerGetInDriverSeat();
	void ServerExitVehicle();
	void ServerDropWeapon(class AKSWeapon** InWeapon);
	void ServerChangeShoulderCamera(ECameraShoulder* InShoulder);
	void RotateToFace(struct FVector* Location);
	void ReviveOverlapStopped(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void ReverseKSEffect(struct FName* InFXID);
	void RevealToWholeTeamWithInfo(float* Duration, class AController** Revealer, EPlayerSilhouetteType* Type, bool* Fill, bool* Mark, TArray<struct FRevealInfo>* OutRevealInfos);
	void ResetKSEffectTime(struct FName* InFXID);
	void ReportFootstepNoise(float* Speed);
	void ReportFireNoise(float* Range);
	void ReportDamageEvent(class AActor** Damager, float* Damage, struct FHitResult* Hit);
	void ReportDamagedNoise(float* Damage);
	void ReplicateSpecialAmmoEvent(EAmmoType* AmmoType, int* AmmoDelta, struct FName* EventName);
	bool RemoveWeaponFromInventory(class AKSWeapon** InWeapon);
	void RemoveParticleEffects(TArray<class UParticleSystemComponent*>* ParticleSystems);
	void RemoveOutOfRangePickup(class AActor** OtherActor);
	bool RemoveMod(class UKSPlayerMod** Mod, bool* RemoveAll);
	void RemoveEffectCurve(struct FName* InFXID);
	void RemoveBlendable(TScriptInterface<class UBlendableInterface>* InBlendableObject);
	void RemoveBackpack();
	void RemoveActionRestriction(int* ID);
	void RemotePlayerInteractStart(float* InteractDuration, class AActor** InteractTarget);
	void RemotePlayerInteractEnd();
	void Reload();
	void ReleaseToggleCrouchRoll();
	void ReleaseGiveUp();
	void ReleaseCrouch();
	void RegisterFootstepOverride(TScriptInterface<class UKSFootstepOverrideInterface>* ToAdd);
	void ReevaluateNoFire(class UPrimitiveComponent** LeftOverlapper);
	void QuickMeleeHoldTimerComplete();
	bool QueryModsForAnimEvent(struct FName* AnimEventName, class UKSCharacterAnimInst** CharAnimInst);
	void PrimaryWeaponFOVChanged(float* NewFOV);
	void PressGiveUp();
	void PlayVO(struct FKSVoicelineEvent* VoicelineEvent);
	void PlayHitFromRadialDamage(struct FDamageEffect* Effect);
	void PlayHitFromPointDamage(struct FDamageEffect* Effect);
	void PlayActionCameraSequence(struct FName* SequenceName);
	void OutOfBoundsWarningEnd();
	void OutOfBoundsOverlapEnd();
	void OutOfBoundsOverlapBegin(float* WarningLength);
	void OnWeaponSwapSuccessful(class AKSWeapon** FromWeapon, class AKSWeapon** ToWeapon);
	void OnWeaponSwapFailed(class AKSWeapon** FromWeapon, class AKSWeapon** ToWeapon);
	void OnUnhovered(float* ExtraTime);
	void OnStopAimDownSightsCheckpoint();
	void OnStartAimDownSightsCheckpoint();
	void OnReviveStart(class AKSCharacter** Reviver, float* ReviveTime, bool* Remote);
	void OnReviveInterrupt(class AKSCharacter** Reviver);
	void OnReviveComplete(class AKSCharacter** Reviver);
	void OnRep_VehicleState();
	void OnRep_StartingActiveWeaponEquipPoint();
	void OnRep_SelfDestruct();
	void OnRep_Scrambled();
	void OnRep_ReviveInfo();
	void OnRep_RevealedStatus();
	void OnRep_OutOfBoundsInfo();
	void OnRep_OnFire();
	void OnRep_IsInInteraction();
	void OnRep_Health();
	void OnRep_HaulingInfo();
	void OnRep_GiveUpTimer();
	void OnRep_Gender();
	void OnRep_EMPLockout();
	void OnRep_Emotion();
	void OnRep_Downed();
	void OnRep_CurrentBehaviorState();
	void OnRep_CarriedInfo();
	void OnRep_CameraShoulder();
	void OnRep_CameraPivotTargetActor();
	void OnRep_Bot();
	void OnRep_ApparelAssets();
	void OnRep_ActiveEquipmentId();
	void OnImmuneStart();
	void OnImmuneEnd();
	void OnHovered();
	void OnGrenadeClassLoaded(class UKSWeaponAsset_Grenade** pGrenadeWeaponAsset);
	void OnFieldOfViewModChange();
	void OnEndOutOfBounds();
	void OnDeathCleanup();
	void OnBeginOutOfBounds();
	void OnApparelTimeoutExpire();
	void NoseDiveCameraTransition(bool* bEnterNoseDive, float* AnimLength);
	void NativeJumpToSwingMontage(struct FString* SwingMontageSectionName);
	void MoveRight(float* Value);
	void MoveForward(float* Value);
	void MeleeReleased();
	void MeleePressed();
	void MeleeHoldTimerComplete();
	void MedPackReleased();
	void MedPackPressed();
	void LogShotgunHitData(struct FShotgunHitData* HitData);
	void LockShoulderSwap();
	void KillIfDowned();
	void JumpToSwingMontage(struct FString* SwingMontageSectionName);
	bool IsZipLining();
	bool IsShoulderSwapLocked();
	bool IsRevivingAnotherPlayer(bool* bCountRemoteRevives, class AKSCharacter** OutReviveTarget);
	bool IsRevealable();
	bool IsPerformingAnInteraction();
	bool IsOutOfRangePickup(class AActor** OtherActor);
	bool IsOutOfBounds(float* RemainingTime);
	bool IsOnFire();
	bool IsLobby();
	bool IsInVehicle();
	bool IsInRagdoll();
	bool IsInLockoutCameraCooldown();
	bool IsInLockoutCamera();
	bool IsHaulingRightNow();
	bool IsDowned();
	bool IsCrosshairHidden();
	bool IsBlinded();
	bool IsBeingRevived(class AKSCharacter** Reviver, float* Progress);
	bool IsAnyEquippedWeaponTakingAction(class AKSWeapon** IgnoredWeapon);
	bool IsAimLocked();
	bool IsActiveWeapon(class AKSWeapon** InWeapon);
	void InvalidateAllRevealOfMe();
	void InterruptNonCharacterRevive();
	void InterruptAimDownSightsToggle(bool* bReturnWhenComplete);
	void InterruptAimAlternateToggle(bool* bReturnWhenComplete);
	void InstantRevive(class AKSCharacter** Reviver);
	void InputStopSprint();
	void InputStartSprint();
	void InputStartFire();
	bool InitRagdoll();
	void HideADSMaterials();
	bool HasModAny(TArray<class UKSPlayerMod*>* TestPlayerMods);
	bool HasMod(class UKSPlayerMod** TestPlayerMod);
	bool HasEquipPoint(struct FGameplayTag* EquipPoint);
	void GiveUpTimerTick(float* Seconds);
	void GiveUpTimerComplete();
	void GiveUpTimerActive(bool* bActive);
	bool GiveModInstance(class UKSPlayerMod** Mod, class AKSPlayerState** ModInstigator, bool* Unique, class UKSPlayerModInstance** Instance);
	bool GiveMod(class UKSPlayerMod** Mod, class AKSPlayerState** ModInstigator, bool* Unique);
	class AKSWeapon* GetWeaponByAsset(class UKSWeaponAsset** InAsset);
	class AKSWeapon* GetWeaponAtEquipPoint(struct FGameplayTag* EquipPoint);
	class UKSVOComponent* GetVOComponent();
	struct FGameplayTagContainer GetValidWeaponPoints();
	struct FGameplayTagContainer GetUsedEquipPoints();
	bool GetSpecialties(TArray<class UKSSpecialty*>* OutSpecialties);
	struct FName GetSeatAimCameraTag();
	class USphereComponent* GetPickupSphere();
	void GetOverrideByLocation(struct FVector* WorldLocation, bool* outShouldOverride, struct FName* outOverrideName);
	class UKSInteractionType* GetMostRecentInteractionType();
	bool GetModInstances(TArray<class UKSPlayerModInstance*>* OutMods);
	float GetMaxHealthBonus();
	EKSArmVisibilityType GetLeftArmVisibility();
	class AActor* GetInteractionTarget();
	void GetHitPawnEffectOverride(class UParticleSystem** ParticleSystem);
	void GetHitHeadAudioEventOverride(class UAkAudioEvent** SoundEffect);
	void GetHitByAudioEventOverride(class UAkAudioEvent** SoundEffect);
	void GetHitBodyAudioEventOverride(class UAkAudioEvent** SoundEffect);
	float GetGiveUpTime();
	EKSCharacterGender GetGender();
	class UKSFXCurveComponent* GetFXCurveComponentByFXID(struct FName* InFXID);
	float GetFlashBangEffectDurationFromDistance(float* Distance);
	bool GetFieldOfViewFromMods(float* OutFov);
	class UKSEquipmentManagerComponent* GetEquipmentManagerComponent();
	class AKSEquipment* GetEquipmentAtEquipPoint(struct FGameplayTag* EquipPoint);
	void GetDownedTransitionMontage(class UAnimMontage** OutAnimMontage);
	float GetDownedImmuneTime();
	float GetDamageModifiers(class AController** EventInstigator, class UClass** DamageTypeClass, float* OutDefenseModifier, float* OutOffenseModifier);
	class UKSVehicleSeatComponent* GetCurrentVehicleSeat();
	class AKSVehicle* GetCurrentVehicle();
	void GetCurrentReviveDuration(float* Duration, float* RemainingTime);
	struct FName GetCurrentCharacterEmotionAsName();
	ECameraShoulder GetCurrentCameraShoulder();
	int GetCurrentAbilityIndex();
	struct FGameplayTagContainer GetCompatibleEquipPoints(class UKSWeaponAsset** InWeaponAsset);
	class UKSAkComponent* GetCharacterAkComponent();
	TScriptInterface<class UKSCarriedInterface> GetCarriedObject();
	float GetCameraShoulderSwapProgress();
	class UMultiSkinObject* GetBodyApparelSkinObject();
	ECharacterBehaviorState GetBehaviorState();
	float GetBasePickupRange();
	void GetAvailableEquipPoints(struct FGameplayTagContainer* OutEquipPoints);
	class UMultiSkinObject* GetApparelSkinObjectByName(struct FName* InSkinObjectName);
	int GetAmmoCount(EAmmoType* AmmoType);
	void GetAllEquippedWeapons(TArray<class AKSWeapon*>* OutWeapons);
	class UKSWeaponComponent* GetActiveWeaponComponentAtIndex(int* Index);
	class UKSWeaponComponent* GetActiveWeaponComponent();
	class AKSWeapon* GetActiveWeapon();
	class AKSWeapon* GetActiveTemporary();
	bool GetActiveMods(TArray<class UKSPlayerMod*>* OutMods);
	class AKSWeapon* GetActiveMelee();
	class AKSWeapon* GetActiveMedPack();
	class AKSWeapon* GetActiveMainWeapon();
	class UKSWeaponAnimInstance* GetActiveKSWeaponAnimInst(int* Index);
	class AKSWeapon* GetActiveGrenade();
	struct FGameplayTagContainer GetActiveGadgetPoints();
	struct FGameplayTagContainer GetActiveEquipPoints();
	struct FName GetActiveCameraTag();
	class UCameraComponent* GetActiveCamera();
	class AKSWeapon_Aimed* GetActiveAimedWeapon();
	bool GetActivatableMods(TArray<class UKSModInst_Activated*>* OutMods);
	class UKSModInst_Activated* GetAbilityMovementMod();
	void GamepadToggleSprint();
	void GamepadSwapReleased();
	void GamepadSwapPressed();
	void GamepadLookUp(float* Value);
	void GamepadLookRight(float* Value);
	void ForceToShoulder(ECameraShoulder* ForcedShoulder);
	void ForceMainCameraBoomUpdate();
	void FinishHacking();
	int FindTierOfEquipPoint(struct FGameplayTag* EquipPoint);
	TArray<int> FindAllTiersOfEquipPoint(struct FGameplayTag* EquipPoint);
	void ExtinguishFire();
	void ExitVehiclePressed();
	void EventSetupCamerasForSpectator(bool* Enabled);
	void EvaluateCameraProximityFade();
	void EndOutOfBounds();
	void EndLockoutCamera();
	void DrownDamageTick();
	void DropButtonReleased();
	void DropButtonPressed();
	void DropActiveWeapon();
	void DropActiveGrenade();
	void DownPlayer(class AController** EventInstigator, class UClass** DamageType, EHitLocationType* HitLocationType, class AActor** DamageCauser, float* DamageDealt);
	void DoSetOnFire();
	void DoExtinguishFire();
	bool DoesTransitionSupportFocalPoint(struct FName* ActiveCamera, struct FName* PendingCamera);
	void DetachViewTargetOnlyBPComponents();
	void DestructibleSpeedGateOverlappedEvent(struct FVector* BreakingLocation, struct FVector* BreakingDirection, struct FVector* BreakingNormal);
	void DamageRecordReset();
	void CreditEliminationAssist(class APlayerState** Assistant);
	void CreditDownAssist(class APlayerState** Assistant);
	void ContextualPingReleased();
	void ContextualPingPressed();
	void ContextualButtonReleased();
	void ContextualButtonPressed();
	void CompleteNonCharacterRevive();
	void CloneCharacterMesh(class USkeletalMeshComponent** ClonedMesh);
	void ClientSwapTo(class AKSWeapon** InWeapon);
	void ClientSwapFrom(class AKSWeapon** InWeapon);
	void ClientStopInteractAcknowledge(unsigned char* InInteractRequestId, EKSInteractionResult* Result);
	void ClientNotifyStuck();
	void ClientInteractAcknowledge(unsigned char* InInteractRequestId, bool* bFailed, float* InteractDuration, bool* bRequiresManualInterrupt);
	void ClientBroadcastModEvent(struct FName* ModEvent);
	void ClearMaxHealthBonus();
	void ClearActorTargetingMeForRevive();
	void ChangeShoulderCamera(ECameraShoulder* InShoulder);
	bool CanInteractWithTest(class AActor** InInteractionTarget, bool* bPress, bool* bHold);
	bool CanInteractWith(class AActor** InInteractionTarget);
	bool CanFireRightNow(bool* bAltFire, EKSAbilityUsageFailureType* OutAbilityFailureType);
	void CancelBleed();
	bool CanCarryDownedAllies();
	bool CanBeRevivedBy(class AKSCharacter** Other, bool* bIgnoreOverlap, class AKSWeapon** IgnoredWeapon);
	bool CanAimOverShoulderNow();
	bool CanAimDownSightsNow();
	bool CanAimAlternateNow();
	bool CanActiveWeaponCanToggleOutOfAimDownSightsNow();
	bool CanActiveWeaponCanToggleIntoAimDownSightsNow();
	void CacheLatestHit(float* Damage, class UClass** DamageTypeClass, float* DamageImpulse, struct FVector* RelativeImpactLocation, struct FName* BoneName, class AActor** DamageCauser);
	void BroadcastWeaponComponentStateChange(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FKSWeaponDataUpdateContainer* NewState);
	void BroadcastWeaponComponentPostReload(uint32_t* BroadcastId, uint16_t* nEquipmentId, unsigned char* AmmoInClip);
	void BroadcastWeaponComponentFiredFull(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FFullFireRepData* Data);
	void BroadcastWeaponComponentFiredAmmo(uint32_t* BroadcastId, uint16_t* nEquipmentId, unsigned char* AmmoInClip);
	void BroadcastWeaponComponentFiredAimAndAmmo(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FAimData* Aim, unsigned char* AmmoInClip);
	void BroadcastWeaponComponentFired(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FAimData* Aim);
	void BroadcastWeaponComponentEmptyFire(uint32_t* BroadcastId, uint16_t* nEquipmentId);
	void BroadcastWeaponComponentAmmoChange(uint32_t* BroadcastId, uint16_t* nEquipmentId, unsigned char* AmmoInClip);
	void BroadcastTakeRadialDamage(struct FDamageEffect* Effect);
	void BroadcastTakePointDamage(struct FDamageEffect* Effect);
	void BroadcastSpecialAmmoEvent(EAmmoType* AmmoType, int* AmmoDelta, struct FName* EventName);
	void BroadcastSkydiveSkipped();
	void BroadcastReviveStart(class AKSCharacter** Reviver, float* ReviveTime, bool* Remote);
	void BroadcastReviveInterrupt(class AKSCharacter** Reviver);
	void BroadcastReviveComplete(class AKSCharacter** Reviver);
	void BroadcastReliableWeaponComponentStateChange(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FKSWeaponDataUpdateContainer* NewState);
	void BroadcastReliableWeaponComponentPostReload(uint32_t* BroadcastId, uint16_t* nEquipmentId, unsigned char* AmmoInClip);
	void BroadcastReliableWeaponComponentFiredFull(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FFullFireRepData* Data);
	void BroadcastReliableWeaponComponentFiredAmmo(uint32_t* BroadcastId, uint16_t* nEquipmentId, unsigned char* AmmoInClip);
	void BroadcastReliableWeaponComponentFiredAimAndAmmo(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FAimData* Aim, unsigned char* AmmoInClip);
	void BroadcastReliableWeaponComponentFired(uint32_t* BroadcastId, uint16_t* nEquipmentId, struct FAimData* Aim);
	void BroadcastReliableWeaponComponentEmptyFire(uint32_t* BroadcastId, uint16_t* nEquipmentId);
	void BroadcastReliableWeaponComponentAmmoChange(uint32_t* BroadcastId, uint16_t* nEquipmentId, unsigned char* AmmoInClip);
	void BroadcastOnDamageReduced();
	void BroadcastOnDamageImmune();
	void BroadcastModEvent(struct FName* ModEvent);
	void BroadcastGrenadeExplodeInHand(class UKSWeaponAsset_Grenade** pGrenadeWeaponAsset);
	bool BlueprintHandleDeath();
	void BeginOutOfBounds(float* WarningLength);
	void BeginNonCharacterRevive(class AKSPlayerState** ReviveInstigator, float* Duration);
	void BeginInstantRevive(class AKSCharacter** Reviver, float* Duration, bool* Guaranteed);
	void AttachViewTargetOnlyBPComponents();
	void ApplyMaxHealthBonus(float* Bonus, class AController** EventInstigator, class AActor** EventCauser);
	void ApplyLastHitImpulse(bool* UpdateTargetRotation, bool* AffectCapsule);
	void ApplyFlinchFromPointDamage(float* Damage, class UClass** DamageTypeClass, struct FVector* RelativeImpactLocation, struct FVector* RelativeImpactNormal, struct FName* BoneName, class AActor** DamageCauser);
	void ApplyCameraProximityFade(float* Alpha);
	bool ApplyApparelAsset(class UKSApparelAsset** ApparelAsset);
	bool AnyActivatableModsActive();
	void AnimAuditStop();
	void AnimAuditStart();
	void AnimAuditResume();
	void AnimAuditClear();
	void AimDownSightsToggle();
	void AimDownSightsReleased();
	void AimDownSightsPressed();
	TArray<class UParticleSystemComponent*> AddParticleEffects(TArray<struct FKSParticleSystemAttachment>* ParticleSystemAttachments);
	void AddOutOfRangePickup(class AActor** OtherActor, float* PickupDistance);
	void AddOrUpdateBlendable(TScriptInterface<class UBlendableInterface>* InBlendableObject, float* InWeight);
	int AddActionRestrictionForDuration(struct FKSActionRestrictor* ActionRestrictor, float* Duration);
	int AddActionRestriction(struct FKSActionRestrictor* ActionRestrictor);
	bool ActivatableModAtIndexActive(int* AbilityIndex);
	void AbortFireAllWeapons();
	void AbilityChargeUpdated(class UKSPlayerMod_Activated** ChargingMod);
	void AbilityActivated(int* AbilityIndex);
};


// Class Killstreak.KSCharacterAnimInst
// 0x0C80 (0x0F10 - 0x0290)
class UKSCharacterAnimInst : public UKSAnimInstance
{
public:
	bool                                               bEmoteIsPlaying;                                          // 0x0290(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0291(0x0007) MISSED OFFSET
	class UAnimMontage*                                CurrentPlayingEmote;                                      // 0x0298(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EmoteFastBlendTime;                                       // 0x02A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmoteSlowBlendTime;                                       // 0x02A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmoteBlendInTime;                                         // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EmoteBlendOutTime;                                        // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSprayIsPlaying;                                          // 0x02B0(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02B1(0x0003) MISSED OFFSET
	float                                              Speed;                                                    // 0x02B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SpeedXY;                                                  // 0x02B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SpeedZ;                                                   // 0x02BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Forward;                                                  // 0x02C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Right;                                                    // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BodyLean;                                                 // 0x02C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    BodyLeanRotator;                                          // 0x02CC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    HeadLeanRotator;                                          // 0x02D8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnableAnimMirroring;                                     // 0x02E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02E5(0x0003) MISSED OFFSET
	struct FVector2D                                   SprintLeftRightBodyLeanRange;                             // 0x02E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ForwardRotate;                                            // 0x02F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RightRotate;                                              // 0x02F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BackRotate;                                               // 0x02F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LeftRotate;                                               // 0x02FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     ForwardCrouchPelvicVector;                                // 0x0300(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     ForwardCrouchFeetIKVector;                                // 0x030C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     BackCrouchPelvicVector;                                   // 0x0318(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     BackCrouchFeetIKVector;                                   // 0x0324(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LeftCrouchPelvicVector;                                   // 0x0330(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LeftCrouchFeetIKVector;                                   // 0x033C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RightCrouchPelvicVector;                                  // 0x0348(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RightCrouchFeetIKVector;                                  // 0x0354(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ForwardCrouchPelvicOffset;                                // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              ForwardCrouchFeetIKOffset;                                // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              BackCrouchPelvicOffset;                                   // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              BackCrouchFeetIKOffset;                                   // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              LeftCrouchPelvicOffset;                                   // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              LeftCrouchFeetIKOffset;                                   // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              RightCrouchPelvicOffset;                                  // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              RightCrouchFeetIKOffset;                                  // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxWalkSpeed;                                             // 0x0380(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxADSWalkSpeed;                                          // 0x0384(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxSprintSpeed;                                           // 0x0388(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxCrouchSpeed;                                           // 0x038C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxADSCrouchSpeed;                                        // 0x0390(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bShouldTransitionADSCrouch : 1;                           // 0x0394(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0395(0x0003) MISSED OFFSET
	float                                              CurSpeedFraction;                                         // 0x0398(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurMaxSpeed;                                              // 0x039C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurSpeedScaling;                                          // 0x03A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDoCheckFirstStepCurve;                                   // 0x03A4(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x03A5(0x0003) MISSED OFFSET
	float                                              FirstStepTransitionAlpha;                                 // 0x03A8(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SpeedWarpingAlpha;                                        // 0x03AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ParachuteMovementPitch;                                   // 0x03B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ParachuteMovementYaw;                                     // 0x03B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ParachuteMovementForward;                                 // 0x03B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ParachuteMovementLateral;                                 // 0x03BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSkydiveTurnOverridesStrafe;                              // 0x03C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsNoseDiving;                                            // 0x03C1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x03C2(0x0002) MISSED OFFSET
	float                                              ParachuteYawInterpSpeed;                                  // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParachutePitchInterpSpeed;                                // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParachuteForwardInterpSpeed;                              // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParachuteLateralInterpSpeed;                              // 0x03D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParachuteForwardThreshold;                                // 0x03D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bParachuteReady;                                          // 0x03D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x03D9(0x0003) MISSED OFFSET
	float                                              ParachuteYawRotationFactor;                               // 0x03DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LastFreeFallMovementVector;                               // 0x03E0(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FFloatHitSpringState                        HitSpringRollState;                                       // 0x03EC(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FFloatHitSpringState                        HitSpringPitchState;                                      // 0x03F4(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FFloatHitSpringState                        HitSpringYawState;                                        // 0x03FC(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	float                                              HitRotationAmountRoll;                                    // 0x0404(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              HitRotationAmountPitch;                                   // 0x0408(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              HitRotationAmountYaw;                                     // 0x040C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              HitRotationPitchMax;                                      // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HitRotationRollMax;                                       // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HitRotationYawMax;                                        // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PelvisHitOffset;                                          // 0x041C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    SpineHitOffset;                                           // 0x0428(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    NeckHitOffset;                                            // 0x0434(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    ArmHitOffset;                                             // 0x0440(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	TArray<struct FHitReaction>                        QueuedHits;                                               // 0x0450(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	class UCurveVector*                                HitReactionTimeScale;                                     // 0x0460(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 HitReactionDamageScale;                                   // 0x0468(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ADSHitReactionBlend;                                      // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AOSHitReactionBlend;                                      // 0x0474(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HipfireHitReactionBlend;                                  // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SimClientHitReactionBlend;                                // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentHitReactionBlend;                                  // 0x0480(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpineFireRotationLimit;                                   // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NeckFireRotationLimit;                                    // 0x0488(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ClavicleFireRotationLimit;                                // 0x048C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpperArmFireRotationPitchLimit;                           // 0x0490(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpperArmFireRotationYawLimit;                             // 0x0494(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ForearmFireRotationLimit;                                 // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FFloatHitSpringState                        SpineFireSpringState;                                     // 0x049C(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FFloatHitSpringState                        NeckFireSpringState;                                      // 0x04A4(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FFloatHitSpringState                        ClavicleFireSpringState;                                  // 0x04AC(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FFloatHitSpringState                        UpperArmFireSpringState;                                  // 0x04B4(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FFloatHitSpringState                        UpperArmFireYawSpringState;                               // 0x04BC(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FFloatHitSpringState                        ForearmFireSpringState;                                   // 0x04C4(0x0008) (BlueprintVisible, BlueprintReadOnly, Transient)
	float                                              SpineFireRotationAmountPitch;                             // 0x04CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              NeckFireRotationAmountPitch;                              // 0x04D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ClavicleFireRotationAmountYaw;                            // 0x04D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              UpperArmFireRotationAmountPitch;                          // 0x04D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              UpperArmFireRotationAmountYaw;                            // 0x04DC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ForarmFireRotationAmountPitch;                            // 0x04E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    SpineFireOffset;                                          // 0x04E4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    NeckFireOffset;                                           // 0x04F0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    ClavicleFireOffset;                                       // 0x04FC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    UpperArmFireOffset;                                       // 0x0508(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    ForearmFireOffset;                                        // 0x0514(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              WeaponFireAlpha;                                          // 0x0520(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              WeaponAdditiveAlpha;                                      // 0x0524(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRecoilProfile                              CurrentRecoilProfile;                                     // 0x0528(0x01EC) (BlueprintVisible, Transient)
	int                                                FireImpulseCounter;                                       // 0x0714(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsRecoiling;                                             // 0x0718(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bBypassRecoiling;                                         // 0x0719(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x071A(0x0006) MISSED OFFSET
	TMap<struct FName, class UKSCharacterAnimInst*>    SubAnimInstances;                                         // 0x0720(0x0050) (BlueprintVisible, ZeroConstructor)
	bool                                               bCanSwitchStartAnim;                                      // 0x0770(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bTriggerCustomPivot;                                      // 0x0771(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0772(0x0002) MISSED OFFSET
	float                                              EngHeadAdditiveAlpha;                                     // 0x0774(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LeftHandIKAlpha;                                          // 0x0778(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LeftHandIKAlphaTarget;                                    // 0x077C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RightHandIKAlpha;                                         // 0x0780(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RightHandIKAlphaTarget;                                   // 0x0784(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              UplineIKAlpha;                                            // 0x0788(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              UplineIKAlphaTarget;                                      // 0x078C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                NextLeftHandIKForceRequestId;                             // 0x0790(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bLeftHandIKForceOffFromRequests;                          // 0x0794(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0795(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData11[0x50];                                      // 0x0795(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSCharacterAnimInst.LeftHandIkForceOffRequests
	bool                                               bLeftHandIKOffFromMainInstNotifyStates;                   // 0x07E8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x57];                                      // 0x07E9(0x0057) MISSED OFFSET
	float                                              FootIKAlpha;                                              // 0x0840(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FootIKAlphaTarget;                                        // 0x0844(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBeginZipline;                                           // 0x0848(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndZipline;                                             // 0x0858(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     ZiplineRootOffset;                                        // 0x0868(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     AppliedADSRootTranslation;                                // 0x0874(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     DefaultADSRootTranslation;                                // 0x0880(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   ForwardRotateInputRange;                                  // 0x088C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ForwardRotateOutputRange;                                 // 0x0894(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RightRotateInputRange;                                    // 0x089C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RightRotateOutputRange;                                   // 0x08A4(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	EKSMovementDirection                               _MovementDirection;                                       // 0x08AC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EKSMovementDirection                               LocomotionStartDirection;                                 // 0x08AD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EKSMovementDirection                               LocomotionStopDirection;                                  // 0x08AE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EKSMovementDirection                               LocomotionPivotDirection;                                 // 0x08AF(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovementDirectionRotate;                                  // 0x08B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovementDirectionRotateOnStartOrStop;                     // 0x08B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DirectionBlendSpeed;                                      // 0x08B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bZeroVelocity : 1;                                        // 0x08BC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bZeroAcceleration : 1;                                    // 0x08BC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bJumping : 1;                                             // 0x08BC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bWasJumping : 1;                                          // 0x08BC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData13[0x3];                                       // 0x08BD(0x0003) MISSED OFFSET
	bool                                               bDisableUpperBodyLands;                                   // 0x08C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x08C1(0x0003) MISSED OFFSET
	unsigned char                                      bFalling : 1;                                             // 0x08C4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bInFreeFall : 1;                                          // 0x08C4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bInWingSuit : 1;                                          // 0x08C4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bReadyForFreeFall : 1;                                    // 0x08C4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bVaulting : 1;                                            // 0x08C4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsMantling : 1;                                          // 0x08C4(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bMantleIsVault : 1;                                       // 0x08C4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData15[0x3];                                       // 0x08C5(0x0003) MISSED OFFSET
	float                                              TotalVaultDuration;                                       // 0x08C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x08CC(0x0004) MISSED OFFSET
	class UAnimSequence*                               CurrentMantleSequence;                                    // 0x08D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FMantleConfig                               CurrentMantleConfig;                                      // 0x08D8(0x00A8) (Transient)
	float                                              VaultStartTime;                                           // 0x0980(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PreVaultWorldHeight;                                      // 0x0984(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentVaultTime;                                         // 0x0988(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x098C(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           VaultTimeScaleCurve;                                      // 0x0990(0x0018) (ZeroConstructor, Transient)
	struct FInterpCurveFloat                           VaultScaledVertCurve;                                     // 0x09A8(0x0018) (ZeroConstructor, Transient)
	struct FVector                                     MantleGrabLocation;                                       // 0x09C0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MantleDistanceToTop;                                      // 0x09CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     MantleTowardsWallDir;                                     // 0x09D0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bMantleIKLeftHand;                                        // 0x09DC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bMantleIKRightHand;                                       // 0x09DD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData18[0x2];                                       // 0x09DE(0x0002) MISSED OFFSET
	float                                              MantleIKLeftHandAlpha;                                    // 0x09E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MantleIKRightHandAlpha;                                   // 0x09E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     MantleIKLeftHandLocation;                                 // 0x09E8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     MantleIKRightHandLocation;                                // 0x09F4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDodgeRolling : 1;                                        // 0x0A00(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0A01(0x0003) MISSED OFFSET
	float                                              DodgeRollDuration;                                        // 0x0A04(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsInPowerSlide : 1;                                      // 0x0A08(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bAbilityMovement : 1;                                     // 0x0A08(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bZipLining : 1;                                           // 0x0A08(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bZipLineBracing : 1;                                      // 0x0A08(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bZipLineEnding : 1;                                       // 0x0A08(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bZipLineIsUpline : 1;                                     // 0x0A08(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bZipLineIntro : 1;                                        // 0x0A08(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bStunned : 1;                                             // 0x0A08(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsBlinded : 1;                                           // 0x0A09(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bHardLand : 1;                                            // 0x0A09(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bCrouching : 1;                                           // 0x0A09(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bSprinting : 1;                                           // 0x0A09(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsInVehicle : 1;                                         // 0x0A09(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData20[0x6];                                       // 0x0A0A(0x0006) MISSED OFFSET
	class UAnimSequence*                               VehicleIdle;                                              // 0x0A10(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsSwimming : 1;                                          // 0x0A18(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsSubmerged : 1;                                         // 0x0A18(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0A19(0x0003) MISSED OFFSET
	struct FRotator                                    SwimSpineRotation;                                        // 0x0A1C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bUpdateMovement : 1;                                      // 0x0A28(0x0001) (Edit)
	unsigned char                                      bCombat : 1;                                              // 0x0A28(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bDead : 1;                                                // 0x0A28(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bDowned : 1;                                              // 0x0A28(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bKnockedBack : 1;                                         // 0x0A28(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsStopped : 1;                                           // 0x0A28(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0A29(0x0003) MISSED OFFSET
	struct FRotator                                    DownedRootFacing;                                         // 0x0A2C(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnGoDown;                                                 // 0x0A38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bActivatingMod : 1;                                       // 0x0A48(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAnyModsActive : 1;                                       // 0x0A48(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0A49(0x0003) MISSED OFFSET
	struct FName                                       InteractionState;                                         // 0x0A4C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              IsInVehicleAlpha;                                         // 0x0A54(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              IsInVehicleInverseAlpha;                                  // 0x0A58(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinZSpeedforJumpLand;                                     // 0x0A5C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bCachedCameraLockout : 1;                                 // 0x0A60(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bCachedCameraLockoutCooldown : 1;                         // 0x0A60(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData24[0x7];                                       // 0x0A61(0x0007) MISSED OFFSET
	float                                              CachedCameraLockoutAlpha;                                 // 0x0A68(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData25[0x4];                                       // 0x0A6C(0x0004) MISSED OFFSET
	class UAnimSequence*                               FallDown;                                                 // 0x0A70(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AdditiveLandsAlpha;                                       // 0x0A78(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDownedCosmetic;                                          // 0x0A7C(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData26[0x3];                                       // 0x0A7D(0x0003) MISSED OFFSET
	struct FVector                                     AccelDirection;                                           // 0x0A80(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LocalAccelDirection;                                      // 0x0A8C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PreviousLocalAccelDirection;                              // 0x0A98(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     Velocity;                                                 // 0x0AA4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     SmoothedVelocity;                                         // 0x0AB0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LocalVelocity;                                            // 0x0ABC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              VelocityVsAccelDotProduct;                                // 0x0AC8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     FacingDirection;                                          // 0x0ACC(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     FloorNormal;                                              // 0x0AD8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     AccelRightDirection;                                      // 0x0AE4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     AccelNormDirection;                                       // 0x0AF0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SlopeAngle;                                               // 0x0AFC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SlopeAngleTarget;                                         // 0x0B00(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   SlopeAngleDirectional;                                    // 0x0B04(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    SlopeAngleDirectionalRotation;                            // 0x0B0C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    PowerSlideSlopeAngleRotation;                             // 0x0B18(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SlopeFeetAlpha;                                           // 0x0B24(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SlopeFeetAlphaTarget;                                     // 0x0B28(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     FootHeightAdjustmentOnSlope;                              // 0x0B2C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PelvisAdjustmentOnSlope;                                  // 0x0B38(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RootAdjustmentOnSlope;                                    // 0x0B44(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDisableFeetTilting;                                      // 0x0B50(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData27[0x3];                                       // 0x0B51(0x0003) MISSED OFFSET
	float                                              fSlopeInterpSpeed;                                        // 0x0B54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	EKSLocomotionState                                 _LocomotionState;                                         // 0x0B58(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               HasLocomotionStartLocation;                               // 0x0B59(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData28[0x2];                                       // 0x0B5A(0x0002) MISSED OFFSET
	struct FVector                                     LocomotionStartLocation;                                  // 0x0B5C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromLocomotionStart;                                  // 0x0B68(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromLocomotionStartMax;                               // 0x0B6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasLocomotionStopLocation;                                // 0x0B70(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData29[0x3];                                       // 0x0B71(0x0003) MISSED OFFSET
	struct FVector                                     LocomotionStopLocation;                                   // 0x0B74(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromLocomotionStop;                                   // 0x0B80(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LocomotionStopBufferTime;                                 // 0x0B84(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocomotionStopBufferExpireTime;                           // 0x0B88(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bSuccessPivotCompleteThisFrame;                           // 0x0B8C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               HasLocomotionPivotLocation;                               // 0x0B8D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               HasLocomotionPrePivotLocation;                            // 0x0B8E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               HasLocomotionPostPivotLocation;                           // 0x0B8F(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LocomotionPivotThreshold;                                 // 0x0B90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocomotionPivotLocation;                                  // 0x0B94(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     CachedLocomotionPivotLocation;                            // 0x0BA0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromLocomotionPivot;                                  // 0x0BAC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromLocomotionPivotMax;                               // 0x0BB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocomotionPrePivotLocation;                               // 0x0BB4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromLocomotionPrePivot;                               // 0x0BC0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LocomotionPostPivotLocation;                              // 0x0BC4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromLocomotionPostPivot;                              // 0x0BD0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLocomotionStartUsesPivotDistance;                        // 0x0BD4(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               HasJumpStartLocation;                                     // 0x0BD5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData30[0x2];                                       // 0x0BD6(0x0002) MISSED OFFSET
	struct FVector                                     JumpStartLocation;                                        // 0x0BD8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsSprintJumping;                                          // 0x0BE4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsShortJumping;                                           // 0x0BE5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData31[0x2];                                       // 0x0BE6(0x0002) MISSED OFFSET
	float                                              DistFromJumpStart;                                        // 0x0BE8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromJumpStartMax;                                     // 0x0BEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShortJumpThreshold;                                       // 0x0BF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasJumpLandLocation;                                      // 0x0BF4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData32[0x3];                                       // 0x0BF5(0x0003) MISSED OFFSET
	struct FVector                                     JumpLandLocation;                                         // 0x0BF8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     JumpLandLocationTarget;                                   // 0x0C04(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              JumpLandLocationInterpSpeed;                              // 0x0C10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData33[0x1C];                                      // 0x0C14(0x001C) MISSED OFFSET
	float                                              DistFromJumpLand;                                         // 0x0C30(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromJumpLandTarget;                                   // 0x0C34(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DistFromJumpLandInterpSpeed;                              // 0x0C38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PowerSlideProgress;                                       // 0x0C3C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PowerSlideAngle;                                          // 0x0C40(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    PowerSlideRotation;                                       // 0x0C44(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EKSPowerSlideEndReason                             _PowerSlideEndReason;                                     // 0x0C50(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsPowerSlidingOnSlope;                                   // 0x0C51(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLocallyViewed;                                         // 0x0C52(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               JumpLandLocationInWater;                                  // 0x0C53(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredComponentYaw;                                      // 0x0C54(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bTurnInPlaceInProgress;                                   // 0x0C58(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData34[0x3];                                       // 0x0C59(0x0003) MISSED OFFSET
	float                                              TurnInPlaceTurnValue;                                     // 0x0C5C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentTurnInPlaceThreshold;                              // 0x0C60(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	EKSTurnInPlaceAnimationVariant                     LastTurnInPlaceAnimationVariant;                          // 0x0C64(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData35[0x3];                                       // 0x0C65(0x0003) MISSED OFFSET
	float                                              TurnInPlaceMinThreshold;                                  // 0x0C68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceMaxOffset;                                     // 0x0C6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceRetriggerMinThreshold;                         // 0x0C70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceRecoverySpeedWithAcceleration;                 // 0x0C74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceRecoverySpeed90;                               // 0x0C78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceRecoverySpeed180;                              // 0x0C7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    AppliedTurnInPlaceRotator;                                // 0x0C80(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    WorldTurnInPlaceRotator;                                  // 0x0C8C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData36[0x10];                                      // 0x0C98(0x0010) MISSED OFFSET
	bool                                               bDisableTurnInPlaceCounterRotate;                         // 0x0CA8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bShouldSplitUpperBody;                                    // 0x0CA9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLockedToWorldRotation;                                 // 0x0CAA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsLockedToWorldRotationAlpha;                             // 0x0CAB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FRotator                                    LockedWorldRotation;                                      // 0x0CAC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData37[0x50];                                      // 0x0CB8(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSCharacterAnimInst.WorldRotationLockIds
	unsigned char                                      NextWorldRotationLockId;                                  // 0x0D08(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData38[0x1F];                                      // 0x0D09(0x001F) MISSED OFFSET
	bool                                               bIsAimOverShoulder;                                       // 0x0D28(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bIsAimDownSights;                                         // 0x0D29(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData39[0x2];                                       // 0x0D2A(0x0002) MISSED OFFSET
	float                                              IsAimDownSightsAlpha;                                     // 0x0D2C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bIsAimDownSightsFirstPerson;                              // 0x0D30(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData40[0x3];                                       // 0x0D31(0x0003) MISSED OFFSET
	float                                              IsAimDownSightsFirstPersonAlpha;                          // 0x0D34(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bIs3PAimDownSights;                                       // 0x0D38(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData41[0x3];                                       // 0x0D39(0x0003) MISSED OFFSET
	struct FRotator                                    CachedAimRotation;                                        // 0x0D3C(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    DeltaAimRotation;                                         // 0x0D48(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    ThirdPersonAppliedAimRotator;                             // 0x0D54(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ThirdPersonAimYaw;                                        // 0x0D60(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ThirdPersonAimYawInverted;                                // 0x0D64(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ThirdPersonAimPitch;                                      // 0x0D68(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ThirdPersonLean;                                          // 0x0D6C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ThirdPersonLeanMultiplier;                                // 0x0D70(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ThirdPersonLeanSpeed;                                     // 0x0D74(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinPitchAngle;                                            // 0x0D78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxPitchAngle;                                            // 0x0D7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinYawAngle;                                              // 0x0D80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxYawAngle;                                              // 0x0D84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NormalYawInterpSpeed;                                     // 0x0D88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ZipLineYawInterpSpeed;                                    // 0x0D8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ZipLineYawInterpSpeedOver180;                             // 0x0D90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentYawInterpSpeed;                                    // 0x0D94(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TargetYawInterpSpeed;                                     // 0x0D98(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              NormalYawInterpAcceleration;                              // 0x0D9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ADSBlendToCrouchSlotTime;                                 // 0x0DA0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ADSBlendToStandingSlotTime;                               // 0x0DA4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsReloading : 1;                                         // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsSwitchingWeapon : 1;                                   // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsUsingItem : 1;                                         // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsUsingAbility : 1;                                      // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsRetrievingWeapon : 1;                                  // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsHacking : 1;                                           // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAttachHandWhileCrouching : 1;                            // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAttachHandMelee : 1;                                     // 0x0DA8(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAttachHandWhileIdle : 1;                                 // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAttachHandWhileSprinting : 1;                            // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAttachHandWhileMoving : 1;                               // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAttachHandWhileZiplining : 1;                            // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bForceAttachHandIfNotNonCom : 1;                          // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAttachRightHand : 1;                                     // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bWeaponScale : 1;                                         // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bRightPropBScale : 1;                                     // 0x0DA9(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bLeftPropBScale : 1;                                      // 0x0DAA(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAimsDisabled : 1;                                        // 0x0DAA(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bMantlePlaying : 1;                                       // 0x0DAA(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsRagdoll : 1;                                           // 0x0DAA(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData42[0x1];                                       // 0x0DAB(0x0001) MISSED OFFSET
	float                                              LeftPropBScaleAlpha;                                      // 0x0DAC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RightPropBScaleAlpha;                                     // 0x0DB0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FreeFallAlpha;                                            // 0x0DB4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BlindedAlpha;                                             // 0x0DB8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              HolsterLockAlpha;                                         // 0x0DBC(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PropLockAlpha;                                            // 0x0DC0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LeftHolsterLockAlpha;                                     // 0x0DC4(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    DebugDesiredAimDifference;                                // 0x0DC8(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUsingZipLineOver180InterpSpeed;                          // 0x0DD4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData43[0x3];                                       // 0x0DD5(0x0003) MISSED OFFSET
	struct FRotator                                    FirstPersonAppliedAimRotator;                             // 0x0DD8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     FirstPersonAppliedBreathStepTranslation;                  // 0x0DE4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FirstPersonBreathSpeed;                                   // 0x0DF0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FirstPersonBreathHeight;                                  // 0x0DF4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FirstPersonStepSpeedStanding;                             // 0x0DF8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FirstPersonStepSpeedCrouching;                            // 0x0DFC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FirstPersonStepHeight;                                    // 0x0E00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FirstPersonStepMinSpeed;                                  // 0x0E04(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    FirstPersonLaggingAimRotator;                             // 0x0E08(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Normal1PAimInterpSpeed;                                   // 0x0E14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentAimPitchSway;                                      // 0x0E18(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentAimPitchSwayOffset;                                // 0x0E1C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentAimYawSway;                                        // 0x0E20(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentAimYawSwayOffset;                                  // 0x0E24(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              NormalLeanAndSwayInterpSpeed;                             // 0x0E28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData44[0xC];                                       // 0x0E2C(0x000C) MISSED OFFSET
	float                                              ADSBreathingTime;                                         // 0x0E38(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ADSSteppingTime;                                          // 0x0E3C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bScaleOutWeapon;                                          // 0x0E40(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData45[0x3];                                       // 0x0E41(0x0003) MISSED OFFSET
	float                                              WeaponScaleAlpha;                                         // 0x0E44(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bUnarmed;                                                 // 0x0E48(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bMelee;                                                   // 0x0E49(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bQuickMelee;                                              // 0x0E4A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bIsUsingMedPen;                                           // 0x0E4B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bEnableMeleeLowerBody;                                    // 0x0E4C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bMeleeAim;                                                // 0x0E4D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bMeleeNoAim;                                              // 0x0E4E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData46[0x1];                                       // 0x0E4F(0x0001) MISSED OFFSET
	float                                              MeleeLowerBodyDuration;                                   // 0x0E50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	EKSMovementDirection                               MeleeLowerBodyDirection;                                  // 0x0E54(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bIsUsingTestLocomotion;                                   // 0x0E55(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	ECombatState                                       TestCombatState;                                          // 0x0E56(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ECombatState                                       _CombatState;                                             // 0x0E57(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	ECombatState                                       DefaultCombatState;                                       // 0x0E58(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData47[0x3];                                       // 0x0E59(0x0003) MISSED OFFSET
	float                                              CombatStateCooldownTime;                                  // 0x0E5C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TestCombatStateCooldownTime;                              // 0x0E60(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponCombatStateCooldownTime;                            // 0x0E64(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                CombatStateCooldownTimer;                                 // 0x0E68(0x0008) (Transient)
	struct FTimerHandle                                TestCombatStateCooldownTimer;                             // 0x0E70(0x0008) (Transient)
	struct FTimerHandle                                EngHeadAdditiveAlphaTimer;                                // 0x0E78(0x0008) (Transient)
	bool                                               bCooldownBlocked;                                         // 0x0E80(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData48[0x3];                                       // 0x0E81(0x0003) MISSED OFFSET
	float                                              EngagedBlendTime;                                         // 0x0E84(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ComBlendTime;                                             // 0x0E88(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NonComBlendTime;                                          // 0x0E8C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDownedIdleToCrawlLoop;                                   // 0x0E90(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDownedCrawlLoopToIdle;                                   // 0x0E91(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCanBlink;                                                // 0x0E92(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsBlinking;                                              // 0x0E93(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              EyeBlinkAlpha;                                            // 0x0E94(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeToNextBlink;                                          // 0x0E98(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinimumTimeBetweenBlinks;                                 // 0x0E9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaximumTimeBetweenBlinks;                                 // 0x0EA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EyeBlinkSpeed;                                            // 0x0EA4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                BlinkTimer;                                               // 0x0EA8(0x0008) (Transient)
	EKSEmotion                                         _Emotion;                                                 // 0x0EB0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData49[0x3];                                       // 0x0EB1(0x0003) MISSED OFFSET
	float                                              EmotionAnimTime;                                          // 0x0EB4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData50[0x10];                                      // 0x0EB8(0x0010) MISSED OFFSET
	bool                                               bIsPerformingAction;                                      // 0x0EC8(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bPlayingMirrorTransition;                                 // 0x0EC9(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bAnimMirrorDelay;                                         // 0x0ECA(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bDisableMirrorPose;                                       // 0x0ECB(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWantsMirroredPoseCosmetic;                               // 0x0ECC(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData51[0x3];                                       // 0x0ECD(0x0003) MISSED OFFSET
	float                                              PoseMirrorAlphaCosmetic;                                  // 0x0ED0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MirrorInterpSpeed;                                        // 0x0ED4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MirrorInterpSpeedEngaged;                                 // 0x0ED8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData52[0x4];                                       // 0x0EDC(0x0004) MISSED OFFSET
	struct FBoneMirrorConfig                           _BoneMirrorConfig;                                        // 0x0EE0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	ECameraShoulder                                    CurrentShoulder;                                          // 0x0F00(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWantsMirroredPose;                                       // 0x0F01(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData53[0x2];                                       // 0x0F02(0x0002) MISSED OFFSET
	float                                              PoseMirrorAlpha;                                          // 0x0F04(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData54[0x8];                                       // 0x0F08(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCharacterAnimInst");
		return ptr;
	}


	void UpdateTestCombatState(ECombatState* NewCombatState, bool* bBlockCooldown, bool* bForce);
	void UpdateCombatState(ECombatState* NewCombatState, bool* bBlockCooldown, bool* bForce);
	void UpdateCachedPivotLocation();
	void UnplantRightHand();
	void UnplantLeftHand();
	void UnhideWeapon();
	void UnhideMag();
	void UnhideGadget();
	void TryToTriggerTurnInPlaceAnimation(EKSTurnInPlaceAnimationVariant* AnimationVariant, float* DelayTime);
	class AKSCharacterBase* TryGetKSCharacterBase();
	void TriggerDisableAims(bool* bShouldDisable);
	void TriggerCustomPivot();
	void SwitchWeaponNative(class UKSWeaponComponent** Weapon);
	void SwitchWeaponIKNative(class UKSWeaponComponent** Weapon);
	void StopSpray();
	void StopFire();
	void StopEmote();
	void StartSpray();
	void StartFire();
	void StartEmote(class UAnimMontage** EmoteMontage);
	void ShoulderCharge();
	void SetMaxSpeedValues(class UKSWeaponAsset** WeaponAsset);
	void ReviveMesh(class UAnimMontage** ReviveMontage, bool* bIsInAir);
	void RetrieveEnd();
	void RetrieveBegin();
	void RequestNewCombatState(ECombatState* NewCombatState, bool* bBlockCooldown, bool* bForce);
	int RequestLeftHandIKForceOff();
	bool ReleaseWorldRotationLock(unsigned char* InLockId);
	bool PopLeftHandIKForceOffRequest(int* RequestID);
	void PlayRecoilProfile(struct FRecoilProfile* RecoilProfile);
	void OnTestCombatStateCooldown();
	void OnShoulderChanged();
	void OnMovementDirectionChanged(EKSMovementDirection* OldDirection, EKSMovementDirection* NewDirection);
	void OnCombatStateCooldown();
	void LocomotionStop(struct FVector* StopLocation);
	void LocomotionStart(struct FVector* StartLocation);
	void LocomotionPrePivot();
	void LocomotionPivotCheckpoint();
	void LocomotionPivot(struct FVector* PivotLocation);
	void LocomotionJumpStart(struct FVector* StartLocation);
	void LocomotionJumpLand(struct FVector* LandLocation);
	unsigned char LockToCurrentInWorldRotation();
	bool IsLeftHandIKForcedOff();
	void HideWeapon();
	void HideMag();
	void HideGadget();
	TArray<struct FBoneReference> GetUnpairedMirrorBones();
	TArray<struct FBoneMirrorPair> GetPairedMirrorBones();
	EKSMovementDirection GetMovementDirectionFromLocalAcceleration(struct FVector* NormalizedLocalAccel, bool* bGetOppositeDirection);
	float STATIC_FloatSpringInterp(float* Current, float* Target, float* Stiffness, float* CriticalDampingFactor, float* DeltaTime, float* Mass, struct FFloatHitSpringState* SpringState);
	void EventStopSwimming();
	void EventStopSubmerge();
	void EventStartSwimming();
	void EventStartSubmerge();
	void EventStartInteraction(struct FName* NewInteractState, float* NewInteractHeight, float* NewInteractTime);
	void EventPlayHitReactionAnimation(struct FName* AttackDirection, bool* bWillReturnDamage);
	void EventPlayFireAnimation();
	bool EventPlayDeathAnimation();
	void EventEndZipLineEnding();
	void EventEndZipLineBrace();
	void EventEndZipLine();
	void EventEndVault();
	void EventEndStun();
	void EventEndPowerSlide(EKSPowerSlideEndReason* EndReason);
	void EventEndInteraction(struct FName* OldInteractState);
	void EventEndHardLand();
	void EventEndActivatingMod();
	void EventEndAbilityMovement();
	void EventDoZipLineEnding();
	void EventDoZipLineBrace();
	void EventDoZipLine();
	void EventDoVault(float* InMantleHeight, bool* bInVault, float* InVaultDrop, float* InUpDuration, float* InAcrossDuration, float* InDownDuration, struct FName* InMantleName);
	void EventDoStun();
	void EventDoPowerSlide();
	void EventDoHardLandAvoid();
	void EventDoHardLand();
	void EventDoGoDown();
	void EventDoDodgeRoll(float* Duration, struct FVector2D* Direction);
	void EventDoActivatingMod();
	void EventDoAbilityMovement();
	void EventActivatedModExpired();
	void EnableAims();
	void DoResetCustomPivot();
	void DodgeRollExpire();
	void DisableAims();
	bool CheckCanSpray();
	bool CheckCanEmote();
	bool CanUseCombatState(ECombatState* TestState);
	void BroadcastOnGoDown();
	void BlinkEyes();
	void AttemptTestCombatStateCooldown();
	void AttemptCombatStateCooldown();
};


// Class Killstreak.KSCharacterCameraShake
// 0x0020 (0x0180 - 0x0160)
class UKSCharacterCameraShake : public UCameraShake
{
public:
	class AKSCharacterBase*                            AttachedCharacter;                                        // 0x0160(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0168(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCharacterCameraShake");
		return ptr;
	}


	void StopShakeOnViewTargetChanged(class APlayerController** NewController);
	void StopShakeOnActorDestroyed(class AActor** DestroyedActor);
	void StopShakeDynamic();
	void OnAimStateChanged(EKSCharacterAimMode* NextAimState);
};


// Class Killstreak.KSCharacterCapsuleComponent
// 0x0010 (0x05E0 - 0x05D0)
class UKSCharacterCapsuleComponent : public UCapsuleComponent
{
public:
	bool                                               bBeingCarried;                                            // 0x05D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TEnumAsByte<ECollisionEnabled>                     UncarriedCollisionEnabled;                                // 0x05D1(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x05D2(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCharacterCapsuleComponent");
		return ptr;
	}

};


// Class Killstreak.KSCharacterMovementComponent
// 0x0550 (0x0C90 - 0x0740)
class UKSCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x1A];                                      // 0x0740(0x001A) MISSED OFFSET
	bool                                               bCanEverSkipProxyPrediction;                              // 0x075A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x075B(0x0001) MISSED OFFSET
	int                                                SkipProxyPredictionLOD;                                   // 0x075C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SkipProxySkydivePredictionDist;                           // 0x0760(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSkipProxyPredictionAfterSkydive;                         // 0x0764(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0765(0x0003) MISSED OFFSET
	struct FFindFloorResult                            LastFloor;                                                // 0x0768(0x0094) (Transient)
	unsigned char                                      UnknownData03[0xC];                                       // 0x07FC(0x000C) MISSED OFFSET
	float                                              SlowToCrouchTime;                                         // 0x0808(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x080C(0x0008) MISSED OFFSET
	float                                              PostCrouchSlowTime;                                       // 0x0814(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0818(0x0008) MISSED OFFSET
	struct FVector                                     SimulatedProxyVelocity;                                   // 0x0820(0x000C) (ZeroConstructor, IsPlainOldData)
	bool                                               bCanEverPowerSlide;                                       // 0x082C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x082D(0x0003) MISSED OFFSET
	float                                              PowerSlideTurnFrictionMinAngle;                           // 0x0830(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PowerSlideTurnFrictionMaxAngle;                           // 0x0834(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumStartPowerSlideSpeed;                              // 0x0838(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumPowerSlideSpeed;                                   // 0x083C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PowerSlideInitialSpeedBoost;                              // 0x0840(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PowerSlideLockoutTime;                                    // 0x0844(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumPowerSlideTime;                                    // 0x0848(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PowerSlideMaxStepHeight;                                  // 0x084C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0850(0x0010) MISSED OFFSET
	struct FInterpCurveFloat                           PowerSlideTurnDecelerationCurve;                          // 0x0860(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FInterpCurveFloat                           PowerSlideDecelerationCurve;                              // 0x0878(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              PowerSlideResistDeceleration;                             // 0x0890(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x14];                                      // 0x0894(0x0014) MISSED OFFSET
	float                                              FallAimForgivenessPeriod;                                 // 0x08A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallAimForgivenessEndTime;                                // 0x08AC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinWalkingAcceleration;                                   // 0x08B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSprintingSpeed;                                        // 0x08B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedProne;                                        // 0x08B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimOverShoulderSpeedModifier;                             // 0x08BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimDownSightsSpeedModifier;                               // 0x08C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HaulingSpeedModifier;                                     // 0x08C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StrafingSpeedFactor;                                      // 0x08C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ReverseSpeedFactor;                                       // 0x08CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWantsToSprint : 1;                                       // 0x08D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bSprintIsHeld : 1;                                        // 0x08D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bSprintIsToggledOn : 1;                                   // 0x08D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bSprintInterrupted : 1;                                   // 0x08D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bIsJumping : 1;                                           // 0x08D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bCachedCharacterAllowSprintingRightNow : 1;               // 0x08D0(0x0001)
	unsigned char                                      bCachedCharacterAllowPowerSlideRightNow : 1;              // 0x08D0(0x0001)
	unsigned char                                      UnknownData09[0x3];                                       // 0x08D1(0x0003) MISSED OFFSET
	float                                              CachedWeaponWalkSpeedModifier;                            // 0x08D4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ReducedJumpZVelocity;                                     // 0x08D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReducedJumpHeightWindow;                                  // 0x08DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bSprinting : 1;                                           // 0x08E0(0x0001)
	unsigned char                                      UnknownData10[0xF];                                       // 0x08E1(0x000F) MISSED OFFSET
	float                                              MinHardLandingHeight;                                     // 0x08F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HardLandingLockoutTime;                                   // 0x08F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FreefallLandingLockoutTime;                               // 0x08F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EKSCharacterAimMode                                AimState;                                                 // 0x08FC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x08FD(0x0003) MISSED OFFSET
	class AKSCharacterBase*                            KSCharacterOwner;                                         // 0x0900(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              MaxSprintingSwimSpeed;                                    // 0x0908(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSubmergedSwimSpeed;                                    // 0x090C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwimSurfaceAcceleration;                                  // 0x0910(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwimSubmergedAcceleration;                                // 0x0914(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDownedSwimSpeed;                                       // 0x0918(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwimStrafingSpeedFactor;                                  // 0x091C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwimReverseSpeedFactor;                                   // 0x0920(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwimZSpeed;                                            // 0x0924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwimZAcceleration;                                        // 0x0928(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SurfaceSwimDepth;                                         // 0x092C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SubmergedSwimDepth;                                       // 0x0930(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HardMaxSwimDepth;                                         // 0x0934(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallSpeedWaterDeflectionFactor;                           // 0x0938(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchToSwimDepth;                                        // 0x093C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNewMantleLogic;                                       // 0x0940(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0941(0x0007) MISSED OFFSET
	TArray<struct FMantleConfig>                       MantleConfigs;                                            // 0x0948(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData13[0xC];                                       // 0x0958(0x000C) MISSED OFFSET
	float                                              m_fLedgeGrabDistance;                                     // 0x0964(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fSprintLedgeGrabDistance;                               // 0x0968(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fLedgeGrabbableWallZ;                                   // 0x096C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fMaxLedgeCheckHeight;                                   // 0x0970(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fMinLedgeCheckHeight;                                   // 0x0974(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fSwimHeightBoost;                                       // 0x0978(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fLedgeGrabbableZ;                                       // 0x097C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fVaultZSpeed;                                           // 0x0980(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fEnhancedZSpeed;                                        // 0x0984(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fVaultLateralSpeed;                                     // 0x0988(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fVaultFacingThreshold;                                  // 0x098C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fVaultVerticalCheckInterval;                            // 0x0990(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fVaultHeadClearance;                                    // 0x0994(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fMantleDownDistance;                                    // 0x0998(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fVaultForwardDistance;                                  // 0x099C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fMantleMaxDistance;                                     // 0x09A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     m_vMantleLaunchVelocity;                                  // 0x09A4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fVaultErrorForgiveness;                                 // 0x09B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MantleStepHeightProxy;                                    // 0x09B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireJumpForVault;                                     // 0x09B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x09B9(0x0003) MISSED OFFSET
	float                                              MaximumVelocityPreserveHeight;                            // 0x09BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumSpeedForFromJumpMantles;                           // 0x09C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowMantleEarlyOutOnFire;                               // 0x09C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRestrictVaultingIntoCrouch;                              // 0x09C5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x2];                                       // 0x09C6(0x0002) MISSED OFFSET
	float                                              VaultFromGroundTraceHeightAdjust;                         // 0x09C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x38];                                      // 0x09CC(0x0038) MISSED OFFSET
	bool                                               bVaultDebugPrinting;                                      // 0x0A04(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x0A05(0x0003) MISSED OFFSET
	struct FMantleConfig                               CurrentMantleConfig;                                      // 0x0A08(0x00A8)
	unsigned char                                      UnknownData18[0x38];                                      // 0x0AB0(0x0038) MISSED OFFSET
	struct FInterpCurveFloat                           MantleClothSimCurve;                                      // 0x0AE8(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData19[0x10];                                      // 0x0B00(0x0010) MISSED OFFSET
	float                                              m_fPostSprintLockoutTime;                                 // 0x0B10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fRemainingPostSprintLockoutTime;                        // 0x0B14(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FreeFallClearanceHeight;                                  // 0x0B18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFreeFallSpeedZ;                                        // 0x0B1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultFreeFallSpeedZ;                                    // 0x0B20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFreeFallSpeedZ;                                        // 0x0B24(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFreeFallForwardSpeed;                                  // 0x0B28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultFreeFallForwardSpeed;                              // 0x0B2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFreeFallForwardSpeed;                                  // 0x0B30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDiveForwardSpeed;                                      // 0x0B34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFreeFallLateralSpeed;                                  // 0x0B38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFreeFallLateralAcceleration;                           // 0x0B3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFreeFallReverseAcceleration;                           // 0x0B40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFallAirControl;                                       // 0x0B44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFallDelay;                                            // 0x0B48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInFreeFall;                                              // 0x0B4C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bWingsuitHasBeenDisabled;                                 // 0x0B4D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData20[0x2];                                       // 0x0B4E(0x0002) MISSED OFFSET
	float                                              FreeFallBrakingAcceleration;                              // 0x0B50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFallDiveThresholdAngle;                               // 0x0B54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFallDiveForwardInputThreshold;                        // 0x0B58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWantsToEndFreeFallEarly;                                 // 0x0B5C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData21[0x13];                                      // 0x0B5D(0x0013) MISSED OFFSET
	bool                                               bIsFreeFallDiving;                                        // 0x0B70(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0B71(0x0003) MISSED OFFSET
	struct FRotator                                    LastYawRotation;                                          // 0x0B74(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FreeFallYawAccumDeltaTime;                                // 0x0B80(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FreeFallYawTotalDeltaTime;                                // 0x0B84(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FreeFallDelayProgress;                                    // 0x0B88(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       FreeFallHeightActor;                                      // 0x0B8C(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseFreeFallStartHeight;                                  // 0x0B94(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0B95(0x0003) MISSED OFFSET
	float                                              FreeFallNetSmoothTime;                                    // 0x0B98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostFreeFallNetSmoothTimeRecoveryRate;                    // 0x0B9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0x1];                                       // 0x0BA0(0x0001) MISSED OFFSET
	bool                                               bWingsuitControls;                                        // 0x0BA1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData25[0x2];                                       // 0x0BA2(0x0002) MISSED OFFSET
	float                                              WingsuitGlideDragCoefficient;                             // 0x0BA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WingsuitDiveDragCoefficient;                              // 0x0BA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WingsuitGlideSurfaceArea;                                 // 0x0BAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WingsuitDiveSurfaceArea;                                  // 0x0BB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCachedCharacterAllowDodgeRollRightNow : 1;               // 0x0BB4(0x0001)
	unsigned char                                      bStartDodgeRoll : 1;                                      // 0x0BB4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData26[0x3];                                       // 0x0BB5(0x0003) MISSED OFFSET
	bool                                               bWantsToDodgeRollOnLanding;                               // 0x0BB8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData27[0x3];                                       // 0x0BB9(0x0003) MISSED OFFSET
	float                                              MaxDodgeRollSpeed;                                        // 0x0BBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DodgeRollDistance;                                        // 0x0BC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanDodgeRollFromAimDownSights;                           // 0x0BC4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x0BC5(0x0003) MISSED OFFSET
	float                                              DodgeRollCooldownTime;                                    // 0x0BC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData29[0x4];                                       // 0x0BCC(0x0004) MISSED OFFSET
	float                                              DodgeRollForgivenessPeriod;                               // 0x0BD0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DodgeRollForgivenessEndTime;                              // 0x0BD4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData30[0x14];                                      // 0x0BD8(0x0014) MISSED OFFSET
	float                                              DodgeRollAcceleration;                                    // 0x0BEC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BrakingDecelerationPostDodgeRoll;                         // 0x0BF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableBrakingDecelerationPostDodgeRoll;                  // 0x0BF4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x3];                                       // 0x0BF5(0x0003) MISSED OFFSET
	struct FInterpCurveFloat                           DodgeRollVelocityCurve;                                   // 0x0BF8(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FInterpCurveFloat                           DodgeRollClothSimCurve;                                   // 0x0C10(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bCachedCharacterAllowLungeRightNow : 1;                   // 0x0C28(0x0001)
	unsigned char                                      UnknownData32[0x3];                                       // 0x0C29(0x0003) MISSED OFFSET
	float                                              CurrentLungeDistance;                                     // 0x0C2C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxLungeDistance;                                         // 0x0C30(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData33[0x4];                                       // 0x0C34(0x0004) MISSED OFFSET
	class AActor*                                      LungeTarget;                                              // 0x0C38(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CurrentLungeDuration;                                     // 0x0C40(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxLungeDuration;                                         // 0x0C44(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LungeAcceleration;                                        // 0x0C48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxLungeSpeed;                                            // 0x0C4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LungeStopLateralDistance;                                 // 0x0C50(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LungeStopVerticalDistance;                                // 0x0C54(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LungeAirControl;                                          // 0x0C58(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData34[0x4];                                       // 0x0C5C(0x0004) MISSED OFFSET
	class USplineComponent*                            FlightRecoverySplineComponent;                            // 0x0C60(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData35[0x4];                                       // 0x0C68(0x0004) MISSED OFFSET
	float                                              FlightRecoverySpeed;                                      // 0x0C6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bCachedCharacterAllowAbilityMoveRightNow : 1;             // 0x0C70(0x0001)
	unsigned char                                      bStartAbilityMovement : 1;                                // 0x0C70(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData36[0x7];                                       // 0x0C71(0x0007) MISSED OFFSET
	unsigned char                                      bCachedCharacterAllowZipLineRightNow : 1;                 // 0x0C78(0x0001)
	unsigned char                                      UnknownData37[0x7];                                       // 0x0C79(0x0007) MISSED OFFSET
	bool                                               bZiplineEndsEnforceDirection;                             // 0x0C80(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowDodgeRollIntoZipline;                               // 0x0C81(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireJumpForZipline;                                   // 0x0C82(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireDownwardMovementToZipline;                        // 0x0C83(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowZiplineReverseViaDodgeRoll;                         // 0x0C84(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData38[0x3];                                       // 0x0C85(0x0003) MISSED OFFSET
	float                                              ZiplineAcceleration;                                      // 0x0C88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData39[0x4];                                       // 0x0C8C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCharacterMovementComponent");
		return ptr;
	}


	void ResetPostFireSprintLockout();
	bool IsZipLining();
	bool IsSprintingWithVelocity();
	bool IsSprinting();
	bool IsInPowerSlide();
	bool IsFlightRecovery();
	bool IsDowned();
	bool IsDodgeRolling();
	bool IsAimingOverShoulder();
	bool IsAimingDownSights();
	bool IsAimingAlternate();
	bool IsAiming();
	bool GetWantsToSprint();
	bool GetWantsToPowerSlide();
	float GetProratedMaxSpeed();
	struct FVector FindPointAboveWater(struct FVector* TestPoint);
	void ClientAdjustPositionVault(float* Timestamp, struct FVector* NewLoc, struct FVector* NewVel, class UPrimitiveComponent** NewBase, struct FName* NewBaseBoneName, bool* bHasBase, bool* bBaseRelativePosition, struct FVector* NewPreVaultLocation);
	void ClientAdjustPositionDodgeRoll(float* Timestamp, struct FVector* NewLoc, struct FVector* NewVel, class UPrimitiveComponent** NewBase, struct FName* NewBaseBoneName, bool* bHasBase, bool* bBaseRelativePosition, float* NewDodgeDuration, float* NewDodgeDirection);
};


// Class Killstreak.KSSkeletalMeshComponent
// 0x0070 (0x0DE0 - 0x0D70)
class UKSSkeletalMeshComponent : public USkinnableMergedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0D70(0x0018) MISSED OFFSET
	bool                                               bForceTextureResidentFlagOnAllTextures;                   // 0x0D88(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x17];                                      // 0x0D89(0x0017) MISSED OFFSET
	float                                              TeleportDistanceDeltaThreshold;                           // 0x0DA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C];                                      // 0x0DA4(0x001C) MISSED OFFSET
	bool                                               bEnableDedicatedServerRequiredBones;                      // 0x0DC0(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0DC1(0x0007) MISSED OFFSET
	TArray<struct FName>                               RequiredDedicatedServerBoneNames;                         // 0x0DC8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0DD8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSkeletalMeshComponent");
		return ptr;
	}


	void SetTeleportDistanceDeltaThreshold(float* Threshold);
	void SetForceTextureResidentFlag(bool* bEnable);
	float GetTeleportDistanceDeltaThreshold();
	bool GetForceTextureResidentFlag();
};


// Class Killstreak.KSCharacterSkeletalMeshComponent
// 0x0000 (0x0DE0 - 0x0DE0)
class UKSCharacterSkeletalMeshComponent : public UKSSkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCharacterSkeletalMeshComponent");
		return ptr;
	}

};


// Class Killstreak.KSCheatComponent
// 0x0048 (0x0140 - 0x00F8)
class UKSCheatComponent : public UPGame_CheatComponent
{
public:
	float                                              WeaponStatDisplayTime;                                    // 0x00F8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              DifficultyLevelsDisplayTime;                              // 0x00FC(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      r_bNoCooldown : 1;                                        // 0x0100(0x0001) (Net)
	unsigned char                                      r_bNoEnergyUsage : 1;                                     // 0x0100(0x0001) (Net)
	unsigned char                                      r_bNoDamageTaken : 1;                                     // 0x0100(0x0001) (Net)
	unsigned char                                      r_CanViewHealth : 1;                                      // 0x0100(0x0001) (Net)
	unsigned char                                      r_CanViewLocation : 1;                                    // 0x0100(0x0001) (Net)
	unsigned char                                      r_HudVisible : 1;                                         // 0x0100(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
	TArray<struct FString>                             CachedWeaponStats;                                        // 0x0108(0x0010) (ZeroConstructor, Transient)
	float                                              WeaponDisplayStartTime;                                   // 0x0118(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	TArray<struct FString>                             CachedDifficultyLevels;                                   // 0x0120(0x0010) (Net, ZeroConstructor, Transient)
	float                                              DifficultyLevelsDisplayStartTime;                         // 0x0130(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   BaseDrawPosition;                                         // 0x0134(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x013C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCheatComponent");
		return ptr;
	}


	void WarpZ(float* Z);
	void WarpToSpawn();
	void Warp(float* X, float* Y, float* Z);
	void ToggleWeaponDebug();
	void ToggleHud();
	void ToggleGamepadAimDebug();
	void ToggleAdvancedCombatLog();
	void TestPreviewActor(struct FString* JobName, int* PositionIndex);
	void TakeDamage(struct FString* WeaponName, float* Amount, bool* Head);
	void Suicide();
	void Spectate();
	void Spawn(struct FString* BotName, int* teamNum, int* Count, float* Offset);
	void ShowWeaponStats();
	void ShowLocation(bool* Visible);
	void ShowKillCamWorld(float* Duration);
	void ShowHealth(bool* Visible);
	void ShowDifficulties();
	void ShowBots(bool* Show);
	void SetTimeLeft(float* Seconds);
	void SetTeam(int* Team);
	void SetGroundSpeed(float* Speed);
	void SetDifficulty(int* TeamNumber, int* DifficultyIndex);
	void ServerWarpZ(float* Z);
	void ServerWarpToSpawn();
	void ServerWarp(float* X, float* Y, float* Z);
	void ServerToggleHud();
	void ServerToggleCombatLog();
	void ServerTakeDamage(struct FString* WeaponName, float* Amount, bool* Head);
	void ServerSuicide();
	void ServerSpectate();
	void ServerSpawn(struct FString* BotName, int* teamNum, int* Count, float* Offset);
	void ServerShowLocation(bool* Visible);
	void ServerShowHealth(bool* Visible);
	void ServerShowDifficulties();
	void ServerShowBots(bool* Show);
	void ServerSetTimeLeft(float* Seconds);
	void ServerSetTeam(int* Team);
	void ServerSetGroundSpeed(float* Speed);
	void ServerSetDifficulty(int* TeamNumber, int* DifficultyIndex);
	void ServerRemoveFromLoadout(struct FString* ItemName);
	void ServerRemoveAllMods();
	void ServerQuickEndGame(bool* bWin);
	void ServerInvisMe(bool* Invis);
	void ServerInstantReplay(float* TimeToReplay, float* Duration);
	void ServerInfiniteAmmo(bool* Infinite);
	void ServerGod();
	void ServerGiveKSPoints(int* Amount);
	void ServerGiveAsync(struct FString* ItemName);
	void ServerGiveAllKSPoints(int* Amount);
	void ServerGive(struct FString* ItemName);
	void ServerEnableKillCam();
	void ServerDrop(struct FString* ItemName);
	void ServerDisableAFKTimer();
	void ServerCharReset();
	void ServerChangeCash(int* CashDelta);
	void ServerBotGodMode(bool* Enable);
	void ServerAttach(struct FString* AttachmentName);
	void ServerAdjustDifficulty(int* Amount);
	void ServerAddToLoadout(struct FString* ItemName);
	void ServerAddAttachmentToLoadout(struct FString* ItemName, struct FString* AttachmentName);
	void RemoveFromLoadout(struct FString* ItemName);
	void RemoveAllMods();
	void QuickEndGame(bool* bWin);
	void QEG(bool* bWin);
	void OnRep_HudVisible();
	void OnRep_CanViewLocation();
	void OnRep_CanViewDebugHealth();
	void NextPerfCaptureCamera();
	void InvisMe(bool* Invis);
	void InstantReplay(float* TimeToReplay, float* Duration);
	void InfiniteAmmo(bool* Infinite);
	void God();
	void GiveKSPoints(int* Amount);
	void GiveAsync(struct FString* ItemName);
	void GiveAllKSPoints(int* Amount);
	void Give(struct FString* ItemName);
	void EnableSound();
	void EnableKillCam();
	void Drop(struct FString* ItemName);
	void DownSelf();
	void DisableSound();
	void DisableAFKTimer();
	void DebugThreatLevels(bool* Show);
	void CharReset();
	void ChangeCash(int* CashDelta);
	void BotGodMode(bool* Enable);
	void Attach(struct FString* AttachmentName);
	void AdjustDifficulty(int* Amount);
	void AddToLoadout(struct FString* ItemName);
	void AddAttachmentToLoadout(struct FString* ItemName, struct FString* AttachmentName);
};


// Class Killstreak.KSCircleDeadZoneFilter
// 0x0008 (0x0038 - 0x0030)
class UKSCircleDeadZoneFilter : public UKSAnalogStickFilter
{
public:
	float                                              DeadZoneRadius;                                           // 0x0030(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              CardinalDeadZoneHalfWidth;                                // 0x0034(0x0004) (ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCircleDeadZoneFilter");
		return ptr;
	}

};


// Class Killstreak.KSCombatLogComponent
// 0x0168 (0x0260 - 0x00F8)
class UKSCombatLogComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00F8(0x0018) MISSED OFFSET
	struct FCombatSummaryLog                           CombatLog;                                                // 0x0110(0x00B8) (Net)
	bool                                               bDebugLoggingEnabled;                                     // 0x01C8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01C9(0x0003) MISSED OFFSET
	struct FLinearColor                                StandardEventColor;                                       // 0x01CC(0x0010) (ZeroConstructor, Config, IsPlainOldData)
	struct FLinearColor                                DownEventColor;                                           // 0x01DC(0x0010) (ZeroConstructor, Config, IsPlainOldData)
	struct FLinearColor                                KillEventColor;                                           // 0x01EC(0x0010) (ZeroConstructor, Config, IsPlainOldData)
	struct FLinearColor                                InitEventColor;                                           // 0x01FC(0x0010) (ZeroConstructor, Config, IsPlainOldData)
	float                                              EventDisplayTime;                                         // 0x020C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               CanPrintEventsToLog;                                      // 0x0210(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               CanPrintEventsToScreen;                                   // 0x0211(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0212(0x0002) MISSED OFFSET
	struct FVector2D                                   BaseLogPosition;                                          // 0x0214(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FString                                     InitMessage;                                              // 0x0220(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0230(0x0028) MISSED OFFSET
	float                                              CreationTime;                                             // 0x0258(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x025C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCombatLogComponent");
		return ptr;
	}


	void ToggleDebugLogging();
	void DrawToDebugCanvas(class UCanvas** DebugCanvas, class APlayerController** LocalController);
	void CombatSummaryRecieved(struct FAdvancedCombatSummary* CombatSummary);
};


// Class Killstreak.KSCombatLogVisualizer
// 0x0050 (0x0390 - 0x0340)
class AKSCombatLogVisualizer : public APGame_CombatLogVisualizer
{
public:
	TMap<struct FString, struct FCharacterArray>       Characters;                                               // 0x0340(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCombatLogVisualizer");
		return ptr;
	}

};


// Class Killstreak.KSControllerInterface
// 0x0000 (0x0028 - 0x0028)
class UKSControllerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSControllerInterface");
		return ptr;
	}


	void RecordDamageDealt(float* ProratedDamage, float* ActualDamage, class UDamageType** DamageType, class AActor** DamagedActor, class AActor** DamageCauser);
	int GetSkinLevel();
	int GetSkinId();
	class AKSPlayerState* GetKSPlayerState();
	class AKSCharacterBase* GetKSCharacter();
	class AController* GetController();
	class UKSCheatComponent* GetCheatComponent();
	int GetBotId();
};


// Class Killstreak.KSControlPoint
// 0x0048 (0x0488 - 0x0440)
class AKSControlPoint : public AKSObjectiveBase
{
public:
	class AKSTeamState*                                OwningTeam;                                               // 0x0440(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class AKSTeamState*                                CapturingTeam;                                            // 0x0448(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              CaptureProgress;                                          // 0x0450(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      NumTeamMembersCapturing;                                  // 0x0454(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	float                                              SimulatedProgressRate;                                    // 0x0458(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                FavoredSide;                                              // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUsed;                                                    // 0x0460(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	TArray<class UPrimitiveComponent*>                 RegisteredPawnOverlapComponents;                          // 0x0468(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AKSCharacterBase*>                    OverlappingPawns;                                         // 0x0478(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSControlPoint");
		return ptr;
	}


	void RemovePrimitiveToPawnOverlapCheck(class UPrimitiveComponent** InPrimitive);
	void OnTeamSidesFlipped();
	void OnEndOverlap(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void AddPrimitiveToPawnOverlapCheck(class UPrimitiveComponent** InPrimitive);
};


// Class Killstreak.KSCustomApparelComponent
// 0x0018 (0x0110 - 0x00F8)
class UKSCustomApparelComponent : public UActorComponent
{
public:
	class AKSCharacter*                                CharacterOwner;                                           // 0x00F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UKSApparelAsset_CustomComponent*             _ApparelAsset;                                            // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	class UMultiSkinObject*                            _SkinObject;                                              // 0x0108(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSCustomApparelComponent");
		return ptr;
	}


	class UMultiSkinObject* GetSkinObject();
	class AKSCharacter* GetCharacterOwner();
	class UKSApparelAsset_CustomComponent* GetApparelAsset();
	void BlueprintFinishedInitialization();
};


// Class Killstreak.KSDamageable
// 0x0000 (0x0028 - 0x0028)
class UKSDamageable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageable");
		return ptr;
	}


	void ReportDamageByInstigator(struct FCombatEventInfo* DamageInfo);
	EHitLocationType GetHitLocationTypeFromBoneName(struct FName* BoneName);
	bool DoesBoneAllowHeadshotPassthrough(struct FName* BoneName);
};


// Class Killstreak.KSDamageTypeBase
// 0x0088 (0x00C8 - 0x0040)
class UKSDamageTypeBase : public UDamageType
{
public:
	EDamageCategory                                    _DamageCategory;                                          // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	class UParticleSystem*                             HitPawnEffect;                                            // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               HitBodyAudioEvent;                                        // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               HitHeadAudioEvent;                                        // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               HitByAudioEvent;                                          // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EffectAttachPointName;                                    // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPreProcessResistable;                                    // 0x0070(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUIDisplayable;                                           // 0x0071(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCountTowardsTrackedFriendlyFireDamage;                   // 0x0072(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDoFriendlyDamageWithReverseFriendlyFire;                 // 0x0073(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<class UKSPlayerMod*>                        DebuffsAppliedOnDamage;                                   // 0x0078(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FlinchDuration;                                           // 0x0088(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchRecoveryRate;                                       // 0x008C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchMinHeightBody;                                      // 0x0090(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchMaxHeightBody;                                      // 0x0094(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchMinHeightHead;                                      // 0x0098(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchMaxHeightHead;                                      // 0x009C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGameplayTagContainer                       DamageTags;                                               // 0x00A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              ImpulseMagnitudePerDamage;                                // 0x00C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeBase");
		return ptr;
	}


	void STATIC_GetDefaultObjectPropertiesFromDamageType(class UClass** DamageTypeClass, class UParticleSystem** OutHitPawnEffect, class UAkAudioEvent** OutHitBodyAudioEvent, class UAkAudioEvent** OutHitHeadAudioEvent, class UAkAudioEvent** OutHitByAudioEvent);
};


// Class Killstreak.KSDamageTypeEMP
// 0x0008 (0x00D0 - 0x00C8)
class UKSDamageTypeEMP : public UKSDamageTypeBase
{
public:
	float                                              EMPDuration;                                              // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeEMP");
		return ptr;
	}

};


// Class Killstreak.KSDamageTypeFire
// 0x0008 (0x00D0 - 0x00C8)
class UKSDamageTypeFire : public UKSDamageTypeBase
{
public:
	float                                              FireDuration;                                             // 0x00C8(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeFire");
		return ptr;
	}

};


// Class Killstreak.KSDamageTypeFlashBang
// 0x0008 (0x00D0 - 0x00C8)
class UKSDamageTypeFlashBang : public UKSDamageTypeBase
{
public:
	float                                              EffectiveAngle;                                           // 0x00C8(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeFlashBang");
		return ptr;
	}

};


// Class Killstreak.KSDamageTypeMaxHealth
// 0x0000 (0x00C8 - 0x00C8)
class UKSDamageTypeMaxHealth : public UKSDamageTypeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeMaxHealth");
		return ptr;
	}

};


// Class Killstreak.KSDamageTypeReverseFriendly
// 0x0000 (0x00C8 - 0x00C8)
class UKSDamageTypeReverseFriendly : public UKSDamageTypeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeReverseFriendly");
		return ptr;
	}

};


// Class Killstreak.KSDamageTypeSonar
// 0x0008 (0x00D0 - 0x00C8)
class UKSDamageTypeSonar : public UKSDamageTypeBase
{
public:
	bool                                               bRevealOnly;                                              // 0x00C8(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	float                                              RevealDuration;                                           // 0x00CC(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeSonar");
		return ptr;
	}

};


// Class Killstreak.KSDamageTypeStuck
// 0x0000 (0x00C8 - 0x00C8)
class UKSDamageTypeStuck : public UKSDamageTypeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeStuck");
		return ptr;
	}

};


// Class Killstreak.KSDamageTypeStun
// 0x0008 (0x00D0 - 0x00C8)
class UKSDamageTypeStun : public UKSDamageTypeBase
{
public:
	float                                              StunDuration;                                             // 0x00C8(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDamageTypeStun");
		return ptr;
	}

};


// Class Killstreak.KSWeaponTargetingModule
// 0x0070 (0x0098 - 0x0028)
class UKSWeaponTargetingModule : public UObject
{
public:
	struct FTargetingModuleTickFunction                TargetingTick;                                            // 0x0028(0x0058) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
	class UKSWeaponComponent*                          OwningWeaponComponent;                                    // 0x0088(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class AKSCharacter*                                OwningCharacter;                                          // 0x0090(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponTargetingModule");
		return ptr;
	}


	void TickTargeting(float* DeltaSeconds);
	bool IsTargetingModeEnabled();
	bool IsAimedAtEnemy();
	class UKSWeaponComponent* GetWeaponComponent();
	class AKSCharacter* GetOwningCharacter();
	void ExitTargetingMode();
	void EnterTargetingMode();
};


// Class Killstreak.KSDefaultAimTargetingModule
// 0x0020 (0x00B8 - 0x0098)
class UKSDefaultAimTargetingModule : public UKSWeaponTargetingModule
{
public:
	float                                              WallMarkerMaxDistance;                                    // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBlockedByWall;                                           // 0x009C(0x0001) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	bool                                               bWallMarkerActive;                                        // 0x009D(0x0001) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009E(0x0002) MISSED OFFSET
	struct FVector                                     WallMarkerWorldLocation;                                  // 0x00A0(0x000C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	bool                                               bAimedAtEnemy;                                            // 0x00AC(0x0001) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	class UKSWeaponAsset_WithProjectile*               ProjWeaponAsset;                                          // 0x00B0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDefaultAimTargetingModule");
		return ptr;
	}


	bool IsWallMarkerActive(struct FVector* WallLocation);
	bool IsCurrentlyBlocked();
};


// Class Killstreak.KSMapPoint
// 0x0038 (0x0368 - 0x0330)
class AKSMapPoint : public AActor
{
public:
	struct FGameplayTagContainer                       MapPointTypes;                                            // 0x0330(0x0020) (Edit)
	TArray<int>                                        ValidSides;                                               // 0x0350(0x0010) (Edit, ZeroConstructor)
	bool                                               bShouldCrouch;                                            // 0x0360(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0361(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMapPoint");
		return ptr;
	}


	bool ShouldCrouch();
	bool MatchesTags(struct FGameplayTagContainer* InMapPointTypes);
	bool MatchesTag(struct FGameplayTag* InMapPointType);
	bool IsFriendly(class AActor** InActor);
	bool IsAvailable(class AActor** InActor);
	bool IsActive();
};


// Class Killstreak.KSDefensePoint
// 0x0020 (0x0388 - 0x0368)
class AKSDefensePoint : public AKSMapPoint
{
public:
	class AKSObjectiveBase*                            RelevantObjective;                                        // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              AssignedDefenders;                                        // 0x0370(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0380(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDefensePoint");
		return ptr;
	}


	void RelevantObjectiveUpdated(class AKSObjectiveBase** Objective);
	struct FVector GetTargetDefensePoint();
};


// Class Killstreak.KSDeployable
// 0x0000 (0x0028 - 0x0028)
class UKSDeployable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDeployable");
		return ptr;
	}


	bool ShouldSetFriendlyOutlineOnRegister();
	void SetOutlineColor(bool* Enabled, struct FKSOutlineParameters* OutlineParams, int* Color);
};


// Class Killstreak.KSDestroyableHazard
// 0x0000 (0x0028 - 0x0028)
class UKSDestroyableHazard : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDestroyableHazard");
		return ptr;
	}

};


// Class Killstreak.KSDestroyableHazardComponent
// 0x0020 (0x0118 - 0x00F8)
class UKSDestroyableHazardComponent : public UActorComponent
{
public:
	float                                              MinPerceptionValue;                                       // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPerceptionValue;                                       // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomizedPerceptionValue;                                // 0x0100(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldReactWithEMP;                                       // 0x0104(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldReactWithGunshot;                                   // 0x0105(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0106(0x0002) MISSED OFFSET
	unsigned char                                      UnknownData01[0x10];                                      // 0x0106(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSDestroyableHazardComponent.ActorsSeenBy

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDestroyableHazardComponent");
		return ptr;
	}


	bool ShouldFireAt();
	bool ShouldEMP();
};


// Class Killstreak.KSDestructibleBase
// 0x0170 (0x04A0 - 0x0330)
class AKSDestructibleBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET
	bool                                               bRenderTrueCollisionUntilDestruction;                     // 0x0338(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0339(0x0007) MISSED OFFSET
	class USceneComponent*                             SceneRoot;                                                // 0x0340(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UDestructibleComponent*                      VisualMesh;                                               // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        TrueCollision;                                            // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               SpeedOverlap;                                             // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bAllowDestructibleMeshSimulation;                         // 0x0360(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowPlayerToWalkOnSurface;                              // 0x0361(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowDestructionAudio;                                   // 0x0362(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0363(0x0005) MISSED OFFSET
	class UAkAudioEvent*                               DefaultDestructionEvent;                                  // 0x0368(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSpawnBreakParticleAtActorLocation;                       // 0x0370(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0371(0x0007) MISSED OFFSET
	class UParticleSystem*                             BreakParticles;                                           // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ImpactParticles;                                          // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             FakeHitDecalParticle;                                     // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CharacterSpeedOverlapCameraShake;                         // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnDestructibleDestroyed;                                  // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxHealth;                                                // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Health;                                                   // 0x03AC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LocalHealth;                                              // 0x03B0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bResetOnRoundChange;                                      // 0x03B4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowsWeaponPenetration;                                 // 0x03B5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBreakWithSpeed;                                       // 0x03B6(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x03B7(0x0001) MISSED OFFSET
	float                                              SpeedBreakThreshold;                                      // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTransparentDestructible;                                 // 0x03BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x03BD(0x0003) MISSED OFFSET
	TMap<EDamageCategory, float>                       DamageTypeMultipliers;                                    // 0x03C0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              BreakingDamage;                                           // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BreakingImpulse;                                          // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseRadialDestruction;                                    // 0x0418(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0419(0x0003) MISSED OFFSET
	float                                              BreakingRadius;                                           // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ImpactImpulseOffset;                                      // 0x0420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreCharacterVerticalSpeed;                            // 0x0424(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0425(0x0003) MISSED OFFSET
	float                                              BadDestroyCheckTime;                                      // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EventlessDestroyWaitTime;                                 // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               MeshDestroyed;                                            // 0x0430(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0431(0x0007) MISSED OFFSET
	class UPhysicalMaterial*                           PhysicalMaterialOverride;                                 // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDestructibleMesh*                           MeshAsset;                                                // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LastHitLocation;                                          // 0x0448(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LastHitDirection;                                         // 0x0454(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LastHitNormal;                                            // 0x0460(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x046C(0x0004) MISSED OFFSET
	TArray<class UParticleSystemComponent*>            FakeHitDecals;                                            // 0x0470(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData10[0x10];                                      // 0x0480(0x0010) MISSED OFFSET
	class UKSItemStimuliSourceComponent*               _StimuliSourceComponent;                                  // 0x0490(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDestructibleBase");
		return ptr;
	}


	void UndoBadDestroy();
	void SpeedGateOverlap(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void SetupPreBroken();
	void ResetDestructible();
	int PostDestructionEvent(class UAkAudioEvent** InEvent);
	void OnRoundChange(struct FRoundInitState* RoundInitState);
	void OnRep_Health();
	void OnDestructionChange(bool* Destroyed, bool* bInitialSetup);
	void OnDamageEvent(float* NewHealth, struct FVector* HitLocation, struct FVector* HitDirection, struct FVector* HitNormal, bool* FromServer);
	float GetMaxHealth();
	float GetCurrentHealth();
	void BlueprintPrepareKillCamPlayback();
};


// Class Killstreak.KSDropLocation
// 0x0020 (0x0388 - 0x0368)
class AKSDropLocation : public AKSMapPoint
{
public:
	class AKSWayPointSet*                              _WayPointSet;                                             // 0x0368(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ReverseWayPointSetDirection;                              // 0x0370(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	float                                              FlightDistanceModifier;                                   // 0x0374(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FreefallXYDistance;                                       // 0x0378(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FreefallHeight;                                           // 0x037C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0380(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDropLocation");
		return ptr;
	}


	bool ShouldReverseWayPointSetDirection();
	void IncrementSelectionCount();
	void HandleRoundSetup(struct FRoundInitState* RoundInitState);
	class AKSWayPointSet* GetWayPointSet();
	TArray<int> GetValidSides();
	struct FVector GetTargetDropLocation();
	int GetNumTimesSelected();
	float GetFreefallXYDistance();
	float GetFreefallHeight();
	float GetFlightDistanceModifier();
};


// Class Killstreak.KSDropShipLocation
// 0x0030 (0x0360 - 0x0330)
class AKSDropShipLocation : public AActor
{
public:
	class UClass*                                      DropShopClass;                                            // 0x0330(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LootSiteGroup;                                            // 0x0338(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	class AActor*                                      SpawnedDropShip;                                          // 0x0340(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBillboardComponent*                         GameEndSpawn;                                             // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         GameEndTarget;                                            // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         GameStartLocation;                                        // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDropShipLocation");
		return ptr;
	}


	void OnDropShipSpawned();
};


// Class Killstreak.KSDynamicMaskComponent
// 0x0040 (0x0138 - 0x00F8)
class UKSDynamicMaskComponent : public UActorComponent
{
public:
	class UTextureRenderTarget2D*                      DynamicMaskRenderTarget;                                  // 0x00F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                TargetDimPixels;                                          // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                EmptyColor;                                               // 0x0104(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                FillColor;                                                // 0x0114(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	class USceneComponent*                             ConversionBasisComponent;                                 // 0x0128(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              WorldToTargetScaleX;                                      // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WorldToTargetScaleY;                                      // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSDynamicMaskComponent");
		return ptr;
	}


	void Wipe();
	struct FColor GetColorAtPosition(struct FVector2D* Position);
	void DrawDodecagon(struct FVector2D* Position, float* Radius);
	void DrawBox(struct FVector2D* Position, struct FVector2D* Dimensions);
	struct FVector2D ConvertToTargetFromWorld(struct FVector* WorldSpace);
};


// Class Killstreak.KSEmote
// 0x0088 (0x01E0 - 0x0158)
class UKSEmote : public UKSItem
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0158(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSEmote.EmoteInstanceClass
	unsigned char                                      UnknownData01[0x28];                                      // 0x0180(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSEmote.EmoteCosmeticComponentClass
	TArray<struct FSoftDataTableInfo>                  AssetDataTables;                                          // 0x01A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               ApparelObjectsToInfluence;                                // 0x01B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              GlobalEmoteCooldownTime;                                  // 0x01C8(0x0004) (Edit, ZeroConstructor, Config, EditConst, GlobalConfig, IsPlainOldData)
	EInterruptNotifyBehaviorType                       _InterruptNotifyBehavior;                                 // 0x01CC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01CD(0x0003) MISSED OFFSET
	float                                              EmoteIsPlayingTimeout;                                    // 0x01D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FKSEmoteInterruptRules                      _InterruptRules;                                          // 0x01D4(0x0004) (Edit, DisableEditOnInstance)
	bool                                               bLockPawnRotationWhilePlaying;                            // 0x01D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EKSEmotion                                         _Emotion;                                                 // 0x01D9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x01DA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEmote");
		return ptr;
	}


	bool ShouldPreventPlay(EKSEmoteInterruptReason* InReason);
	bool ShouldInterrupt(EKSEmoteInterruptReason* InReason);
	bool GetLockPawnRotationWhilePlaying();
	EKSEmotion GetEmotionToApply();
	void GetEmoteInstanceClass();
	void GetEmoteCosmeticClass();
};


// Class Killstreak.KSEquipmentCosmeticComponent
// 0x0060 (0x0158 - 0x00F8)
class UKSEquipmentCosmeticComponent : public UActorComponent
{
public:
	bool                                               bHasBeenUnequipped;                                       // 0x00F8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET
	TScriptInterface<class UKSEquipmentContainerOwner> _EquipmentContainerOwner;                                 // 0x0100(0x0010) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	uint16_t                                           EquipmentId;                                              // 0x0110(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0112(0x0002) MISSED OFFSET
	struct FGameplayTag                                EquipPoint;                                               // 0x0114(0x0008) (Edit, Net, DisableEditOnTemplate, EditConst)
	bool                                               bNoEquipPoint;                                            // 0x011C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	TScriptInterface<class USkinTagAssetInterface>     SkinTagAssetOwner;                                        // 0x0120(0x0010) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0130(0x0008) MISSED OFFSET
	class AKSCharacter*                                CharacterOwner;                                           // 0x0138(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0140(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEquipmentCosmeticComponent");
		return ptr;
	}


	void OnRep_EquipPoint();
	void OnRep_EquipmentId();
	bool IsOwnerDeadOrDestroyed();
	bool IsLocallyViewed();
	bool IsLocallyManaged();
	bool IsInAction();
	struct FGameplayTag GetEquipPoint();
	class UKSCharacterAnimInst* GetCharAnimInstance();
	class AKSCharacter* GetCharacterOwner();
	class USkeletalMeshComponent* GetCharacterMesh();
	void BlueprintOwnerSkinTagContainerChanged();
};


// Class Killstreak.KSEmoteCosmeticComponent
// 0x00B8 (0x0210 - 0x0158)
class UKSEmoteCosmeticComponent : public UKSEquipmentCosmeticComponent
{
public:
	unsigned char                                      PawnRotationLockId;                                       // 0x0158(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                EmotionInstanceId;                                        // 0x015C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSEmote*                                    EmoteAsset;                                               // 0x0160(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	uint16_t                                           PlayTicker;                                               // 0x0168(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x016A(0x0006) MISSED OFFSET
	class UMultiSkinObject*                            _SkinObject;                                              // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDynamicSkinTable*                           _SkinTable;                                               // 0x0178(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsInitialized;                                           // 0x0180(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsPlaying;                                               // 0x0181(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xE];                                       // 0x0182(0x000E) MISSED OFFSET
	struct FKSEmoteInterrupTickFunction                InterruptTick;                                            // 0x0190(0x0058) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x28];                                      // 0x01E8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEmoteCosmeticComponent");
		return ptr;
	}


	void OnRep_PlayTicker();
	void OnRep_EmoteAsset();
	void OnInitialize();
	void MarkStopped();
	void MarkPlaying();
	bool IsPlaying();
	bool IsInitialized();
	class UMultiSkinObject* GetSkinObject();
	class UKSEmote* GetEmoteAsset();
	void BlueprintPlayEmote();
	void BlueprintInterruptEmote(EKSEmoteInterruptReason* Reason);
};


// Class Killstreak.KSEmoteCosmeticComponent_Spray
// 0x0018 (0x0228 - 0x0210)
class UKSEmoteCosmeticComponent_Spray : public UKSEmoteCosmeticComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0210(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEmoteCosmeticComponent_Spray");
		return ptr;
	}


	void NetMulticastPlaySpray(struct FVector* SprayLocation, struct FRotator* SprayRotation, class UPrimitiveComponent** SprayTarget);
	void BlueprintPlaySpray(struct FVector* SprayLocation, struct FRotator* SprayRotation, class UPrimitiveComponent** SprayTarget);
};


// Class Killstreak.KSEmoteInstance
// 0x0008 (0x03B0 - 0x03A8)
class AKSEmoteInstance : public AKSEquipment
{
public:
	class UKSEmote*                                    EmoteAsset;                                               // 0x03A8(0x0008) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEmoteInstance");
		return ptr;
	}


	void ServerPlayEmote();
	void ServerForceStopEmote();
	bool PlayEmote(EKSEmoteInterruptReason* OutInterruptReason);
	void OnRep_EmoteAsset();
	bool IsManagingEmoteLocally();
	class UKSEmoteCosmeticComponent* GetEmoteCosmeticComponent();
	class UKSEmote* GetEmoteAsset();
	class AKSCharacter* GetActiveCharacterOwner();
	void ForceStopEmote();
	void DoEmote();
	bool CanPlayEmoteNow(EKSEmoteInterruptReason* OutInterruptReason);
};


// Class Killstreak.KSEmoteInstance_Spray
// 0x0078 (0x0428 - 0x03B0)
class AKSEmoteInstance_Spray : public AKSEmoteInstance
{
public:
	TEnumAsByte<ECollisionChannel>                     SprayTraceChannel;                                        // 0x03B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	float                                              SprayTraceDistance;                                       // 0x03B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FAimData                                    CachedAim;                                                // 0x03B8(0x0050) (Transient)
	struct FVector                                     CachedSprayLocation;                                      // 0x0408(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    CachedSprayRotation;                                      // 0x0414(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class UPrimitiveComponent>          CachedSprayTarget;                                        // 0x0420(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEmoteInstance_Spray");
		return ptr;
	}


	void ServerPlaySpray(struct FAimData* InSprayAim);
};


// Class Killstreak.KSEmotionComponentOwner
// 0x0000 (0x0028 - 0x0028)
class UKSEmotionComponentOwner : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEmotionComponentOwner");
		return ptr;
	}


	float GetEmotionFloat();
	EKSEmotion GetEmotion();
};


// Class Killstreak.KSEmotionComponent
// 0x0188 (0x0280 - 0x00F8)
class UKSEmotionComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnEmotionChanged;                                         // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TScriptInterface<class UKSEmotionComponentOwner>   _EmotionComponentOwner;                                   // 0x0108(0x0010) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TMap<int, EKSEmotion>                              EmotionInstances;                                         // 0x0118(0x0050) (ZeroConstructor, Transient)
	int                                                TopInstanceId;                                            // 0x0168(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	EKSEmotion                                         TopEmotionEnum;                                           // 0x016C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x016D(0x0003) MISSED OFFSET
	int                                                NextEmotionId;                                            // 0x0170(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x54];                                      // 0x0174(0x0054) MISSED OFFSET
	TArray<struct FKSEmoteConversionEntry>             ConversionEntries;                                        // 0x01C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TMap<struct FName, EKSEmotion>                     EmotionNameToEnumMap;                                     // 0x01D8(0x0050) (ZeroConstructor, Transient)
	TMap<EKSEmotion, struct FName>                     EmotionEnumToNameMap;                                     // 0x0228(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0278(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEmotionComponent");
		return ptr;
	}


	bool RemoveEmotionById(int* InstanceId);
	int RemoveEmotion(EKSEmotion* InEmotion);
	TScriptInterface<class UKSEmotionComponentOwner> GetEmotionComponentOwner();
	EKSEmotion GetCurrentEmotion();
	void AddEmotionInternal(EKSEmotion* Emotion, int* ID);
	int AddEmotionForDuration(EKSEmotion* InEmotion, float* Duration);
	int AddEmotion(EKSEmotion* InEmotion);
	int AddAndRemoveEmotion(EKSEmotion* InEmotion, int* InInstanceID);
};


// Class Killstreak.KSGameRuleComponent
// 0x0000 (0x00F8 - 0x00F8)
class UKSGameRuleComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameRuleComponent");
		return ptr;
	}


	void OnTeamSidesFlipped();
	void NewPlayerStarting(class APlayerController** NewPlayer);
	void NewBotStarting(class AKSAIController** NewBot);
};


// Class Killstreak.KSEnforcedEquipmentRuleComponent
// 0x0148 (0x0240 - 0x00F8)
class UKSEnforcedEquipmentRuleComponent : public UKSGameRuleComponent
{
public:
	TMap<class UDataTable*, struct FGameplayTag>       ItemTables;                                               // 0x00F8(0x0050) (Edit, ZeroConstructor)
	TMap<class UKSItem*, struct FGameplayTag>          ChosenEquipment;                                          // 0x0148(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0198(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSEnforcedEquipmentRuleComponent.EquippedPlayerIds
	unsigned char                                      UnknownData01[0x50];                                      // 0x01E8(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSEnforcedEquipmentRuleComponent.EquippedPlayers
	class AKSEnforcedEquipmentState*                   _EnforcedEquipmentState;                                  // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEnforcedEquipmentRuleComponent");
		return ptr;
	}

};


// Class Killstreak.KSEnforcedEquipmentState
// 0x0020 (0x0350 - 0x0330)
class AKSEnforcedEquipmentState : public AInfo
{
public:
	TArray<class UKSItem*>                             EnforcedItems;                                            // 0x0330(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnEnforcedItemsUpdated;                                   // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEnforcedEquipmentState");
		return ptr;
	}


	void OnRep_EnforcedItems();
};


// Class Killstreak.KSEnvironmentVolumeActor
// 0x0020 (0x0350 - 0x0330)
class AKSEnvironmentVolumeActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET
	struct FName                                       EnvironmentTag;                                           // 0x0338(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UEnvironmentTrackerComponent*>        ContainedEnvironmentTrackers;                             // 0x0340(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEnvironmentVolumeActor");
		return ptr;
	}


	void UpdateEnvironmentTag(struct FName* NewTag);
};


// Class Killstreak.KSEnvQueryContext_Character
// 0x0008 (0x0030 - 0x0028)
class UKSEnvQueryContext_Character : public UEnvQueryContext
{
public:
	struct FName                                       BlackboardKeyName;                                        // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEnvQueryContext_Character");
		return ptr;
	}

};


// Class Killstreak.KSEnvQueryContext_Teammates
// 0x0000 (0x0028 - 0x0028)
class UKSEnvQueryContext_Teammates : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEnvQueryContext_Teammates");
		return ptr;
	}

};


// Class Killstreak.KSEnvQueryTest_CharacterTrace
// 0x00C8 (0x0288 - 0x01C0)
class UKSEnvQueryTest_CharacterTrace : public UEnvQueryTest
{
public:
	struct FEnvTraceData                               _TraceData;                                               // 0x01C0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderBoolValue                    TraceFromContext;                                         // 0x01F0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   ItemHeightOffset;                                         // 0x0220(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   ContextHeightOffset;                                      // 0x0250(0x0030) (Edit, DisableEditOnInstance)
	class UClass*                                      Context;                                                  // 0x0280(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEnvQueryTest_CharacterTrace");
		return ptr;
	}

};


// Class Killstreak.KSEquipmentContainerOwner
// 0x0000 (0x0028 - 0x0028)
class UKSEquipmentContainerOwner : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEquipmentContainerOwner");
		return ptr;
	}

};


// Class Killstreak.KSEquipmentManagerComponent
// 0x0160 (0x0258 - 0x00F8)
class UKSEquipmentManagerComponent : public UActorComponent
{
public:
	TMap<struct FGameplayTag, class AKSEquipment*>     EquippedInventory;                                        // 0x00F8(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0148(0x0050) MISSED OFFSET
	TArray<class AKSEquipment*>                        SlotlessInventory;                                        // 0x0198(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst)
	struct FGameplayTagContainer                       MultiUseEquipPoints;                                      // 0x01A8(0x0020) (Transient)
	TScriptInterface<class UKSEquipmentManagerOwner>   _EquipmentManagerOwner;                                   // 0x01C8(0x0010) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEquipmentAddedDel;                                      // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x01E8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquipmentRemovedDel;                                    // 0x0200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x40];                                      // 0x0210(0x0040) MISSED OFFSET
	float                                              EmoteCooldownExpireTime;                                  // 0x0250(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0254(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEquipmentManagerComponent");
		return ptr;
	}


	void SetEquipmentContainerOwner(TScriptInterface<class UKSEquipmentContainerOwner>* InEquipmentContainerOwner);
	void OnItemDropped(class UKSItem** InItem, class AKSItemDrop** InDrop);
	class AKSEquipment* GetEquipmentByEquipPoint(struct FGameplayTag* InEquipPoint);
};


// Class Killstreak.KSEquipmentManagerOwner
// 0x0000 (0x0028 - 0x0028)
class UKSEquipmentManagerOwner : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEquipmentManagerOwner");
		return ptr;
	}

};


// Class Killstreak.KSEscapePoint
// 0x0020 (0x0350 - 0x0330)
class AKSEscapePoint : public AActor
{
public:
	class UBoxComponent*                               EscapeOverlapComponent;                                   // 0x0330(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0338(0x0008) MISSED OFFSET
	struct FName                                       ObjectiveEventName;                                       // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObjectiveEventLoudness;                                   // 0x0348(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToNotifyBots;                                         // 0x034C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEscapePoint");
		return ptr;
	}


	void OnEscapeOverlapEnd(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnEscapeOverlapBegin(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void NotifyBots();
};


// Class Killstreak.KSEventTracker
// 0x0078 (0x00A0 - 0x0028)
class UKSEventTracker : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTriggered;                                              // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bDoesTick;                                                // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x0041(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSEventTracker.ExpectedConfigEntries
	TWeakObjectPtr<class AKSPlayerController>          _PlayerController;                                        // 0x0098(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSEventTracker");
		return ptr;
	}


	void TriggerEvent(int* Count);
	void TickTracker(float* DeltaTime);
	void HandleTrackerInitialized(TMap<struct FString, float>* Config);
	void HandleLostPlayerController();
	class AKSGameState* GetGameState();
	class AKSGameMode* GetGameMode();
	class UKSGameInstance* GetGameInstance();
};


// Class Killstreak.KSExponentialHeightFog
// 0x0008 (0x0338 - 0x0330)
class AKSExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              _Component;                                               // 0x0330(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSExponentialHeightFog");
		return ptr;
	}

};


// Class Killstreak.KSExtinguisher
// 0x0000 (0x0028 - 0x0028)
class UKSExtinguisher : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSExtinguisher");
		return ptr;
	}


	bool ShouldExtinguishRightNow();
};


// Class Killstreak.KSExtractionPickup
// 0x0040 (0x0480 - 0x0440)
class AKSExtractionPickup : public AKSObjectiveBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0440(0x0008) MISSED OFFSET
	int                                                PickupExclusivityGroup;                                   // 0x0448(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x044C(0x0004) MISSED OFFSET
	struct FText                                       InteractionPropt;                                         // 0x0450(0x0018) (Edit, DisableEditOnInstance)
	class USphereComponent*                            InteractionRangeSphereComponent;                          // 0x0468(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0470(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSExtractionPickup");
		return ptr;
	}


	bool IsPickupUsed();
	bool IsPickupEnabled();
	void DeactivatePickup();
	void ActivatePickup();
};


// Class Killstreak.KSFaceAnimInst
// 0x0000 (0x0F10 - 0x0F10)
class UKSFaceAnimInst : public UKSCharacterAnimInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFaceAnimInst");
		return ptr;
	}

};


// Class Killstreak.KSFinalBlowTracker
// 0x0010 (0x00A0 - 0x0090)
class UKSFinalBlowTracker : public UKSAccoladeTracker
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0090(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFinalBlowTracker");
		return ptr;
	}


	void HandleOnLastPlayer(class AKSPlayerState** LastPlayer);
	void CheckLastPlayer(struct FCombatEventInfo* ElimEvent, class AKSPlayerState** LastPlayer);
};


// Class Killstreak.KSFirstBloodTracker
// 0x0008 (0x0098 - 0x0090)
class UKSFirstBloodTracker : public UKSAccoladeTracker
{
public:
	bool                                               IsFirstKill;                                              // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFirstBloodTracker");
		return ptr;
	}


	void HandleTrackerAccolade(class AKSPlayerState** PlayerState);
};


// Class Killstreak.KSFlightPoint
// 0x0010 (0x0340 - 0x0330)
class AKSFlightPoint : public ATargetPoint
{
public:
	class USplineComponent*                            _SplineComponent;                                         // 0x0330(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TEnumAsByte<ESplinePointType>                      _SplinePointType;                                         // 0x0338(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEndPoint;                                              // 0x0339(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x033A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFlightPoint");
		return ptr;
	}

};


// Class Killstreak.KSFlightRecoveryVolume
// 0x0000 (0x0368 - 0x0368)
class AKSFlightRecoveryVolume : public ATriggerVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFlightRecoveryVolume");
		return ptr;
	}


	void OnOverlapEnd(class AActor** OverlappedActor, class AActor** OtherActor);
	void OnOverlapBegin(class AActor** OverlappedActor, class AActor** OtherActor);
};


// Class Killstreak.KSFootstepOverrideInterface
// 0x0000 (0x0028 - 0x0028)
class UKSFootstepOverrideInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFootstepOverrideInterface");
		return ptr;
	}


	float GetPriorityLevel();
	void GetOverrideByLocation(struct FVector* WorldLocation, bool* outShouldOverride, struct FName* outOverrideName);
};


// Class Killstreak.KSFootstepOverrideVolume
// 0x0018 (0x0380 - 0x0368)
class AKSFootstepOverrideVolume : public ATriggerVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	struct FName                                       OverrideMaterialName;                                     // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OverridePriority;                                         // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x037C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFootstepOverrideVolume");
		return ptr;
	}

};


// Class Killstreak.KSVelocityCameraShake
// 0x0000 (0x0180 - 0x0180)
class UKSVelocityCameraShake : public UKSCharacterCameraShake
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSVelocityCameraShake");
		return ptr;
	}

};


// Class Killstreak.KSFreeFallCameraShake
// 0x0000 (0x0180 - 0x0180)
class UKSFreeFallCameraShake : public UKSVelocityCameraShake
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSFreeFallCameraShake");
		return ptr;
	}

};


// Class Killstreak.KSGadgetAssetDrop
// 0x0000 (0x0800 - 0x0800)
class AKSGadgetAssetDrop : public AKSWeaponAssetDrop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGadgetAssetDrop");
		return ptr;
	}


	bool GetLabelInfoForGadgetDescription(struct FText* DescriptionText);
};


// Class Killstreak.KSGameEngine
// 0x0048 (0x0E80 - 0x0E38)
class UKSGameEngine : public UPComGameEngine
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0E38(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGoPlayMapReady;                                         // 0x0E40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0E50(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameEngine");
		return ptr;
	}


	void SetGoPlayMapTravelDelayed(bool* DelayGoPlayMap);
	void SetGoPlayMapDelayTimeoutLimit(float* DelayTimeoutLimit);
	void QuickGoPlayCachedMap();
	void OnTriggerGoPlayMap();
	bool GetGoPlayMapTravelDelayed();
	float GetGoPlayMapDelayTimeoutLimit();
	void FinishGoPlayMap();
	void CancelDelayedGoPlayMap();
};


// Class Killstreak.KSGameInstance
// 0x01B8 (0x03A0 - 0x01E8)
class UKSGameInstance : public UPGame_GameInstance
{
public:
	struct FScriptMulticastDelegate                    LoadingScreenEndedDel;                                    // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x58];                                      // 0x01F8(0x0058) MISSED OFFSET
	class UDataTable*                                  LoadingScreenTipsTable;                                   // 0x0250(0x0008) (ZeroConstructor, IsPlainOldData)
	class ULoadingScreenImageManager*                  _LoadingScreenImageManager;                               // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FGameplayTagQuery                           AlwaysNeededPrimaryAssetQuery;                            // 0x0260(0x0048) (Edit, DisableEditOnInstance)
	TArray<struct FName>                               AlwaysNeededPrimaryAssetBundles;                          // 0x02A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x10];                                      // 0x02B8(0x0010) MISSED OFFSET
	class UPUMG_AcquisitionManager*                    _AcquisitionManager;                                      // 0x02C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UPUMG_StoreItemHelper*                       _StoreItemHelper;                                         // 0x02D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSJsonDataFactory*                          _JsonDataFactory;                                         // 0x02D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSUISessionManager*                         _UISessionManager;                                        // 0x02E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSActivityInstanceManager*                  _ActivityInstanceManager;                                 // 0x02E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSPlayerInventoryHelper*                    _PlayerInventoryHelper;                                   // 0x02F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSPlayerStatsManager*                       _PlayerStatsManager;                                      // 0x02F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSNPETrackManager*                          _NPETrackManager;                                         // 0x0300(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSMercMasteryManager*                       _MercMasteryManager;                                      // 0x0308(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSWeaponMasteryManager*                     _WeaponMasteryManager;                                    // 0x0310(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSAwardsManager*                            _AwardsManager;                                           // 0x0318(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x80];                                      // 0x0320(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameInstance");
		return ptr;
	}


	void UpdateRecordedAnimStats(TMap<struct FName, struct FKSAnimStats>* NewStats);
	void HandleAppResume();
	void HandleAppReactivated();
	class UKSWeaponMasteryManager* GetWeaponMasteryManager();
	class UPUMG_StoreItemHelper* GetStoreItemHelper();
	class UKSPlayerStatsManager* GetPlayerStatsManager();
	class UKSPlayerInventoryHelper* GetPlayerInventoryHelper();
	class UKSNPETrackManager* GetNPETrackManager();
	class UKSMercMasteryManager* GetMercMasteryManager();
	bool GetLoadingScreenImage(struct FString* InMapName, struct FText* MapDisplayName, struct FText* MapRegion, struct FText* MapDescription);
	class UKSAwardsManager* GetAwardsManager();
	void ExportAnimAudit(struct FString* Filename);
	void EndLoading();
	void BeginLoading(struct FString* mapName);
};


// Class Killstreak.KSGameMode
// 0x0640 (0x0B00 - 0x04C0)
class AKSGameMode : public APGame_GameMode
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x04C0(0x0038) MISSED OFFSET
	float                                              PlayerReadyTimeoutTime;                                   // 0x04F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x04FC(0x000C) MISSED OFFSET
	bool                                               bCachedShouldPlayersStartSpectatingDefaultCamera;         // 0x0508(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	struct FKSRespawnConfig                            RespawnConfiguration;                                     // 0x050C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPhaseChangeDel;                                         // 0x0518(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0528(0x0010) MISSED OFFSET
	struct FName                                       MatchPhase;                                               // 0x0538(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bUseMatchTimer;                                           // 0x0540(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0541(0x0003) MISSED OFFSET
	float                                              MatchSetupTime;                                           // 0x0544(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseSelectionPhase;                                       // 0x0548(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0549(0x0003) MISSED OFFSET
	float                                              PreSelectionPhaseTime;                                    // 0x054C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SelectionPhaseTime;                                       // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostSelectionPhaseTime;                                   // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MatchDefaultPhaseTime;                                    // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x34];                                      // 0x055C(0x0034) MISSED OFFSET
	float                                              MatchTimerUpdatePeriod;                                   // 0x0590(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x14];                                      // 0x0594(0x0014) MISSED OFFSET
	bool                                               bAllowFindInactivePlayer;                                 // 0x05A8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUseLoginStartSpotForPawn;                                // 0x05A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x36];                                      // 0x05AA(0x0036) MISSED OFFSET
	int                                                DefaultTeamCount;                                         // 0x05E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x54];                                      // 0x05E4(0x0054) MISSED OFFSET
	struct FScriptMulticastDelegate                    MatchStatsFinalizedDelegate;                              // 0x0638(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x18];                                      // 0x0648(0x0018) MISSED OFFSET
	float                                              MatchStartTime;                                           // 0x0660(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              MatchEndTime;                                             // 0x0664(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bIsTutorial;                                              // 0x0668(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsPractice;                                              // 0x0669(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x066A(0x0002) MISSED OFFSET
	float                                              DefaultMinimapWidth;                                      // 0x066C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DefaultTeamState;                                         // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData)
	float                                              ReverseFriendlyFireStartThreshold;                        // 0x0678(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FriendlyFireModiferBase;                                  // 0x067C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReverseFriendlyFireModiferBase;                           // 0x0680(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanDownPlayers;                                          // 0x0684(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bOverrideBleedout;                                        // 0x0685(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x0686(0x0002) MISSED OFFSET
	float                                              BleedTickPeriod;                                          // 0x0688(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultBleedoutDuration;                                  // 0x068C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanDownBots;                                             // 0x0690(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCreditInstantKillWithDown;                               // 0x0691(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bImmediateDeathForLastManStanding;                        // 0x0692(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEliminatePlayerOnDeath;                                  // 0x0693(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPivotToKillerOnDeath;                                    // 0x0694(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTrackKillerOnDeath;                                      // 0x0695(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRevealKillerOnDeath;                                     // 0x0696(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldRandomizeSides;                                    // 0x0697(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStartJobSelectionOnSideSwap;                             // 0x0698(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0699(0x0007) MISSED OFFSET
	class AKSGlobalShotListener*                       _ShotListener;                                            // 0x06A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x06A8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTeamSidesFlipped;                                       // 0x06B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class AActor*                                      Winner;                                                   // 0x06C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      DefaultRewardsCalculatorClass;                            // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIncludeInitialInventoryFromDefaultPawnInStartingInventory;// 0x06D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x7];                                       // 0x06D1(0x0007) MISSED OFFSET
	TArray<class UKSItem*>                             StartingInventory;                                        // 0x06D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UKSPlayerMod*                                FreefallMod;                                              // 0x06E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x30];                                      // 0x06F0(0x0030) MISSED OFFSET
	bool                                               bIsBotMatch;                                              // 0x0720(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x0721(0x0003) MISSED OFFSET
	int                                                StartingCash;                                             // 0x0724(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPlayerDeckLoaded;                                       // 0x0728(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Deprecated)
	struct FScriptMulticastDelegate                    OnSpecialtyItemVendorLoaded;                              // 0x0738(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRetryLoadingDecks;                                      // 0x0748(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Deprecated)
	unsigned char                                      UnknownData18[0x4];                                       // 0x0758(0x0004) MISSED OFFSET
	bool                                               bUsePlayerLoadouts;                                       // 0x075C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisableLoadoutValidation;                                // 0x075D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData19[0xEA];                                      // 0x075E(0x00EA) MISSED OFFSET
	float                                              WaitForPlayersTimeout;                                    // 0x0848(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData20[0x14];                                      // 0x084C(0x0014) MISSED OFFSET
	unsigned char                                      UnknownData21[0x50];                                      // 0x084C(0x0050) UNKNOWN PROPERTY: MapProperty Killstreak.KSGameMode.LoadingLoot
	bool                                               bPopulateLootSites;                                       // 0x08B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x7];                                       // 0x08B1(0x0007) MISSED OFFSET
	TMap<ELootSiteRarity, struct FKSLootGroupGuaranteeMap> LootGroupGuarantees;                                      // 0x08B8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bSpawnLootOnMatchStart;                                   // 0x0908(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x57];                                      // 0x0909(0x0057) MISSED OFFSET
	TArray<struct FKSLootRaritySwapInfo>               LootRaritySwaps;                                          // 0x0960(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	EKSLootRespawnMode                                 _LootRespawnMode;                                         // 0x0970(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0x7];                                       // 0x0971(0x0007) MISSED OFFSET
	TMap<ELootSiteRarity, float>                       LootSiteRespawnPeriods;                                   // 0x0978(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData25[0x50];                                      // 0x09C8(0x0050) MISSED OFFSET
	class UKSAIActorCollection*                        _AIActorCollection;                                       // 0x0A18(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bRecordKillCam;                                           // 0x0A20(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData26[0x3];                                       // 0x0A21(0x0003) MISSED OFFSET
	float                                              AFKIdleTime;                                              // 0x0A24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData27[0x8];                                       // 0x0A28(0x0008) MISSED OFFSET
	TArray<struct FString>                             SublevelSuffices;                                         // 0x0A30(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             HighMemorySublevelSuffixes;                               // 0x0A40(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             LowMemorySublevelSuffixes;                                // 0x0A50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData28[0x30];                                      // 0x0A60(0x0030) MISSED OFFSET
	class UDataTable*                                  AccoladeTrackerDataTable;                                 // 0x0A90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UKSAccoladeTracker*>                  AccoladeTrackerInstances;                                 // 0x0A98(0x0010) (ZeroConstructor, Transient)
	TArray<class UClass*>                              AccoladeTrackerClasses;                                   // 0x0AA8(0x0010) (ZeroConstructor, Transient)
	struct FKSGameHUDSettings                          GameModeHUDSettings;                                      // 0x0AB8(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData29[0x10];                                      // 0x0AC8(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSGameMode.InteractiveObjectCache
	class UClass*                                      OutOfBoundsManagerClass;                                  // 0x0AD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSMatchDataRecorder*                        _MatchDataRecorder;                                       // 0x0AE0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ShouldForceCompetitiveLogic;                              // 0x0AE8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData30[0x17];                                      // 0x0AE9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode");
		return ptr;
	}


	bool UsePlayerLoadouts();
	void SetMatchPhase(struct FName* NewPhase);
	void SetInfiniteAmmo(bool* bValue);
	class AActor* SelectAWinner();
	void PopulateLootSites();
	void PopulateInteractiveObjects();
	bool PlayerCanEnterPlay(class AController** C);
	void OnWaitForPlayersExpired();
	void OnTeamEliminated(class AKSTeamState** Team);
	void OnPlayerEliminated(class AKSPlayerState** Player);
	void OnPlayerDownStateChanged(class AKSPlayerState** Player);
	void OnKSCharacterRevived(class AKSCharacter** InRevivee, class AKSPlayerState** InReviver);
	void OnKSCharacterDowned(class AKSCharacter** InCharacter, class AController** EventInstigator, class UClass** DamageType, EHitLocationType* HitLocationType, class AActor** DamageCauser, float* DamageDealt);
	void OnKSCharacterDownAssist(class AKSCharacter** InVictim, class AController** DownInstigator, class AController** DownAssistant, float* RawDamage, float* DamagePercent);
	void OnKSCharacterCombatSummary(struct FAdvancedCombatSummary* CombatSummary);
	void OnKSCharacterCombatEvent(struct FAdvancedCombatEvent* CombatEvent);
	void OnKSCharacterBaseDied(class AKSCharacterBase** InCharacter, class APlayerState** CharacterPlayer, class AController** EventInstigator, class UClass** DamageType, EHitLocationType* HitLocationType, struct FKSEventAssistants* EventAssistants, class AActor** DamageCauser, float* DamageDealt);
	void K2_OnMatchPhaseSet(struct FName* NewPhase);
	EKSRewardType IsAWinner(class AActor** Other);
	void HandleAllPlayersFinishedPrePrep();
	int GetStartingTeamNum(class UPlayer** NewPlayer, class APGame_PlayerController** NewPlayerController);
	class AKSGlobalShotListener* GetShotListener();
	class UClass* GetRewardsCalculatorClass();
	float GetMatchTimeElapsed();
	struct FName GetMatchPhase();
	struct FKSGameHUDSettings GetGameModeHUDSettings();
	TArray<class UKSPlayerMod*> GetDefaultPlayerMods();
	void GetCachedInteractiveObjects();
	void EventOnTeamCreated(class AKSTeamState** Team);
	void DestroyDynamicZipLines();
	void DestroyActive(class UClass** ActorClass);
	void ClearLootSites();
	void ClearInteractiveObjects();
	bool CanUsePlayerStart(class AController** Player, class APlayerStart** PlayerStart);
	bool CanSpawnBotsNow();
	void AllPlayersLockedInForComponent();
	void AddInteractiveObject();
};


// Class Killstreak.KSGameMode_RoundGame
// 0x00D0 (0x0BD0 - 0x0B00)
class AKSGameMode_RoundGame : public AKSGameMode
{
public:
	float                                              PostRoundDuration;                                        // 0x0B00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RoundStateSetupComplete;                                  // 0x0B04(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	int                                                RoundNumber;                                              // 0x0B0C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	int                                                RoundsNeededToWin;                                        // 0x0B10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                TotalNumberOfRounds;                                      // 0x0B14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPlayersCanRestartDuringRoundInProgress;                  // 0x0B18(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHoldPlayerRestartUntilFirstRoundSetup;                   // 0x0B19(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bWinRoundByElimination;                                   // 0x0B1A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAwardPointOnDraw;                                        // 0x0B1B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoundSetupTime;                                           // 0x0B1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoundDuration;                                            // 0x0B20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RoundStartPhase;                                          // 0x0B24(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNewPawnOnRoundStart;                                     // 0x0B2C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0B2D(0x000B) MISSED OFFSET
	class AKSTeamState*                                WinByEliminationTeam;                                     // 0x0B38(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0B40(0x0004) MISSED OFFSET
	int                                                NumberOfConsecutiveLossesToEnableEpicGroupSiteGuarantees; // 0x0B44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bKillDownedPlayersAtEndOfRound;                           // 0x0B48(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSpareWinningDownedPlayers;                               // 0x0B49(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0B4A(0x0001) MISSED OFFSET
	EPlayerInfoInventoryRestoreType                    _InventoryRestore;                                        // 0x0B4B(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               bAllowPlayersToKeepInventoryBetweenRounds;                // 0x0B4C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRequirePlayerToBeAlive;                                  // 0x0B4D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRequirePlayerToBeStanding;                               // 0x0B4E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRequirePlayerToBeOnWinningTeam;                          // 0x0B4F(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSideSwapWipesEquipment;                                  // 0x0B50(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRestoreEquipment;                                        // 0x0B51(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0B52(0x0006) MISSED OFFSET
	struct FGameplayTagQuery                           InventoryRestoreEquipPointRequirements;                   // 0x0B58(0x0048) (Edit)
	bool                                               bRestoreSlotlessEquipment;                                // 0x0BA0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRestoreNonEquipment;                                     // 0x0BA1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0BA2(0x0006) MISSED OFFSET
	TArray<struct FInventoryRestoreInfo>               GuaranteedInventory;                                      // 0x0BA8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                FlipTeamSideFrequency;                                    // 0x0BB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxTeamSideFlipsPerMatch;                                 // 0x0BBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                TeamSideFlipsThisMatch;                                   // 0x0BC0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bBlockWeaponsPostRound;                                   // 0x0BC4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0xB];                                       // 0x0BC5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_RoundGame");
		return ptr;
	}


	void StartRound();
	bool ReadyToStartNextRound();
	bool ReadyToPrepareNextRound();
	void PrepareForNextRound();
	void K2_OnSetRoundState(struct FName* InRoundState);
	bool IsRoundSetupComplete();
	bool IsRoundInProgress();
	bool HasRoundStarted();
	bool HasRoundEnded();
	bool HasPreparedNextRound();
	struct FName GetRoundState();
	float GetRoundStartTime();
	unsigned char GetRoundNumber();
	void EndRoundKillCam();
	void EndRound();
	bool CanPlayerKeepInventoryBetweenRounds(class AKSCharacter** Character, class AController** Player);
};


// Class Killstreak.KSGameMode_Extraction
// 0x00B8 (0x0C88 - 0x0BD0)
class AKSGameMode_Extraction : public AKSGameMode_RoundGame
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0BD0(0x0008) MISSED OFFSET
	bool                                               bAllowComputersFromLastRound;                             // 0x0BD8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAvoidRepeatComputers;                                    // 0x0BD9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0BDA(0x0002) MISSED OFFSET
	int                                                ActiveComputerCount;                                      // 0x0BDC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ComputerCountToWin;                                       // 0x0BE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanActiveComputerFavorMatchPointTeam;                    // 0x0BE4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldActiveComputerBeNeutralForTieBreaker;              // 0x0BE5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0BE6(0x0002) MISSED OFFSET
	class AKSTeamState*                                DefendingTeam;                                            // 0x0BE8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AKSTeamState*                                AttackingTeam;                                            // 0x0BF0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AKSExtractionComputer*                       ActiveComputer;                                           // 0x0BF8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeToCompleteHack;                                       // 0x0C00(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToUnlockComputers;                                    // 0x0C04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeAddedOnSuccessfulHack;                                // 0x0C08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHackingPreventsRoundEnd;                                 // 0x0C0C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bWinOnDehack;                                             // 0x0C0D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x72];                                      // 0x0C0E(0x0072) MISSED OFFSET
	bool                                               bUI_ConcealsEnemyHackAttempts;                            // 0x0C80(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0C81(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_Extraction");
		return ptr;
	}

};


// Class Killstreak.KSGameMode_AttackExtraction
// 0x0000 (0x0C88 - 0x0C88)
class AKSGameMode_AttackExtraction : public AKSGameMode_Extraction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_AttackExtraction");
		return ptr;
	}

};


// Class Killstreak.KSGameMode_Control
// 0x0090 (0x0C60 - 0x0BD0)
class AKSGameMode_Control : public AKSGameMode_RoundGame
{
public:
	float                                              BaseControlPointCaptureTime;                              // 0x0BD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CaptureRatePercentIncreasePerPlayer;                      // 0x0BD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FullCaptureDecayTime;                                     // 0x0BD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumActiveControlPoints;                                   // 0x0BDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAvoidRepeatControlPoints;                                // 0x0BE0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowControlPointsFromLastRound;                         // 0x0BE1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanActiveControlPointFavorMatchPointTeam;                // 0x0BE2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldActiveControlPointBeNeutralForTieBreaker;          // 0x0BE3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0BE4(0x0004) MISSED OFFSET
	TMap<class AKSControlPoint*, float>                ControlledPoints;                                         // 0x0BE8(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AKSControlPoint*>                     AvailableControlPoints;                                   // 0x0C38(0x0010) (ZeroConstructor, Transient)
	float                                              TimeToUnlockControlPoints;                                // 0x0C48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bScorePointImmediatelyUponCapture;                        // 0x0C4C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0C4D(0x0003) MISSED OFFSET
	int                                                ScorePerControlPoint;                                     // 0x0C50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ScoreToWin;                                               // 0x0C54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScoreUpdatePeriod;                                        // 0x0C58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0C5C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_Control");
		return ptr;
	}


	float GetUpdateRateForControlPoint(class AKSControlPoint** InPoint);
};


// Class Killstreak.KSGameMode_NeutralBomb
// 0x01A8 (0x0D78 - 0x0BD0)
class AKSGameMode_NeutralBomb : public AKSGameMode_RoundGame
{
public:
	float                                              ScoreEarnedOnBombTimerComplete;                           // 0x0BD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScoreEarnedOnBombDisarmed;                                // 0x0BD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       BombDisarmedDescription;                                  // 0x0BD8(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       BombDetonatedDescription;                                 // 0x0BF0(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       BombArmedDescription;                                     // 0x0C08(0x0018) (Edit, DisableEditOnInstance)
	int                                                CashEarnedOnBombArmed;                                    // 0x0C20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CashEarnedOnBombDisarmed;                                 // 0x0C24(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AKSNeutralBombSpawner*>               BombSpawners;                                             // 0x0C28(0x0010) (ZeroConstructor)
	class AKSNeutralBombSpawner*                       CurrentBombSpawner;                                       // 0x0C38(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FGameplayTag                                BombEquipPoint;                                           // 0x0C40(0x0008) (Edit, DisableEditOnInstance)
	float                                              TimeAfterRoundStartToResetSpawnedBomb;                    // 0x0C48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BombResetDuration;                                        // 0x0C4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0C50(0x0008) MISSED OFFSET
	bool                                               bWinOnBombDisarm;                                         // 0x0C58(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5F];                                      // 0x0C59(0x005F) MISSED OFFSET
	TArray<class AKSNeutralBombZone*>                  AllBombZones;                                             // 0x0CB8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0CC8(0x0050) MISSED OFFSET
	TMap<int, int>                                     ZoneGroupGuarantees;                                      // 0x0D18(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bPrioritizeUnusedZonesNext;                               // 0x0D68(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0D69(0x0003) MISSED OFFSET
	int                                                ZonesLeftToWin;                                           // 0x0D6C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeAddedOnBombComplete;                                  // 0x0D70(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0D74(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_NeutralBomb");
		return ptr;
	}


	void ResetBombIfInSpawnedState();
	void ResetBomb();
};


// Class Killstreak.KSGameMode_Demolition
// 0x0028 (0x0DA0 - 0x0D78)
class AKSGameMode_Demolition : public AKSGameMode_NeutralBomb
{
public:
	bool                                               bDirectBombGive;                                          // 0x0D78(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0D79(0x0007) MISSED OFFSET
	class UKSItem*                                     DirectGiveBombItem;                                       // 0x0D80(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FKSRespawnConfig                            DefendingRespawnConfig;                                   // 0x0D88(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FKSRespawnConfig                            AttackingRespawnConfig;                                   // 0x0D94(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_Demolition");
		return ptr;
	}

};


// Class Killstreak.KSGameMode_ExtInterface
// 0x0000 (0x0028 - 0x0028)
class UKSGameMode_ExtInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_ExtInterface");
		return ptr;
	}

};


// Class Killstreak.KSGameMode_ExtractionCoop
// 0x0060 (0x0CE8 - 0x0C88)
class AKSGameMode_ExtractionCoop : public AKSGameMode_Extraction
{
public:
	float                                              CollectionPhaseTime;                                      // 0x0C88(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CollectionsToActivate;                                    // 0x0C8C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EscapePhaseTime;                                          // 0x0C90(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequireDownedPlayersToEscape;                            // 0x0C94(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C95(0x0003) MISSED OFFSET
	TArray<class AKSPlayerState*>                      PlayersInEscapeZone;                                      // 0x0C98(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0CA8(0x0008) MISSED OFFSET
	class UClass*                                      StartingDropShipClass;                                    // 0x0CB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AKSDropShipLocation*                         StartDropShipLocation;                                    // 0x0CB8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AKSDropShipLocation*                         EscapeDropShipLocation;                                   // 0x0CC0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x11];                                      // 0x0CC8(0x0011) MISSED OFFSET
	bool                                               bUseAlarmState;                                           // 0x0CD9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0CDA(0x0002) MISSED OFFSET
	float                                              TimeAddedPerObjective;                                    // 0x0CDC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlarmStateTime;                                           // 0x0CE0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlarmSpawnPeriod;                                         // 0x0CE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_ExtractionCoop");
		return ptr;
	}


	void BroadcastAlarm();
};


// Class Killstreak.KSGameMode_RoyaleBase
// 0x0030 (0x0B30 - 0x0B00)
class AKSGameMode_RoyaleBase : public AKSGameMode
{
public:
	TArray<struct FRoyaleZoneData>                     DataForZones;                                             // 0x0B00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              TimeUntilFirstZoneActivation;                             // 0x0B10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InsertionPhaseDuration;                                   // 0x0B14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class AKSRoyaleSafeZone>            _SafeZone;                                                // 0x0B18(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentZoneIndex;                                         // 0x0B20(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0B24(0x0004) MISSED OFFSET
	struct FTimerHandle                                DamageTimer;                                              // 0x0B28(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_RoyaleBase");
		return ptr;
	}


	void TickZoneDamage();
	bool GetMustContainActor(class AActor** MustContainActor, float* SafeRadius);
};


// Class Killstreak.KSGameMode_ExtractionRoyale
// 0x0038 (0x0B68 - 0x0B30)
class AKSGameMode_ExtractionRoyale : public AKSGameMode_RoyaleBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B30(0x0008) MISSED OFFSET
	class AKSTeamState*                                AttackingTeam;                                            // 0x0B38(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class AKSExtractionComputer*                       ActiveComputer;                                           // 0x0B40(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeToCompleteHack;                                       // 0x0B48(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToUnlockComputers;                                    // 0x0B4C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0B50(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_ExtractionRoyale");
		return ptr;
	}

};


// Class Killstreak.KSGameMode_Heist
// 0x0040 (0x0B40 - 0x0B00)
class AKSGameMode_Heist : public AKSGameMode
{
public:
	int                                                TeamCashToWin;                                            // 0x0B00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                TotalRefreshesInMatch;                                    // 0x0B04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UKSCash*>                             CashAssets;                                               // 0x0B08(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B18(0x0008) MISSED OFFSET
	class AKSGameState_Heist*                          CachedHeistState;                                         // 0x0B20(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class AKSTeamState*                                WinningTeam;                                              // 0x0B28(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class AKSCashExtractionPoint*>              CashExtractionPoints;                                     // 0x0B30(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_Heist");
		return ptr;
	}

};


// Class Killstreak.KSGameMode_Sabotage
// 0x0098 (0x0C68 - 0x0BD0)
class AKSGameMode_Sabotage : public AKSGameMode_RoundGame
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0BD0(0x0008) MISSED OFFSET
	int                                                ActiveComputerCount;                                      // 0x0BD8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTiebreakerRoundWipesEquipment;                           // 0x0BDC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0BDD(0x0003) MISSED OFFSET
	class AKSTeamState*                                DefendingTeam;                                            // 0x0BE0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AKSTeamState*                                AttackingTeam;                                            // 0x0BE8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0BF0(0x0008) MISSED OFFSET
	TArray<class AKSExtractionComputer*>               ActiveComputers;                                          // 0x0BF8(0x0010) (ZeroConstructor, Transient)
	float                                              TimeToUnlockComputers;                                    // 0x0C08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HackTimeExtension;                                        // 0x0C0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToCompleteHack;                                       // 0x0C10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HackedComputerCount;                                      // 0x0C14(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TMap<class AKSExtractionComputer*, struct FTimerHandle> HackCompletionTimers;                                     // 0x0C18(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameMode_Sabotage");
		return ptr;
	}


	void OnHackComplete(class AKSExtractionComputer** InComputer);
	bool HasDefendingTeamWon();
	bool HasAttackingTeamWon();
};


// Class Killstreak.KSGamepadLookSpeedManager
// 0x0008 (0x0030 - 0x0028)
class UKSGamepadLookSpeedManager : public UObject
{
public:
	class AKSPlayerController*                         _PlayerController;                                        // 0x0028(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGamepadLookSpeedManager");
		return ptr;
	}

};


// Class Killstreak.KSGamepadCurvedLookSpeedManager
// 0x00B8 (0x00E8 - 0x0030)
class UKSGamepadCurvedLookSpeedManager : public UKSGamepadLookSpeedManager
{
public:
	bool                                               bUseBaseVelocity;                                         // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	class UCurveVector*                                LookBaseVelocityCurve;                                    // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   BoostThreshold;                                           // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   BoostMultiplier;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BoostAcceleration;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	class UCurveVector*                                MouseLookMaxVelocityCurve;                                // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                MouseLookMaxVelocityADSCurve;                             // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnRateMultiplier;                                       // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LookUpRateMultiplier;                                     // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                MouseLookAccelerationCurve;                               // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                MouseLookAccelerationADSCurve;                            // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, class UCurveVector*>            TestBaseVelocityCurves;                                   // 0x0080(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FVector2D                                   LastRotationVelocityScale;                                // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   PrevInput;                                                // 0x00D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector2D                                   CurrentTurnSpeed;                                         // 0x00E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGamepadCurvedLookSpeedManager");
		return ptr;
	}


	void SetOuterDeadZone(float* NewZoneX, float* NewZoneY);
	void SetBoostMultiplier(float* NewBoostX, float* NewBoostY);
	void SetBoostAcceleration(float* NewAccel);
	void SetBaseVelocityCurve(struct FName* TestCurveName);
	void PrintLookSpeedParameters();
};


// Class Killstreak.KSGameState
// 0x0B18 (0x0EA8 - 0x0390)
class AKSGameState : public AGameState
{
public:
	TMap<uint64_t, TWeakObjectPtr<class AKSLagCompensatedActor>> PredictedActors;                                          // 0x0390(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E0(0x0010) MISSED OFFSET
	EKillCamStatus                                     _KillCamStatus;                                           // 0x03F0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              KillCamRecordingSecondsToKeep;                            // 0x03F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class APawn*                                       KillCamFocusPawn;                                         // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0400(0x0008) MISSED OFFSET
	class APawn*                                       KillCamSecondaryFocusPawn;                                // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0410(0x0008) MISSED OFFSET
	class AActor*                                      KillCamFocusSpecial;                                      // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0420(0x0004) MISSED OFFSET
	float                                              KillCamTime;                                              // 0x0424(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnGameDisplayInfo;                                        // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class AActor*>                              GameDisplayInfoActors;                                    // 0x0438(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x58];                                      // 0x0448(0x0058) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPhaseChangeDel;                                         // 0x04A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetupStartDel;                                          // 0x04B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetupEndDel;                                            // 0x04C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAbortFireDel;                                           // 0x04D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTimerSecondTick;                                        // 0x04E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       MatchPhase;                                               // 0x04F0(0x0008) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FName                                       PreviousPhase;                                            // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bHasProcessedMatchStarted;                                // 0x0500(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0501(0x0007) MISSED OFFSET
	struct FPGame_ReplicatedTimer                      ReplicatedMatchTimer;                                     // 0x0508(0x0038) (Edit, Net, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData07[0xC];                                       // 0x0540(0x000C) MISSED OFFSET
	bool                                               bCharacterBodiesPersistAfterDeath;                        // 0x054C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x054D(0x0003) MISSED OFFSET
	float                                              SecondsForCharacterBodiesToPersistAfterDeath;             // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SecondsToViewBodyAfterDeath;                              // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPlayerDeath;                                            // 0x0558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerDown;                                             // 0x0568(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerSpawn;                                            // 0x0578(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerRevive;                                           // 0x0588(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWinnerSet;                                              // 0x0598(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerAssist;                                           // 0x05A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLastManStanding;                                        // 0x05B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUIRelevantPlayerStateChangedDel;                        // 0x05C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              DefaultMinimapWidth;                                      // 0x05D8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x05DC(0x0004) MISSED OFFSET
	TArray<class UClass*>                              AccoladeTrackerClasses;                                   // 0x05E0(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData10[0x18];                                      // 0x05F0(0x0018) MISSED OFFSET
	class AKSMiniMapAssistant*                         _MiniMapAssistant;                                        // 0x0608(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TMap<int, class AKSTeamState*>                     teams;                                                    // 0x0610(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0660(0x0008) MISSED OFFSET
	struct FCombatEventList                            _CombatEventList;                                         // 0x0668(0x0088) (Net)
	struct FAssistEventList                            _AssistEventList;                                         // 0x06F0(0x0088) (Net)
	struct FReviveEventList                            _ReviveEventList;                                         // 0x0778(0x0088) (Net)
	struct FScriptMulticastDelegate                    OnTeamEliminatedDel;                                      // 0x0800(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamEliminatedOrDownedDel;                              // 0x0810(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerEliminatedDel;                                    // 0x0820(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerDownedChangedDel;                                 // 0x0830(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAttackingTeamUpdated;                                   // 0x0840(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayCashChanged;                                     // 0x0850(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bDisplayCash;                                             // 0x0860(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0861(0x0003) MISSED OFFSET
	int                                                CashPerKill;                                              // 0x0864(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       KillDescription;                                          // 0x0868(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                CashPerDown;                                              // 0x0880(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0884(0x0004) MISSED OFFSET
	struct FText                                       DownDescription;                                          // 0x0888(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                CashPerAssist;                                            // 0x08A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x08A4(0x0004) MISSED OFFSET
	struct FText                                       AssistDescription;                                        // 0x08A8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                CashPerRevive;                                            // 0x08C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x08C4(0x0004) MISSED OFFSET
	struct FText                                       ReviveDescription;                                        // 0x08C8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                CashPerElim;                                              // 0x08E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x08E4(0x0004) MISSED OFFSET
	struct FText                                       EliminationDescription;                                   // 0x08E8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              MinimumAssistPercentage;                                  // 0x0900(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0904(0x0004) MISSED OFFSET
	TArray<int>                                        CashPerAssistTierValues;                                  // 0x0908(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnTeamSidesFlipped;                                       // 0x0918(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<int>                                        TierUnlockThresholds;                                     // 0x0928(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxMarkerDistanceForCommonLoot;                           // 0x0938(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x154];                                     // 0x093C(0x0154) MISSED OFFSET
	TArray<class AKSLootSiteBase*>                     WorldLootSites;                                           // 0x0A90(0x0010) (ZeroConstructor)
	TArray<class AKSObjectiveBase*>                    WorldObjectives;                                          // 0x0AA0(0x0010) (ZeroConstructor)
	TArray<class AKSFlightPoint*>                      WorldFlightPoints;                                        // 0x0AB0(0x0010) (ZeroConstructor)
	TArray<class AKSDestructibleBase*>                 WorldDestructibles;                                       // 0x0AC0(0x0010) (ZeroConstructor)
	TArray<class AKSItemDrop*>                         WorldDrops;                                               // 0x0AD0(0x0010) (ZeroConstructor)
	TArray<class AKSProjectile*>                       WorldProjectiles;                                         // 0x0AE0(0x0010) (ZeroConstructor)
	TArray<class AKSCharacter*>                        WorldCharacters;                                          // 0x0AF0(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              WorldDeployables;                                         // 0x0B00(0x0010) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnItemDropAdded;                                          // 0x0B10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              ItemDropLifeSpan;                                         // 0x0B20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x0B24(0x0004) MISSED OFFSET
	TArray<TScriptInterface<class UKSSkyDiveListener>> SkyDiveListeners;                                         // 0x0B28(0x0010) (ZeroConstructor)
	TArray<class AKSCharacter*>                        SkyDivers;                                                // 0x0B38(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData20[0x10];                                      // 0x0B48(0x0010) MISSED OFFSET
	struct FText                                       PresenceDisplayText;                                      // 0x0B58(0x0018) (Edit, DisableEditOnInstance)
	struct FString                                     PresenceKey;                                              // 0x0B70(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FKSLootRarityTimerPair>              LootRarityTimerPairs;                                     // 0x0B80(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData21[0x50];                                      // 0x0B90(0x0050) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLootRespawnTimerTick;                                   // 0x0BE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLootRespawnTimerActive;                                 // 0x0BF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAccoladeDisplay;                                        // 0x0C00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FAccoladeEventList                          _AccoladeEventList;                                       // 0x0C10(0x0088) (Net)
	bool                                               bBlockWeaponFiring;                                       // 0x0C98(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0C99(0x0003) MISSED OFFSET
	float                                              HealthGate;                                               // 0x0C9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bInfiniteAmmo;                                            // 0x0CA0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x7];                                       // 0x0CA1(0x0007) MISSED OFFSET
	struct FKSGameHUDSettings                          GameModeHUDSettings;                                      // 0x0CA8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net)
	bool                                               bPlayersShouldSpectateDefaultCamera;                      // 0x0CB8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x4F];                                      // 0x0CB9(0x004F) MISSED OFFSET
	TArray<struct FName>                               AlwaysIncludedClientBundles;                              // 0x0D08(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               AlwaysIncludedServerBundles;                              // 0x0D18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FReplicatedPreloader                        _Preloader;                                               // 0x0D28(0x0180) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState");
		return ptr;
	}


	bool WasLastPhasePrepare();
	void SetSideForTeam(int* TeamNumber, int* SideNumber);
	void RemoveGameDisplayInfoForActor(class AActor** pActor);
	void RemoveGameDisplayInfoById(int* DisplayInfoIdToRemove);
	void RemoveDeployable(TScriptInterface<class UKSDeployable>* Deployable);
	void ReceivedKillCamStatus();
	void OnRep_MatchPhase();
	void OnRep_LootRarityTimerPairs();
	void OnRep_InfiniteAmmo();
	void OnRep_DisplayCash();
	void LootRespawnTimerTick(float* Seconds, ELootSiteRarity* Rarity);
	void LootRespawnTimerComplete(ELootSiteRarity* Rarity);
	void LootRespawnTimerActive(bool* bActive, ELootSiteRarity* Rarity);
	bool IsRoyaleMode();
	bool IsKillCamRecording();
	bool IsInSetup();
	TArray<class AActor*> GetWorldDeployables();
	int GetWinningTeamNum();
	TArray<class AKSItemDrop*> GetTrackedWorldDrops();
	TArray<class AKSProjectile*> GetTrackedProjectiles();
	TArray<class AKSTeamState*> GetTeams();
	int GetSideForTeam(int* TeamNumber);
	class AKSMiniMapAssistant* GetMiniMapAssistant();
	EPGame_ReplicateTimerState GetMatchTimerState();
	void GetMatchTimer(float* OutPhaseTimeRemaining, float* OutTotalPhaseTime);
	struct FName GetMatchPhase();
	class APawn* GetKillCamSecondaryFocusPawn(int* LocalPlayerIndex);
	class AKSProjectile* GetKillCamFocusSpecial(int* LocalPlayerIndex);
	class APawn* GetKillCamFocusPawn(int* LocalPlayerIndex);
	class AActor* GetKillCamActor(int* Guid, int* LocalPlayerIndex);
	int GetFirstTeamForSide(int* SideNumber);
	class AKSTeamState* GetAttackingTeam();
	void FlipTeamSides();
	void ClientsNotifyWinnerSet(int* teamNum);
	void ClientsNotifyLastManStanding(class AKSPlayerState** LastPlayer);
	bool CharacterBodiesPersistAfterDeath();
	int CalculateCashForAssist(float* DamagePercent);
	void BroadcastTeamSidesFlipped();
	void BroadcastKillCamParameters(class APawn** InPawn, class APawn** InSecondaryPawn, class AActor** InSpecialDamageCauser);
	bool BlueprintIsMatchInProgress();
	bool BlueprintHasMatchEnded();
	int AddGameDisplayInfo(struct FDisplayInfo* DisplayInfo);
	void AddDeployable(TScriptInterface<class UKSDeployable>* Deployable);
};


// Class Killstreak.KSGameState_RoundGame
// 0x0140 (0x0FE8 - 0x0EA8)
class AKSGameState_RoundGame : public AKSGameState
{
public:
	struct FReplicatedRoundInfo                        _RoundInfo;                                               // 0x0EA8(0x000C) (Edit, Net, DisableEditOnTemplate, EditConst)
	struct FReplicatedRoundInfo                        PreviousRoundInfo;                                        // 0x0EB4(0x000C) (Edit, DisableEditOnTemplate, EditConst)
	struct FScriptMulticastDelegate                    OnRoundInfoChangedDel;                                    // 0x0EC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0ED0(0x0018) MISSED OFFSET
	struct FRoundResult                                _RoundResult;                                             // 0x0EE8(0x0020) (BlueprintVisible, BlueprintReadOnly, Net)
	TArray<struct FRoundResult>                        AllRoundResults;                                          // 0x0F08(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	int                                                TotalRounds;                                              // 0x0F18(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                RoundsToWin;                                              // 0x0F1C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FRoundInitState                             _RoundInitState;                                          // 0x0F20(0x0010) (BlueprintVisible, BlueprintReadOnly, Net)
	struct FScriptMulticastDelegate                    OnRoundSetupDel;                                          // 0x0F30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0F40(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRoundStartDel;                                          // 0x0F58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0F68(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRoundOverDel;                                           // 0x0F80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0F90(0x0018) MISSED OFFSET
	int                                                CashPerWinningPlayer;                                     // 0x0FA8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0FAC(0x0004) MISSED OFFSET
	TArray<int>                                        ConsecutiveCashPerLosingPlayer;                           // 0x0FB0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0FC0(0x0004) MISSED OFFSET
	float                                              RoundEndCamPreDeathDuration;                              // 0x0FC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoundEndCamPostDeathDuration;                             // 0x0FC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoundEndCamPreDeathDilation;                              // 0x0FCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RoundEndCamTimeDilation;                                  // 0x0FD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EndOfMatchKillCamDelay;                                   // 0x0FD4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0FD8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_RoundGame");
		return ptr;
	}


	void TryToReplayLastKill();
	bool RoundHasStarted();
	bool RoundHasEnded();
	bool PreparingForNextRound();
	void OnRep_RoundResult();
	void OnRep_RoundInitState();
	void OnRep_RoundInfo();
	bool IsTieBreakerRound();
	bool IsTeamAtMatchPoint(class AKSTeamState** Team);
	bool IsRoundInProgress();
	bool HasTriggeredRoundStart();
	bool HasTriggeredRoundSetup();
	bool HasTriggeredRoundOver();
	class AKSTeamState* GetRoundWinner();
	EPGame_ReplicateTimerState GetRoundTimerState();
	void GetRoundTimer(float* OutRoundTimeRemaining, float* OutTotalRoundTime);
	float GetRoundStartTime();
	unsigned char GetRoundNumber();
	TArray<struct FRoundResult> GetAllRoundResults();
};


// Class Killstreak.KSGameState_Control
// 0x0010 (0x0FF8 - 0x0FE8)
class AKSGameState_Control : public AKSGameState_RoundGame
{
public:
	TArray<class AKSControlPoint*>                     ControlPoints;                                            // 0x0FE8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_Control");
		return ptr;
	}


	void GetAllControlPoints(TArray<class AKSControlPoint*>* OutControlPoints);
};


// Class Killstreak.KSGameState_NeutralBomb
// 0x0098 (0x1080 - 0x0FE8)
class AKSGameState_NeutralBomb : public AKSGameState_RoundGame
{
public:
	int                                                DownInZoneCashBonus;                                      // 0x0FE8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0FEC(0x0004) MISSED OFFSET
	struct FText                                       DownInZoneDescription;                                    // 0x0FF0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKSNeutralBombState                         _BombState;                                               // 0x1008(0x0018) (Net)
	class AKSNeutralBombDrop*                          _BombDrop;                                                // 0x1020(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              ArmedStateDuration;                                       // 0x1028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DroppedStateDuration;                                     // 0x102C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnNeutralBombStateChangedDel;                             // 0x1030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x1040(0x0008) MISSED OFFSET
	class UKSTimerComponent*                           BombStateTimer;                                           // 0x1048(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBombStateTimerTick;                                     // 0x1050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBombStateTimerActive;                                   // 0x1060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class AKSNeutralBombZone*>                  BombZones;                                                // 0x1070(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_NeutralBomb");
		return ptr;
	}


	void OnRep_BombStateTimer();
	void OnRep_BombState();
	struct FKSNeutralBombState GetBombState();
	void BombStateTimerTick(float* Seconds);
	void BombStateTimerComplete();
	void BombStateTimerActive(bool* bActive);
};


// Class Killstreak.KSGameState_Demolition
// 0x0008 (0x1088 - 0x1080)
class AKSGameState_Demolition : public AKSGameState_NeutralBomb
{
public:
	class AKSTeamState*                                AttackingTeam;                                            // 0x1080(0x0008) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_Demolition");
		return ptr;
	}


	void OnRep_AttackingTeam();
};


// Class Killstreak.KSGameState_ExtInterface
// 0x0000 (0x0028 - 0x0028)
class UKSGameState_ExtInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_ExtInterface");
		return ptr;
	}

};


// Class Killstreak.KSGameState_Extraction
// 0x0100 (0x10E8 - 0x0FE8)
class AKSGameState_Extraction : public AKSGameState_RoundGame
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0FE8(0x0008) MISSED OFFSET
	class AKSTeamState*                                AttackingTeam;                                            // 0x0FF0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TArray<class AKSExtractionComputer*>               Computers;                                                // 0x0FF8(0x0010) (ZeroConstructor, Transient)
	struct FName                                       HackingObjectiveState;                                    // 0x1008(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       LocalHackingObjectivState;                                // 0x1010(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnCreditHacker;                                           // 0x1018(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCreditDehacker;                                         // 0x1028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHackingStartedDel;                                      // 0x1038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHackingSuccessfulDel;                                   // 0x1048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDehackStartedDel;                                       // 0x1058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDehackFailDel;                                          // 0x1068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComputersUnlocked;                                      // 0x1078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAttackingTeamEliminatedOrDownedDel;                     // 0x1088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                CashPerWinDefendingPlayer;                                // 0x1098(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HackerBonusCash;                                          // 0x109C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VictoryByHackBonusCash;                                   // 0x10A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DehackerBonusCash;                                        // 0x10A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VictoryByDehackBonusCash;                                 // 0x10A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x10AC(0x0004) MISSED OFFSET
	struct FText                                       HackerBonusDescription;                                   // 0x10B0(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       DehackerBonusDescription;                                 // 0x10C8(0x0018) (Edit, DisableEditOnInstance)
	bool                                               bUI_ConcealsEnemyHackAttempts;                            // 0x10E0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x10E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_Extraction");
		return ptr;
	}


	void OnRep_HackingObjectiveState();
	void OnRep_AttackingTeam();
	bool IsAComputerHacked();
	void GetComputers(TArray<class AKSExtractionComputer*>* OutComputers);
	void CreditHacker(class AKSPlayerState** Hacker);
	void CreditDehacker(class AKSPlayerState** Dehacker);
	void ComputersUnlocked();
};


// Class Killstreak.KSGameState_ExtractionCoop
// 0x00B8 (0x11A0 - 0x10E8)
class AKSGameState_ExtractionCoop : public AKSGameState_Extraction
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x10E8(0x0010) MISSED OFFSET
	TArray<class AKSExtractionPickup*>                 ExtractionPickups;                                        // 0x10F8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x50];                                      // 0x1108(0x0050) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnExtractionPickupChanged;                                // 0x1158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEscapePointChanged;                                     // 0x1168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAlarmStateChanged;                                      // 0x1178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAlarmPeriodStart;                                       // 0x1188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bAlarmState;                                              // 0x1198(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x1199(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_ExtractionCoop");
		return ptr;
	}


	void OnRep_AlarmState();
	void BroadcastPhaseTimeout(struct FName* PhaseName);
	void BroadcastExtractionPickupChanged(class AKSObjectiveBase** InObjective, int* PickupsUsed, int* PickupsLeft);
	void BroadcastEscapePointChanged(TArray<class AKSPlayerState*>* ContainedPlayers);
};


// Class Killstreak.KSGameState_RoyaleBase
// 0x0028 (0x0ED0 - 0x0EA8)
class AKSGameState_RoyaleBase : public AKSGameState
{
public:
	struct FScriptMulticastDelegate                    OnZoneWait;                                               // 0x0EA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnZoneShrink;                                             // 0x0EB8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class AKSRoyaleSafeZone*                           _SafeZone;                                                // 0x0EC8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_RoyaleBase");
		return ptr;
	}


	void ZoneWaitStart(float* TimeUntilShrink);
	void ZoneShrinkStart(float* TimeToShrink);
};


// Class Killstreak.KSGameState_ExtractionRoyale
// 0x00C8 (0x0F98 - 0x0ED0)
class AKSGameState_ExtractionRoyale : public AKSGameState_RoyaleBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0ED0(0x0008) MISSED OFFSET
	class AKSTeamState*                                AttackingTeam;                                            // 0x0ED8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TArray<class AKSExtractionComputer*>               Computers;                                                // 0x0EE0(0x0010) (ZeroConstructor, Transient)
	struct FName                                       HackingObjectiveState;                                    // 0x0EF0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       LocalHackingObjectivState;                                // 0x0EF8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnCreditHacker;                                           // 0x0F00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCreditDehacker;                                         // 0x0F10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHackingStartedDel;                                      // 0x0F20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHackingSuccessfulDel;                                   // 0x0F30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDehackStartedDel;                                       // 0x0F40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDehackFailDel;                                          // 0x0F50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComputersUnlocked;                                      // 0x0F60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAttackingTeamEliminatedOrDownedDel;                     // 0x0F70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                CashPerWinDefendingPlayer;                                // 0x0F80(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HackerBonusCash;                                          // 0x0F84(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VictoryByHackBonusCash;                                   // 0x0F88(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DehackerBonusCash;                                        // 0x0F8C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VictoryByDehackBonusCash;                                 // 0x0F90(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0F94(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_ExtractionRoyale");
		return ptr;
	}


	void OnRep_HackingObjectiveState();
	void OnRep_AttackingTeam();
	bool IsAComputerHacked();
	void GetComputers(TArray<class AKSExtractionComputer*>* OutComputers);
	void CreditHacker(class AKSPlayerState** Hacker);
	void CreditDehacker(class AKSPlayerState** Dehacker);
	void ComputersUnlocked();
};


// Class Killstreak.KSGameState_Heist
// 0x0068 (0x0F10 - 0x0EA8)
class AKSGameState_Heist : public AKSGameState
{
public:
	TArray<struct FKSTeamCashPair>                     _TeamCash;                                                // 0x0EA8(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0EB8(0x0050) MISSED OFFSET
	int                                                Refreshes;                                                // 0x0F08(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0F0C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_Heist");
		return ptr;
	}


	void OnRep_TeamCash();
	void OnRep_Refreshes();
	int GetTeamCash(int* teamNum);
	int GetRefreshes();
};


// Class Killstreak.KSGameState_Sabotage
// 0x0000 (0x10E8 - 0x10E8)
class AKSGameState_Sabotage : public AKSGameState_Extraction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameState_Sabotage");
		return ptr;
	}

};


// Class Killstreak.KSSettingsSaveGame
// 0x0060 (0x0088 - 0x0028)
class UKSSettingsSaveGame : public USaveGame
{
public:
	TMap<struct FString, struct FString>               SavedSettingsConfig;                                      // 0x0028(0x0050) (ZeroConstructor)
	struct FString                                     SavedDisplayLanguage;                                     // 0x0078(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSettingsSaveGame");
		return ptr;
	}

};


// Class Killstreak.KSGameUserSettings
// 0x01D0 (0x02E8 - 0x0118)
class UKSGameUserSettings : public UGameUserSettings
{
public:
	EKSGamepadIcons                                    GamepadIconSet;                                           // 0x0118(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	struct FIntPoint                                   DefaultScreenResolution;                                  // 0x011C(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	struct FIntPoint                                   SavedScreenResolution;                                    // 0x0124(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5C];                                      // 0x012C(0x005C) MISSED OFFSET
	struct FString                                     SavedDisplayLanguage;                                     // 0x0188(0x0010) (ZeroConstructor, Config)
	TMap<struct FString, struct FString>               SavedSettingsConfig;                                      // 0x0198(0x0050) (ZeroConstructor, Config)
	TArray<struct FSettingConfigPair>                  SettingsConfig;                                           // 0x01E8(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0xF0];                                      // 0x01F8(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameUserSettings");
		return ptr;
	}


	bool GetTextChatEnabled();
	float GetSafeFrameScale();
};


// Class Killstreak.KSGameViewportClient
// 0x0038 (0x0328 - 0x02F0)
class UKSGameViewportClient : public UGameViewportClient
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x02F0(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGameViewportClient");
		return ptr;
	}

};


// Class Killstreak.KSGlobalShotListener
// 0x0010 (0x0340 - 0x0330)
class AKSGlobalShotListener : public AActor
{
public:
	struct FScriptMulticastDelegate                    ShotNotifyDelegate;                                       // 0x0330(0x0010) (ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGlobalShotListener");
		return ptr;
	}


	void ShotNotify(struct FKSGlobalShotInfo* ShotInfo);
};


// Class Killstreak.KSGrenadeTargetingModule
// 0x0230 (0x02C8 - 0x0098)
class UKSGrenadeTargetingModule : public UKSWeaponTargetingModule
{
public:
	bool                                               bUseMeshForVisualSource;                                  // 0x0098(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	struct FName                                       MeshSocketForSource;                                      // 0x009C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LeftMeshSocketForSource;                                  // 0x00A4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<EWeaponStateNew>                            StatesToShowArc;                                          // 0x00B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<EKSCharacterAimMode>                        AimModesToShowArc;                                        // 0x00C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ProjectileSimFrequency;                                   // 0x00D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSimTime;                                               // 0x00D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialStrideTime;                                        // 0x00D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	class UStaticMesh*                                 ArcTemplate;                                              // 0x00E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UMaterialInterface*>                  ArcSegmentMaterials;                                      // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       FirstSegmentScalarParameterName;                          // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          ImpactDecal;                                              // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          AimPostProcessMaterial;                                   // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       PostProcessStopLocationParameterName;                     // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       PostProcessRadiusParameterName;                           // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ImpactDecalSize;                                          // 0x0120(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                FuseWarningColor;                                         // 0x012C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                FuseSafeColor;                                            // 0x013C(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FuseWarningStartTime;                                     // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ESplineMeshAxis>                       SplineMeshAxisType;                                       // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	struct FVector2D                                   ArcSegmentScale;                                          // 0x0154(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BounceCount;                                              // 0x015C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxSegmentsPerBounceArc;                                  // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	TArray<class USplineMeshComponent*>                ArcComponent;                                             // 0x0168(0x0010) (ExportObject, ZeroConstructor)
	class UMaterialInstanceDynamic*                    ImpactMaterialInstance;                                   // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    PostProcessMaterialInstance;                              // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UMaterialInstanceDynamic*>            ArcSegmentMaterialInstances;                              // 0x0188(0x0010) (ZeroConstructor)
	class UDecalComponent*                             ImpactComponent;                                          // 0x0198(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UKSWeaponAsset_WithProjectile*               ProjectileAsset;                                          // 0x01A0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UKSWeaponAsset_Grenade*                      GrenadeAsset;                                             // 0x01A8(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class AKSProjectile*                               ProjectileCDO;                                            // 0x01B0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FPredictProjectilePathResult                CachedPredictedPathResults;                               // 0x01B8(0x00B8) (BlueprintVisible, BlueprintReadOnly, Transient)
	float                                              PredictedGrenadePathArcLength;                            // 0x0270(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x54];                                      // 0x0274(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGrenadeTargetingModule");
		return ptr;
	}


	bool ShouldShowPathGivenState();
	class UKSWeaponAsset_WithProjectile* GetWeaponAsset_WithProjectile();
	class UKSWeaponAsset_Grenade* GetWeaponAsset_Grenade();
	struct FVector GetTraceStartLocation();
};


// Class Killstreak.KSGroupedActivityEventTracker
// 0x0018 (0x00B8 - 0x00A0)
class UKSGroupedActivityEventTracker : public UKSEventTracker
{
public:
	class UKSActivityInstance*                         _ActivityInstance;                                        // 0x00A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UKSActivityInstance*>                 ChildActivityInstances;                                   // 0x00A8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGroupedActivityEventTracker");
		return ptr;
	}


	void OnChildActivityFinished(class UKSActivityInstance** Activity);
};


// Class Killstreak.KSGyroControlledPawn
// 0x0000 (0x0028 - 0x0028)
class UKSGyroControlledPawn : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGyroControlledPawn");
		return ptr;
	}

};


// Class Killstreak.KSHairSkeletalMeshComponent
// 0x0000 (0x0DE0 - 0x0DE0)
class UKSHairSkeletalMeshComponent : public UKSCharacterSkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSHairSkeletalMeshComponent");
		return ptr;
	}

};


// Class Killstreak.KSHeadShotTracker
// 0x0000 (0x0090 - 0x0090)
class UKSHeadShotTracker : public UKSAccoladeTracker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSHeadShotTracker");
		return ptr;
	}


	void HandleTrackerAccolade(class AKSPlayerState** PlayerState);
};


// Class Killstreak.KSHUDAnnouncementComponent
// 0x0038 (0x0130 - 0x00F8)
class UKSHUDAnnouncementComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnEndOfMatch;                                             // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class AKSPlayerController*                         OwningPlayer;                                             // 0x0108(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnAnnouncement;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResultAnnouncement;                                     // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSHUDAnnouncementComponent");
		return ptr;
	}


	class AKSPlayerController* GetPlayerController();
};


// Class Killstreak.KSHUDInterface
// 0x0000 (0x0028 - 0x0028)
class UKSHUDInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSHUDInterface");
		return ptr;
	}


	void SetHUDVisible(bool* bVisible);
	void OnToggleHUD();
	void OnLoadRoute(struct FName* Route, bool* ForceTransition);
	void HandleOpenTextChat(bool* BeginChatCommand);
	void CreateGameRuleWidget(struct FKSWidgetInfoParams* WidgetInfoParams);
	void BroadcastWidgetMessage(struct FName* Message);
	void BindEventToWidgetMessages(struct FScriptDelegate* Callback);
};


// Class Killstreak.KSImpactDecalComponent
// 0x0000 (0x02E0 - 0x02E0)
class UKSImpactDecalComponent : public UPoolableDecalComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSImpactDecalComponent");
		return ptr;
	}

};


// Class Killstreak.KSImpactEffect
// 0x0098 (0x03C8 - 0x0330)
class AKSImpactEffect : public AActor
{
public:
	class UParticleSystem*                             m_DefaultFX;                                              // 0x0330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FHitResult                                  m_SurfaceHit;                                             // 0x0338(0x0088) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class USceneComponent*                             m_pScene;                                                 // 0x03C0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSImpactEffect");
		return ptr;
	}

};


// Class Killstreak.KSInMatchStore
// 0x0028 (0x0120 - 0x00F8)
class UKSInMatchStore : public UActorComponent
{
public:
	class AKSPlayerController*                         _PlayerCon;                                               // 0x00F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    SuccessfulPurchase;                                       // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PurchaseError;                                            // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInMatchStore");
		return ptr;
	}


	void ServerRequestPurchase(struct FInMatchPurchaseInfo* request);
	void RequestPurchase(struct FInMatchPurchaseInfo* request);
	int GetStorePages(int* ItemsPerPage, struct FInMatchStoreFilterInfo* Filter);
	void GetStoreInventory(int* PageIndex, int* ItemsPerPage, struct FInMatchStoreFilterInfo* Filter, TArray<struct FInMatchStoreItem>* Items);
	void GetStockInCategory(struct FName* CategoryName);
	void ClientPurchaseSuccess(struct FInMatchPurchaseInfo* Purchase);
	void ClientPurchaseError(EInMatchStoreError* ErrorId);
};


// Class Killstreak.KSInputComponent
// 0x0000 (0x0180 - 0x0180)
class UKSInputComponent : public UInputComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInputComponent");
		return ptr;
	}

};


// Class Killstreak.KSInputFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UKSInputFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInputFunctionLibrary");
		return ptr;
	}


	EKSGamepadIcons STATIC_GetGamepadIconSet();
};


// Class Killstreak.KSInteractable
// 0x0000 (0x0028 - 0x0028)
class UKSInteractable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInteractable");
		return ptr;
	}


	bool UsePickupRangeForInteraction();
	bool ShouldDisplayProgress(class AKSCharacter** Character);
	bool IsInteracting(class AKSCharacter** QueriedChar);
	bool IsAutomaticInteraction(class AKSCharacter** QueriedChar);
	float GetRelativeHeight(class AKSCharacter** InteractingChar);
	class UClass* GetInteractionType();
	struct FText GetInteractionPromptText(class AKSCharacter** Character);
	struct FText GetInteractionProgressText(class AKSCharacter** Character);
	int GetInteractionPriority();
	struct FName GetInteractionMode(class AKSCharacter** Character);
	TArray<class AKSCharacter*> GetCurrentInteractors();
	int GetCurrentInteractNum();
	struct FKSInteractableCameraTransition GetCameraTransition();
	struct FVector GetBestInteractionPoint(class AActor** Interactor);
	bool FacesInteractable();
	void ConstructPrompt(class AKSCharacter** Character, struct FText* Prefix, struct FText* Suffix);
	bool CanInteractWhileSkydiving();
	bool CanInteractWhileMoving(class AKSCharacter** QueriedCharacter);
	bool CanInteractWhileDown(class AKSCharacter** QueriedChar);
	bool CanInteractFromBehind();
	bool CanInteract(class AKSCharacter** QueriedChar, bool* bPress, bool* bHold);
	bool AllowsMultipleInteraction();
};


// Class Killstreak.KSLootSiteBase
// 0x0120 (0x0450 - 0x0330)
class AKSLootSiteBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0330(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLootSiteSpawned;                                        // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLootSiteStateChanged;                                   // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	ELootSiteRarity                                    RarityTag;                                                // 0x0360(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0361(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLootSiteRarityChanged;                                  // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      SiteGroupNumber;                                          // 0x0378(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0379(0x0007) MISSED OFFSET
	TMap<ELootSiteRarity, class UDataTable*>           RarityLootSiteTableMap;                                   // 0x0380(0x0050) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET
	TWeakObjectPtr<class AKSItemDrop>                  SpawnedDrop;                                              // 0x03E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UObject*>                             ObjectsToKeepAround;                                      // 0x03E8(0x0010) (ZeroConstructor, Transient)
	float                                              SpawnRate;                                                // 0x03F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpawnDelay;                                               // 0x03FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AKSLootSiteBase*>                     ChildSpawners;                                            // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                              SurfaceCheckHeight;                                       // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsePrecisePlacement;                                     // 0x0414(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLootSiteState                              _LootSiteState;                                           // 0x0415(0x0002) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               CosmeticVisible;                                          // 0x0417(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                SpawnDelayTimer;                                          // 0x0418(0x0008)
	struct FVector                                     NavigationLocation;                                       // 0x0420(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x042C(0x000C) MISSED OFFSET
	class UKSItemStimuliSourceComponent*               _StimuliSourceComponent;                                  // 0x0438(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class AActor*>                              ActorsSeenBy;                                             // 0x0440(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLootSiteBase");
		return ptr;
	}


	void STATIC_WeightedSiteShuffle(TArray<class AKSLootSiteBase*>* SiteArray);
	void SpawnSpecificLoot(struct FLootSiteDropInfo* Loot);
	void SpawnSpecificItemDrop(class UKSItem** ItemAsset);
	void SpawnItemDropInternal();
	void SpawnItemDrop();
	void SpawnedDropDestroyed(class AActor** DestroyedActor);
	bool SetSiteActive(bool* Active);
	void Reset();
	void OnRep_RarityTag();
	void OnRep_LootSiteState();
	void OnRep_CosmeticVisible();
	void OnCosmeticVisibilityChanged(bool* Visible);
	bool IsLooted();
	bool IsActive();
	struct FLootSiteState GetLootSiteState();
	struct FVector FindBestDropLocation(class AKSItemDrop** InDrop);
	struct FLootSiteDropInfo ChoostLoot();
	struct FLootSiteDropInfo STATIC_ChooseRandomLoot(TArray<struct FLootSiteDropInfo>* InLoot, class UObject** WorldContextObject);
	class UKSItem* ChooseItemAsset();
};


// Class Killstreak.KSInteractableLootSite
// 0x0080 (0x04D0 - 0x0450)
class AKSInteractableLootSite : public AKSLootSiteBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0450(0x0008) MISSED OFFSET
	struct FText                                       LootBoxName;                                              // 0x0458(0x0018) (Edit, DisableEditOnInstance)
	bool                                               bChoosesBeforeInteraction;                                // 0x0470(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPressAndHoldPrompt;                                      // 0x0471(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLooted;                                                  // 0x0472(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0473(0x0005) MISSED OFFSET
	struct FLootSiteDropInfo                           ChosenLoot;                                               // 0x0478(0x0028) (Net)
	TArray<class AKSCharacter*>                        Looters;                                                  // 0x04A0(0x0010) (Net, ZeroConstructor)
	TArray<class UKSInteractionManager*>               LooterManagers;                                           // 0x04B0(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FLootSiteDropInfo>                   PossibleLoot;                                             // 0x04C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInteractableLootSite");
		return ptr;
	}


	void PickLoot();
	void OnSuccessfulInteraction();
	void OnRep_ChosenLoot();
	void OnRep_bLooted();
	float GetInteractionTime(class AKSCharacter** InteractingChar);
	void ClientBroadcastSpawned(class AKSPlayerController** Controller, bool* Removed);
};


// Class Killstreak.KSHoldOnlyStart
// 0x0000 (0x0030 - 0x0030)
class UKSHoldOnlyStart : public UKSInteractionState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSHoldOnlyStart");
		return ptr;
	}

};


// Class Killstreak.KSHoldOrTapNoRelease
// 0x0000 (0x0030 - 0x0030)
class UKSHoldOrTapNoRelease : public UKSHoldOrTapStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSHoldOrTapNoRelease");
		return ptr;
	}

};


// Class Killstreak.KSTimerNoRelease
// 0x0000 (0x0030 - 0x0030)
class UKSTimerNoRelease : public UKSWaitingForTimer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTimerNoRelease");
		return ptr;
	}

};


// Class Killstreak.KSInteractionManager
// 0x00B0 (0x01A8 - 0x00F8)
class UKSInteractionManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x00F8(0x0038) MISSED OFFSET
	float                                              CachedInteractionTimeStamp;                               // 0x0130(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	unsigned char                                      InteractRequestId;                                        // 0x0138(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0139(0x0007) MISSED OFFSET
	class UKSInteractionState*                         _State;                                                   // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)
	class UKSInteractionState*                         PreviousState;                                            // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData)
	class AKSCharacter*                                user;                                                     // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData)
	TScriptInterface<class UKSInteractable>            _Interactable;                                            // 0x0158(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FKSInteractableCameraTransition             _CameraTransition;                                        // 0x0168(0x0028)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0190(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInteractionManager");
		return ptr;
	}


	void ServerTap();
	void ServerStartNew(int* InInteractionId, class AActor** InInteractable, class AKSCharacter** InUser);
	void ServerHoldRelease();
	void ServerHold();
	void ServerCancel();
	void ClientInteractionStopped(int* InInteractionId, EKSInteractionResult* Result);
	void ClientInteractionStarted(int* InInteractionId, float* Duration);
};


// Class Killstreak.KSInteractionType
// 0x0220 (0x0248 - 0x0028)
class UKSInteractionType : public UObject
{
public:
	struct FName                                       InteractionMode;                                          // 0x0028(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSkinnableAudioEvent                        CharacterStartSound;                                      // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FSkinnableAudioEvent                        InteractableStartSound;                                   // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FSkinnableAudioEvent                        LocalStartSound;                                          // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<EKSInteractionResult, struct FSkinnableAudioEvent> CharacterEndSound;                                        // 0x0060(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<EKSInteractionResult, struct FSkinnableAudioEvent> InteractableEndSound;                                     // 0x00B0(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<EKSInteractionResult, struct FSkinnableAudioEvent> LocalEndSound;                                            // 0x0100(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bAutomaticallyPlayAudio;                                  // 0x0150(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachCharacterAutoAudioToSource;                        // 0x0151(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachInteractableAutoAudioToSource;                     // 0x0152(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0153(0x0005) MISSED OFFSET
	struct FKSParticleSystemAttachment                 CharacterStartEffect;                                     // 0x0158(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKSParticleSystemAttachment                 InteractableStartEffect;                                  // 0x0178(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<EKSInteractionResult, struct FKSParticleSystemAttachment> CharacterEndEffect;                                       // 0x0198(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<EKSInteractionResult, struct FKSParticleSystemAttachment> InteractableEndEffect;                                    // 0x01E8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UParticleSystemComponent*                    CurrentCharacterEffect;                                   // 0x0238(0x0008) (ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0240(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSInteractionType");
		return ptr;
	}


	class UParticleSystemComponent* MakeInteractableEffect(bool* bIsStart, class AKSCharacter** Character, class AActor** Interactable, EKSInteractionResult* Result, struct FVector* InteractableLocation);
	class UParticleSystemComponent* MakeCharacterEffect(bool* bIsStart, class AKSCharacter** Character, class AActor** Interactable, EKSInteractionResult* Result, struct FVector* InteractableLocation);
	struct FKSParticleSystemAttachment GetInteractableEffect(bool* bIsStart, EKSInteractionResult* Result);
	struct FKSParticleSystemAttachment GetCharacterEffect(bool* bIsStart, EKSInteractionResult* Result);
};


// Class Killstreak.KSItem_Gender
// 0x0008 (0x0160 - 0x0158)
class UKSItem_Gender : public UKSItem
{
public:
	EKSCharacterGender                                 _Gender;                                                  // 0x0158(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSItem_Gender");
		return ptr;
	}


	EKSCharacterGender GetGender();
};


// Class Killstreak.KSItemBundle
// 0x0010 (0x0168 - 0x0158)
class UKSItemBundle : public UKSItem
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0158(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSItemBundle.BundledItems

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSItemBundle");
		return ptr;
	}


	void GetSortedBundledItems();
};


// Class Killstreak.KSItemDataTable
// 0x0020 (0x00C0 - 0x00A0)
class UKSItemDataTable : public UDataTable
{
public:
	TArray<struct FString>                             DirectoriesToScan;                                        // 0x00A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ItemClassesToFilter;                                      // 0x00B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSItemDataTable");
		return ptr;
	}

};


// Class Killstreak.ItemDropWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class UItemDropWidgetInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.ItemDropWidgetInterface");
		return ptr;
	}


	void ShowLabel();
	void SetOwningWidgetComponent(class UActorComponent** WidgetComp);
	void SetLabel(struct FText* LabelText);
	void HideLabel();
};


// Class Killstreak.KSItemStimuliSourceComponent
// 0x0000 (0x0110 - 0x0110)
class UKSItemStimuliSourceComponent : public UAIPerceptionStimuliSourceComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSItemStimuliSourceComponent");
		return ptr;
	}

};


// Class Killstreak.KSJobItem
// 0x0348 (0x04A0 - 0x0158)
class UKSJobItem : public UKSItem
{
public:
	bool                                               IsStarterJob;                                             // 0x0158(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0159(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.JobDefaultSkin
	unsigned char                                      UnknownData02[0x28];                                      // 0x0188(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.JobRoleItem
	unsigned char                                      UnknownData03[0x28];                                      // 0x01B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.UniqueItem
	unsigned char                                      UnknownData04[0x28];                                      // 0x01D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PrimaryWeaponOptionOne
	bool                                               PrimaryWeaponOptionOneIsDefault;                          // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0201(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData06[0x28];                                      // 0x0201(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PrimaryWeaponOptionTwo
	bool                                               PrimaryWeaponOptionTwoIsDefault;                          // 0x0230(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0231(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData08[0x28];                                      // 0x0231(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.SecondaryWeaponOptionOne
	bool                                               SecondaryWeaponOptionOneIsDefault;                        // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData10[0x28];                                      // 0x0261(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.SecondaryWeaponOptionTwo
	bool                                               SecondaryWeaponOptionTwoIsDefault;                        // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0291(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData12[0x28];                                      // 0x0291(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.MeleeWeapon
	unsigned char                                      UnknownData13[0x28];                                      // 0x02C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.QuickMeleeWeapon
	unsigned char                                      UnknownData14[0x10];                                      // 0x02E8(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSJobItem.Passives
	unsigned char                                      UnknownData15[0x28];                                      // 0x02F8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.GadgetOptionOne
	bool                                               GadgetOptionOneIsDefault;                                 // 0x0320(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x7];                                       // 0x0321(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData17[0x28];                                      // 0x0321(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.GadgetOptionTwo
	bool                                               GadgetOptionTwoIsDefault;                                 // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData19[0x28];                                      // 0x0351(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PerkOptionOne
	bool                                               PerkOptionOneIsDefault;                                   // 0x0380(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData21[0x28];                                      // 0x0381(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PerkOptionTwo
	bool                                               PerkOptionTwoIsDefault;                                   // 0x03B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData23[0x28];                                      // 0x03B1(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PerkOptionThree
	bool                                               PerkOptionThreeIsDefault;                                 // 0x03E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData25[0x28];                                      // 0x03E1(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PerkOptionFour
	bool                                               PerkOptionFourIsDefault;                                  // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData26[0x7];                                       // 0x0411(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData27[0x28];                                      // 0x0411(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PerkOptionFive
	bool                                               PerkOptionFiveIsDefault;                                  // 0x0440(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x7];                                       // 0x0441(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData29[0x28];                                      // 0x0441(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.PerkOptionSix
	bool                                               PerkOptionSixIsDefault;                                   // 0x0470(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData30[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData31[0x28];                                      // 0x0471(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobItem.SmallJobIcon

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSJobItem");
		return ptr;
	}


	bool IsValidJobItem(class UKSItem** KSItem);
	void GetSoftSmallJobIcon();
	class UTexture2D* GetSmallJobIcon();
	bool GetQuickMeleeWeapon();
	bool GetMeleeWeapon();
	class UKSJobRole* GetJobRole();
	class UKSSkinBundle* GetDefaultSkin();
	bool GetDefaultSecondaryWeapon();
	bool GetDefaultPrimaryWeapon();
	bool GetDefaultPerks();
	bool GetDefaultGadget();
	bool GetAlternativeSecondaryWeapon();
	bool GetAlternativePrimaryWeapon();
	bool GetAlternativeGadget();
};


// Class Killstreak.JobLoadout
// 0x0058 (0x0080 - 0x0028)
class UJobLoadout : public UObject
{
public:
	class UKSJobItem*                                  _JobItem;                                                 // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TMap<EJobLoadoutSlot, class UKSItem*>              SlotItems;                                                // 0x0030(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.JobLoadout");
		return ptr;
	}


	bool ValidateAttachmentForWeapon(class UKSItem** AttachmentToCheck, class UKSItem** Weapon);
	void SetToJobDefaults(class UKSJobItem** InJobItem);
	bool SetSlot(EJobLoadoutSlot* JobSlot, class UKSItem** KSItem, bool* IgnoreJobItem);
	bool GetSlot(EJobLoadoutSlot* JobSlot, class UKSItem** OutKSItem);
	bool GetAsMap(TMap<EJobLoadoutSlot, class UKSItem*>* OutMap);
	TArray<EJobLoadoutSlot> CleanJobLoadoutItems();
};


// Class Killstreak.KSJobSelectionComponent
// 0x0180 (0x0278 - 0x00F8)
class UKSJobSelectionComponent : public UActorComponent
{
public:
	struct FJobSelectionList                           _JobSelectionList;                                        // 0x00F8(0x0108) (Net)
	int                                                JobTableVendorId;                                         // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	class UJobCollection*                              _JobCollection;                                           // 0x0208(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnJobSelectionEntryAdded;                                 // 0x0210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobSelectionEntryChanged;                               // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobSelectionInitialized;                                // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllPlayersLockedIn;                                     // 0x0240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0250(0x0010) MISSED OFFSET
	class AKSTeamState*                                CachedOwner;                                              // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bSelectionEnabled;                                        // 0x0268(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	int                                                EntryCount;                                               // 0x026C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0270(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSJobSelectionComponent");
		return ptr;
	}


	void OnRep_EntryCount();
	void OnPhaseChange(struct FName* NewPhase);
	void NewPlayerStarting(class APlayerController** NewPlayer);
	void NewBotStarting(class AKSAIController** NewBot);
	bool IsReady();
	void InitializeJobSelectionList();
	TArray<struct FJobSelectionEntry> GetJobSelectionEntries();
};


// Class Killstreak.KSJobSelectionManager
// 0x0038 (0x0130 - 0x00F8)
class UKSJobSelectionManager : public UActorComponent
{
public:
	bool                                               bJobManagerReady;                                         // 0x00F8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnJobSelectionManagerReady;                               // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobSelectionAcknowledge;                                // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class AKSPlayerController*                         CachedOwner;                                              // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData)
	class UKSJobSelectionComponent*                    CachedSelectionComponent;                                 // 0x0128(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSJobSelectionManager");
		return ptr;
	}


	void ServerRequestSelectionState(int* ItemId, EJobSelectionState* State);
	bool RequestSelectionState(int* ItemId, EJobSelectionState* State);
	void PlayerTeamSet(class AKSPlayerState** PlayerState);
	void PlayerStateSet(class AKSPlayerState** PlayerState);
	void JobSelectionComponentReady(class UKSJobSelectionComponent** InSelectionComponent);
	bool IsReady();
	class UKSJobSelectionComponent* GetJobSelectionComponent();
	void ClientAcknowledgeStateSelection(int* ItemId, bool* bSuccess, EJobSelectionState* RequestState);
};


// Class Killstreak.KSJobSelectPreviewActor
// 0x0170 (0x04A0 - 0x0330)
class AKSJobSelectPreviewActor : public AInfo
{
public:
	class UClass*                                      LobbyCharacterClass;                                      // 0x0330(0x0008) (Edit, ZeroConstructor, NoClear, IsPlainOldData)
	class AKSLobbyCharacter*                           ChildLobbyCharacter;                                      // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ModelViewerDelay;                                         // 0x0340(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                QueuedJobModelViewerId;                                   // 0x0344(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CurrentJobModelViewerId;                                  // 0x0348(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x034C(0x0014) MISSED OFFSET
	int                                                PositionIndex;                                            // 0x0360(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bKeepActiveJobLoaded;                                     // 0x0364(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bKeepActiveJobVisibleWhileLoading;                        // 0x0365(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0366(0x0002) MISSED OFFSET
	class USceneComponent*                             BaseComponent;                                            // 0x0368(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FTimerHandle                                JobModelViewerTimer;                                      // 0x0370(0x0008)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0378(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobSelectPreviewActor.ActiveJobItem
	unsigned char                                      UnknownData03[0x28];                                      // 0x03A0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobSelectPreviewActor.ActiveSkinBundle
	unsigned char                                      UnknownData04[0x20];                                      // 0x03C8(0x0020) MISSED OFFSET
	unsigned char                                      UnknownData05[0x28];                                      // 0x03C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobSelectPreviewActor.PendingJobItem
	unsigned char                                      UnknownData06[0x28];                                      // 0x0410(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSJobSelectPreviewActor.PendingSkinBundle
	unsigned char                                      UnknownData07[0x20];                                      // 0x0438(0x0020) MISSED OFFSET
	EKSJobSelectPreviewLoadState                       CachedState;                                              // 0x0458(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1F];                                      // 0x0459(0x001F) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnJobPreviewStateChangedDel;                              // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x18];                                      // 0x0488(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSJobSelectPreviewActor");
		return ptr;
	}


	void SetModelViewerDelay(float* Timer);
	void SetJobToQueuedId();
	void SetJob();
	void SetHoveredJob(int* JobId);
	void PreLobbyCharacterDestroy();
	void PostLobbyCharacterSpawned();
	EKSJobSelectPreviewLoadState GetPreviewLoadState();
	int GetPositionIndex();
	class AKSLobbyCharacter* GetLobbyCharacter();
	struct FText GetCharacterName();
	void BlueprintStateChanged(EKSJobSelectPreviewLoadState* PreviousState);
};


// Class Killstreak.KSJsonDataFactory
// 0x00C0 (0x0108 - 0x0048)
class UKSJsonDataFactory : public UPUMG_JsonDataFactory
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET
	TMap<struct FString, class UTexture2DDynamic*>     mapFilePathToTexture;                                     // 0x0058(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x60];                                      // 0x00A8(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSJsonDataFactory");
		return ptr;
	}

};


// Class Killstreak.KSKillCam
// 0x01A8 (0x01D0 - 0x0028)
class UKSKillCam : public UObject
{
public:
	class UClass*                                      KillCamControllerClass;                                   // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UWorld*                                      KillCamWorld;                                             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackage*                                    KillCamWorldPackage;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class AKSKillCamController*                        KillCamSpectatorController;                               // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<class UAkComponent*, float>                   OriginalWorldMutedAudio;                                  // 0x0048(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0098(0x0040) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKillCamEnabled;                                         // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x00E8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKillCamViewPawn;                                        // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0110(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKillCamViewProjectile;                                  // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0138(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPrepareKillCamPlayback;                                 // 0x0150(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0160(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFinishKillCamPlayback;                                  // 0x0178(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0x48];                                      // 0x0188(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSKillCam");
		return ptr;
	}


	void KillCamStop();
	void DestroySpectatorController();
};


// Class Killstreak.KSPlayerController
// 0x0538 (0x0BE8 - 0x06B0)
class AKSPlayerController : public APGame_PlayerController
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x06B0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKSPlayerStateReplicatedDel;                             // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x06C8(0x0018) MISSED OFFSET
	TArray<struct FDeferredViewTargetChangeInfo>       DeferredViewTargetChangedUpdate;                          // 0x06E0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x06F0(0x0008) MISSED OFFSET
	class AKSPlayerState*                              CurrentSpectateTarget;                                    // 0x06F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AController>                  CurrentSpectateController;                                // 0x0700(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       CurrentSpectateViewTarget;                                // 0x0708(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                                      // 0x0710(0x0040) MISSED OFFSET
	struct FClientSpec                                 _ClientSpec;                                              // 0x0750(0x00E0)
	bool                                               bRecordingFrameRateInfo;                                  // 0x0830(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0831(0x0003) MISSED OFFSET
	struct FClientStatistics                           Render;                                                   // 0x0834(0x0018) (Transient)
	struct FClientStatistics                           Game;                                                     // 0x084C(0x0018) (Transient)
	struct FClientStatistics                           gpu;                                                      // 0x0864(0x0018) (Transient)
	struct FClientStatistics                           frame;                                                    // 0x087C(0x0018) (Transient)
	struct FClientStatistics                           rhit;                                                     // 0x0894(0x0018) (Transient)
	float                                              FrameRateDataSmoothingFactor;                             // 0x08AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FrameRateDataPushCountdown;                               // 0x08B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	struct FName                                       DefaultCameraName;                                        // 0x08B4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastPingCalcTime;                                         // 0x08BC(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x08C0(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData06[0x28];                                      // 0x08C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerController.HUDClass
	class UKSPlayerShotListener*                       _ShotListener;                                            // 0x08F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnHUDSetup;                                               // 0x08F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x48];                                      // 0x0908(0x0048) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnViewedPawnChangedDel;                                   // 0x0950(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0960(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnControllerChangedDel;                                   // 0x0978(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpectateStateChanged;                                   // 0x0988(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0998(0x0008) MISSED OFFSET
	class AKSCharacterBase*                            _KSCharacter;                                             // 0x09A0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	bool                                               IsInTouchMode;                                            // 0x09A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               StartInTouchMode;                                         // 0x09A9(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x09AA(0x0002) MISSED OFFSET
	float                                              TouchModeAutoFireRadius;                                  // 0x09AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TouchModeAutoFireTickRate;                                // 0x09B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData11[0xC];                                       // 0x09B4(0x000C) MISSED OFFSET
	class URenderThreadInputHandler*                   _RenderThreadInputHandler;                                // 0x09C0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTouchModeChanged;                                       // 0x09C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCurveFloat*                                 MouseLookSensitivityCurve;                                // 0x09D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FInterpCurveFloat                           LookSensitivityToMaxLookSpeed;                            // 0x09E0(0x0018) (Edit, ZeroConstructor)
	float                                              BaseGamepadTurnRateScale;                                 // 0x09F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BaseGamepadLookUpRateScale;                               // 0x09FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   GamepadRightStickVelocity;                                // 0x0A00(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    AccumulatedRotationInput;                                 // 0x0A08(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0A14(0x0004) MISSED OFFSET
	struct FVector2D                                   GamepadLook;                                              // 0x0A18(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      GamepadLookSpeedManagerClass;                             // 0x0A20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      JoyConLookSpeedManagerClass;                              // 0x0A28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSGamepadLookSpeedManager*                  _GamepadLookSpeedManager;                                 // 0x0A30(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UKSGamepadLookSpeedManager*                  JoyConLookSpeedManager;                                   // 0x0A38(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              InputYawScaleADS;                                         // 0x0A40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputPitchScaleADS;                                       // 0x0A44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputRollScaleADS;                                        // 0x0A48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	struct FRotator                                    ThisFrameKickbackRotationCache;                           // 0x0A4C(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bKickbackEnabled;                                         // 0x0A58(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0A59(0x0007) MISSED OFFSET
	TArray<struct FKickbackPlayback>                   ActiveKickback;                                           // 0x0A60(0x0010) (ZeroConstructor)
	bool                                               bKickbackRecoveryActive;                                  // 0x0A70(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0A71(0x0003) MISSED OFFSET
	float                                              KickbackRecoveryDelayRemaining;                           // 0x0A74(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              KickbackRecoveryAcceleration;                             // 0x0A78(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              KickbackRecoveryTargetRate;                               // 0x0A7C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              KickbackRecoveryRate;                                     // 0x0A80(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxCumulativeKickbackVerticalAngle;                       // 0x0A84(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    KickbackRecoveryRotation;                                 // 0x0A88(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    KickbackCancelRotation;                                   // 0x0A94(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              KickbackCancelThreshold;                                  // 0x0AA0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0AA4(0x0004) MISSED OFFSET
	bool                                               bAllowKickbackRecoveryCancel;                             // 0x0AA8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseSmartKickbackRecovery;                                // 0x0AA9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x2];                                       // 0x0AAA(0x0002) MISSED OFFSET
	float                                              KickbackRecoveryEndThreshold;                             // 0x0AAC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickbackScalingFactorMouse;                               // 0x0AB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0AB4(0x0004) MISSED OFFSET
	class UKSAimAssistComponent*                       _AimAssistComponent;                                      // 0x0AB8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    ViewedPawnTakeDamageDel;                                  // 0x0AC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ViewedPawnTakeArmorDamageDel;                             // 0x0AD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ViewedPawnInstigateDamageDel;                             // 0x0AE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ViewedPawnInstigateDamageNotifyDel;                       // 0x0AF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OwnedPawnInstigateDamageNotifyDel;                        // 0x0B00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OwnedPawnInstigateWeaponFireNotifyDel;                    // 0x0B10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OwnedPawnTakesDamageNotifyDel;                            // 0x0B20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData18[0x10];                                      // 0x0B30(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCombatSummaryReceived;                                  // 0x0B40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UKSCombatLogComponent>        _CombatLogComponent;                                      // 0x0B50(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData19[0x38];                                      // 0x0B58(0x0038) MISSED OFFSET
	bool                                               bFirstPawnAcknowledged;                                   // 0x0B90(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFirstCharacterApparelFinished;                           // 0x0B91(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFirstCharacterWeaponsEquipped;                           // 0x0B92(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bKillcamWorldReady;                                       // 0x0B93(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0B94(0x0008) MISSED OFFSET
	float                                              LastTimePlayedTime;                                       // 0x0B9C(0x0004) (ZeroConstructor, IsPlainOldData)
	class UKSPingManager*                              _PingManager;                                             // 0x0BA0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSJobSelectionManager*                      _JobSelectionManager;                                     // 0x0BA8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData21[0x30];                                      // 0x0BB0(0x0030) MISSED OFFSET
	class UKSEquipmentManagerComponent*                _EquipmentManagerComponent;                               // 0x0BE0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerController");
		return ptr;
	}


	void ViewedPawnTakeDamage(class AActor** InActor, float* DamageAmount, class UDamageType** DamageTypeCDO, class AController** EventInstigator, class AActor** DamageCauser);
	void ViewedPawnTakeArmorDamage(class AActor** InActor, float* DamageAmount, class UDamageType** DamageTypeCDO, class AController** EventInstigator, class AActor** DamageCauser);
	void ViewedPawnInstigatedDamageNotify(class AKSCharacterBase** InPawn, struct FCombatEventInfo* DamageInfo);
	void ViewedPawnInstigatedDamage(class AKSCharacterBase** InPawn, float* DamageAmount, class UDamageType** DamageTypeCDO, class AActor** Target, class AActor** DamageCauser);
	void TriggerInputAction(struct FName* ActionName, TEnumAsByte<EInputEvent>* InputEvent);
	void ToggleTouch();
	void SetGamepadTurnRateScale(float* NewScale);
	void SetGamepadLookUpRateScale(float* NewScale);
	void ServerUpdatePing(float* ExactPing);
	void ServerPushFrameRateData(struct FClientStatistics* PushedRender, struct FClientStatistics* PushedGame, struct FClientStatistics* PushedGPU, struct FClientStatistics* PushedFrame, struct FClientStatistics* PushedRHI);
	void ServerPushClientSpec(struct FClientSpec* PushedClientSpec);
	void ServerNotifyClientSimpleSimulation(bool* UseSimple);
	void ServerLagCompensationVisualization(bool* bEnable);
	void ServerChangeSpectateTarget(bool* bForward);
	void ServerBouncePing(float* Timestamp);
	void ReportWeaponsEquipped();
	void ReportTimeRevealedCharacter(class AKSCharacterBase** RevealedChar, float* Duration);
	void ReportSetRevealCharacter(class AKSCharacterBase** TargetChar, bool* Revealed);
	void ReportKillcamWorldReady();
	void ReportApparelApplied();
	void ReportAllReadyConditionsMet();
	bool PlayEmoteByEquipPoint(struct FGameplayTag* InEquipPoint);
	void OnSpectateViewTargetDestroyed(class AActor** InViewTarget);
	void OnSpectateControllerDestroyed(class AActor** InActor);
	void OnRep_CombatLogComponent();
	void OnPrimaryPawnDestroyed(class AActor** InPrimaryPawn);
	void OnKillcamWorldReady();
	void OnCurrentSpectateTargetDestroyed(class AActor** DestroyedActor);
	void OnCharacterWeaponsEquipped();
	void OnCharacterApparelApplied();
	void LocalStopAimDownSights();
	void LocalStartAimDownSights();
	bool IsInShownWorld();
	int GetValidSpectateTargetCount();
	class APawn* GetUIPawn();
	class AKSCharacter* GetUIKSCharacter();
	class UKSPlayerShotListener* GetShotListener();
	class AKSCharacterBase* GetPrimaryPawn();
	class UKSPingManager* GetPingManager();
	class UKSJobSelectionManager* GetJobSelectionManager();
	class UKSHUDAnnouncementComponent* GetHUDAnnouncmentComponent();
	class UKSGamepadLookSpeedManager* GetGamepadLookSpeedManager();
	class UKSEquipmentManagerComponent* GetEquipmentManagerComponent();
	class UKSAimAssistComponent* GetAimAssistComponent();
	void FillInClientSpec();
	void EventViewedPawnTakeDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** DamageCauser, struct FVector* DamageOrigin);
	void EventViewedPawnTakeArmorDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** DamageCauser, struct FVector* DamageOrigin);
	void EventViewedPawnInstigatedDamageNotify(struct FCombatEventInfo* DamageInfo);
	void EventViewedPawnInstigatedDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** Target, class AActor** DamageCauser);
	void ControllerChangedForPickupLabeling(class AKSPlayerController** NewController);
	void CompVis(bool* bEnable);
	void ClientViewedPawnTakeDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** DamageCauser, struct FVector* DamageOrigin, bool* bPrimaryPawn);
	void ClientViewedPawnTakeArmorDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** DamageCauser, struct FVector* DamageOrigin, bool* bPrimaryPawn);
	void ClientViewedPawnInstigatedDamageNotify(struct FCombatEventInfo* DamageInfo, bool* bPrimaryPawn);
	void ClientViewedPawnInstigatedDamage(float* DamageAmount, class UClass** DamageTypeClass, class AActor** Target, class AActor** DamageCauser, bool* bPrimaryPawn);
	void ClientSpectateTeam();
	void ClientSignalEndOfMatch();
	void ClientReturnPing(float* Timestamp);
	void ClientPlayInstantReplay(float* TimeToRewind, float* Duration, float* DilationStart, float* DilationAmount);
	void ClientDrawDebugSphere(struct FVector* Center, float* Radius, struct FColor* Color, float* Duration);
	void ClientDrawDebugLine(struct FVector* start, struct FVector* end, struct FColor* Color, float* Duration);
	void ClientDrawDebugCapsule(struct FTransform* Transform, float* Radius, float* HalfHeight, struct FColor* Color, float* Duration);
	void ClientDrawDebugBox(struct FTransform* Transform, struct FVector* Extent, struct FColor* Color, float* Duration);
	void CachePostMatchScoreboard(struct FScoreboardStats* ScoreboardStats);
	void CachePostMatchInfo(struct FPlayerRewardsSummaryReplicated* RewardsReplicated);
	void ApplyKickback(struct FInterpCurveVector2D* KickbackCurve, float* InKickbackRecoveryDelay, float* InKickbackRecoveryRate, float* InKickbackRecoveryAccel, float* InMaxCumulativeKickbackVerticalAngle, float* ScalingFactor);
	void AimStateChangedForPickupLabeling(EKSCharacterAimMode* AimState);
	void AddTimePlayed();
};


// Class Killstreak.KSKillCamController
// 0x0070 (0x0C58 - 0x0BE8)
class AKSKillCamController : public AKSPlayerController
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0BE8(0x0068) MISSED OFFSET
	class AKSKillCamObjectCamera*                      _KillCamObjectCamera;                                     // 0x0C50(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSKillCamController");
		return ptr;
	}

};


// Class Killstreak.KSKillCamObjectCamera
// 0x0018 (0x0348 - 0x0330)
class AKSKillCamObjectCamera : public AActor
{
public:
	class UKSSpringArmComponent*                       MainCameraBoom;                                           // 0x0330(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            MainCameraComponent;                                      // 0x0338(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             EmptyComponent;                                           // 0x0340(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSKillCamObjectCamera");
		return ptr;
	}

};


// Class Killstreak.KSKillLeaderTracker
// 0x0048 (0x00D8 - 0x0090)
class UKSKillLeaderTracker : public UKSAccoladeTracker
{
public:
	struct FTrackedPlayers                             CurrentLeader;                                            // 0x0090(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FTrackedPlayers                             TempNewLeader;                                            // 0x00A8(0x0018) (BlueprintVisible, BlueprintReadOnly)
	int                                                HighestKillCount;                                         // 0x00C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<struct FTrackedPlayers>                     _TrackedPlayers;                                          // 0x00C8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSKillLeaderTracker");
		return ptr;
	}


	void ProcessElimEntry(class AKSPlayerState** InstigatorPlayerState);
	void HandleTrackerAccolade(class AKSPlayerState** Player);
	bool FindPlayerEntry(class AKSPlayerState** InstigatorPlayerState, int* PlayerIndex);
	bool CheckKillLeader();
};


// Class Killstreak.KSLoadoutBundle
// 0x0060 (0x01C8 - 0x0168)
class UKSLoadoutBundle : public UKSItemBundle
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0168(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSLoadoutBundle.LoadoutClass
	unsigned char                                      UnknownData01[0x28];                                      // 0x0190(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSLoadoutBundle.Gadget
	unsigned char                                      UnknownData02[0x10];                                      // 0x01B8(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSLoadoutBundle.BundledAbilities

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLoadoutBundle");
		return ptr;
	}


	bool GetWeapons();
	bool GetWeaponItemIds(TArray<int>* OutWeaponItemIds);
	bool GetPerks();
	bool GetPerkItemIds(TArray<int>* OutPerkItemIds);
	bool GetBundlePerks(TArray<class UKSPlayerMod*>* OutPerks);
	bool GetBundleAbilities(TArray<class UKSPlayerMod_Activated*>* OutAbilities);
	bool GetAttachments();
	bool GetAttachmentItemIds(TArray<int>* OutAttachmentItemIds);
	bool GetAbilityItemIds(TArray<int>* OutAbilityItemIds);
	bool GetAbilities();
};


// Class Killstreak.KSLoadoutClass
// 0x00B8 (0x0210 - 0x0158)
class UKSLoadoutClass : public UKSItem
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0158(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSLoadoutClass.DynamicPoseImage
	struct FLinearColor                                ThemeColorLight;                                          // 0x0180(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ThemeColorDark;                                           // 0x0190(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01A0(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSLoadoutClass.PerkCategories
	unsigned char                                      UnknownData02[0x10];                                      // 0x01B0(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSLoadoutClass.AvailablePerks
	unsigned char                                      UnknownData03[0x10];                                      // 0x01C0(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSLoadoutClass.AvailableAbilities
	unsigned char                                      UnknownData04[0x10];                                      // 0x01D0(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSLoadoutClass.AvailableGadgets
	bool                                               CanUseGlobalGadgets;                                      // 0x01E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x01E1(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData06[0x10];                                      // 0x01E1(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSLoadoutClass.AvailablePistols
	bool                                               CanUseGlobalPistols;                                      // 0x01F8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData08[0x10];                                      // 0x01F9(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSLoadoutClass.AutoEquippedMods

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLoadoutClass");
		return ptr;
	}


	class UTexture2D* GetDynamicPoseImage(bool* bAllowSyncLoad);
};


// Class Killstreak.KSLoadoutRuleComponent
// 0x0000 (0x00F8 - 0x00F8)
class UKSLoadoutRuleComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLoadoutRuleComponent");
		return ptr;
	}


	bool AllowItem(class UKSItem** Item, EJobLoadoutSlot* Slot);
};


// Class Killstreak.KSLobbyCharacter
// 0x01A0 (0x3250 - 0x30B0)
class AKSLobbyCharacter : public AKSCharacter
{
public:
	unsigned char                                      UnknownData00[0x160];                                     // 0x30B0(0x0160) MISSED OFFSET
	struct FName                                       ViewModelName;                                            // 0x3210(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	ELobbyCharacterIndex                               _CharacterIndex;                                          // 0x3218(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               ShouldHideInGame;                                         // 0x3219(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWereTexturesStreamedIn;                                  // 0x321A(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsSet;                                                   // 0x321B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHideUntilTexturesStream;                                 // 0x321C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceEnableClothSim;                                     // 0x321D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPrestreamTextures;                                       // 0x321E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x321F(0x0001) MISSED OFFSET
	int                                                ForcedLodModel;                                           // 0x3220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x3224(0x0004) MISSED OFFSET
	struct FString                                     OwningPlayerName;                                         // 0x3228(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	ELobbyCharacterAnimState                           CurrentAnimState;                                         // 0x3238(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x3239(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVisibilityChangedDel;                                   // 0x3240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLobbyCharacter");
		return ptr;
	}


	void VisibilityChanged(bool* IsVisible);
	bool UpdateHiddenInGame();
	void UnsetCharacter();
	void ShowLobbyNameplate();
	void SetupLobbyCharacter(struct FString* PlayerName, class UKSItem** AvatarItem, bool* IsLeader);
	void SetShouldHideInGame(bool* ShouldHide);
	void SetLobbyNameplate(struct FString* PlayerName, class UKSItem** AvatarItem, bool* IsLeader);
	void SetLobbyCharacterAnimState(ELobbyCharacterAnimState* AnimState);
	void SetCharacterSkin(class UKSItem** SkinItem);
	void OnLobbyPresenceStateChange(ELobbyPresenceState* LobbyPresenceState);
	bool IsSet();
	bool IsLobbyCharacter();
	void HideLobbyNameplate();
	ELobbyCharacterAnimState GetCurrentAnimState();
	ELobbyCharacterIndex GetCharacterIndex();
};


// Class Killstreak.KSLobbyCameraActor
// 0x0010 (0x08A0 - 0x0890)
class AKSLobbyCameraActor : public ACameraActor
{
public:
	struct FName                                       CameraTag;                                                // 0x0890(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0898(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLobbyCameraActor");
		return ptr;
	}

};


// Class Killstreak.KSLobbyLevelSequenceActor
// 0x0008 (0x03B8 - 0x03B0)
class AKSLobbyLevelSequenceActor : public ALevelSequenceActor
{
public:
	struct FName                                       SequenceTag;                                              // 0x03B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLobbyLevelSequenceActor");
		return ptr;
	}

};


// Class Killstreak.KSLocalPlayer
// 0x0038 (0x02B8 - 0x0280)
class UKSLocalPlayer : public UPCom_LocalPlayer
{
public:
	struct FScriptMulticastDelegate                    OnLocalViewedPawnChangedDel;                              // 0x0280(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0290(0x0018) MISSED OFFSET
	class UKSKillCam*                                  _KillCam;                                                 // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      KillCamControllerClass;                                   // 0x02B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLocalPlayer");
		return ptr;
	}


	bool IsKillCamReplayActive();
	class UKSKillCam* GetKillCam();
};


// Class Killstreak.KSLocomotionAnimInst
// 0x0000 (0x0F10 - 0x0F10)
class UKSLocomotionAnimInst : public UKSCharacterAnimInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLocomotionAnimInst");
		return ptr;
	}

};


// Class Killstreak.KSLongShot
// 0x0008 (0x0098 - 0x0090)
class UKSLongShot : public UKSAccoladeTracker
{
public:
	float                                              DistanceRequirement;                                      // 0x0090(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSLongShot");
		return ptr;
	}


	void HandleTrackerAccolade(class AKSPlayerState** PlayerState);
};


// Class Killstreak.KSMapDifficultyManager
// 0x0168 (0x0498 - 0x0330)
class AKSMapDifficultyManager : public AActor
{
public:
	TArray<class UKSBTDifficulty*>                     Difficulties;                                             // 0x0330(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TMap<int, int>                                     InitialTeamDifficulties;                                  // 0x0340(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                MinDifficultyWhenDefeated;                                // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	TArray<class UClass*>                              ApplicableGameModes;                                      // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      WinLossRatioAdjustEasier;                                 // 0x03A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      WinLossRatioAdjustHarder;                                 // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               AllowAdjustmentAtStartOfRound;                            // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowAdjustmentForDeaths;                                 // 0x03C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03CA(0x0002) MISSED OFFSET
	int                                                DeathsPerAdjustmentCalculation;                           // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowAdjustmentForTeamDeaths;                             // 0x03D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	int                                                TeamDeathsPerAdjustmentCalculation;                       // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowAdjustmentForObjectivesClaimed;                      // 0x03D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03D9(0x0003) MISSED OFFSET
	int                                                ObjectivesPerAdjustmentCalculation;                       // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowAdjustmentForTimeElapsed;                            // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	int                                                SecondsPerAdjustmentCalculation;                          // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      KillDeathRatioAdjustEasier;                               // 0x03E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      KillDeathRatioAdjustHarder;                               // 0x03F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      RoundWinPercentAdjustEasier;                              // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      RoundWinPercentAdjustHarder;                              // 0x0418(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData05[0x70];                                      // 0x0428(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMapDifficultyManager");
		return ptr;
	}


	void HandleTeamCreated(class AKSTeamState** TeamState);
	void HandleRoundStart(struct FRoundInitState* RoundState);
	void HandleRoundSetup(struct FRoundInitState* RoundState);
	void HandlePhaseChange(struct FName* PreviousPhaseName, struct FName* NewPhaseName);
	void HandleObjectiveClaimed();
	void HandleCharacterOnTeamKilled(class AKSTeamState** TeamState);
};


// Class Killstreak.KSPrimaryAssetLabel
// 0x0000 (0x0070 - 0x0070)
class UKSPrimaryAssetLabel : public UPrimaryAssetLabel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPrimaryAssetLabel");
		return ptr;
	}

};


// Class Killstreak.KSMapLabel
// 0x00C0 (0x0130 - 0x0070)
class UKSMapLabel : public UKSPrimaryAssetLabel
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0070(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSMapLabel.Map
	unsigned char                                      UnknownData01[0x28];                                      // 0x0098(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSMapLabel.MiniMapTexture
	unsigned char                                      UnknownData02[0x28];                                      // 0x00C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSMapLabel.LoadingScreenImage
	struct FText                                       MapDisplayName;                                           // 0x00E8(0x0018) (Edit)
	struct FText                                       MapRegion;                                                // 0x0100(0x0018) (Edit)
	struct FText                                       MapDescription;                                           // 0x0118(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMapLabel");
		return ptr;
	}

};


// Class Killstreak.KSMatchDataRecorder
// 0x0288 (0x02B0 - 0x0028)
class UKSMatchDataRecorder : public UObject
{
public:
	struct FMatchRecord                                _MatchRecord;                                             // 0x0028(0x00E8)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0110(0x00A0) MISSED OFFSET
	TMap<uint64_t, struct FWeaponUseSummaryRecord>     InProgressWeaponSummaries;                                // 0x01B0(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0200(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMatchDataRecorder");
		return ptr;
	}


	void OnPlayerLogout(class AGameModeBase** GameMode, class AController** Player);
	void OnPlayerLogin(class AGameModeBase** GameMode, class APlayerController** NewPlayer);
};


// Class Killstreak.KSMath
// 0x0000 (0x0028 - 0x0028)
class UKSMath : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMath");
		return ptr;
	}


	struct FVector STATIC_ShiftLocationBetweenTransforms(struct FVector* Location, struct FTransform* SourceTransform, struct FTransform* TargetTransform);
	struct FInterpCurveVector2D STATIC_ScaleInterpCurveVector2D(struct FInterpCurveVector2D* InCurve, float* InScale);
	struct FInterpCurveFloat STATIC_ScaleInterpCurveFloatInput(struct FInterpCurveFloat* InCurve, float* InScale);
	struct FRotator STATIC_RInterpConstantToDirectional(struct FRotator* Current, struct FRotator* Target, float* DeltaTime, float* InterpSpeed);
	int STATIC_GetLineSphereIntersectionPoints(struct FVector* LinePointA, struct FVector* LinePointB, struct FVector* SphereOrigin, float* SphereRadius, struct FVector* OutPointA, struct FVector* OutPointB);
	bool STATIC_GetLineRectangleIntersectionPoints(struct FVector2D* LinePointA, struct FVector2D* LinePointB, struct FVector2D* RectCenter, struct FVector2D* RectExtent, float* RectYaw, struct FVector2D* IntPoint1, struct FVector2D* IntPoint2);
	bool STATIC_GetLineCircleIntersectionPoints(struct FVector2D* LinePointA, struct FVector2D* LinePointB, struct FVector2D* CircleCenter, float* CircleRadius, struct FVector2D* IntPoint1, struct FVector2D* IntPoint2);
	float STATIC_FloatInterpCurveIntegralTrapezoid(struct FInterpCurveFloat* InCurve, float* MinTime, float* MaxTime, float* DeltaTime);
	float STATIC_FInterpRadiansTo(float* Current, float* Target, float* DeltaTime, float* InterpSpeed);
	float STATIC_FInterpDegreesTo(float* Current, float* Target, float* DeltaTime, float* InterpSpeed);
	struct FVector2D STATIC_ClampVector2D(struct FVector2D* InVector2D, float* MinSize, float* MaxSize);
};


// Class Killstreak.KSMedPack
// 0x0008 (0x07A0 - 0x0798)
class AKSMedPack : public AKSWeapon
{
public:
	bool                                               bUseWhileMovingOverride;                                  // 0x0798(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanStopFire;                                             // 0x0799(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x079A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMedPack");
		return ptr;
	}


	float GetBuildupTime();
};


// Class Killstreak.KSMeleeTargetingModule
// 0x0010 (0x02D8 - 0x02C8)
class UKSMeleeTargetingModule : public UKSGrenadeTargetingModule
{
public:
	bool                                               bHasLungeTarget;                                          // 0x02C8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C9(0x0007) MISSED OFFSET
	class UKSWeaponAsset_Melee*                        MeleeAsset;                                               // 0x02D0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMeleeTargetingModule");
		return ptr;
	}

};


// Class Killstreak.KSMeleeWeaponAssetDrop
// 0x0000 (0x0800 - 0x0800)
class AKSMeleeWeaponAssetDrop : public AKSWeaponAssetDrop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMeleeWeaponAssetDrop");
		return ptr;
	}

};


// Class Killstreak.KSMercMasteryActivity
// 0x0008 (0x0218 - 0x0210)
class UKSMercMasteryActivity : public UKSJobActivity
{
public:
	EKSMercMasteryActivityType                         ReferenceType;                                            // 0x0210(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0211(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMercMasteryActivity");
		return ptr;
	}

};


// Class Killstreak.KSMercMasteryManager
// 0x0000 (0x01C0 - 0x01C0)
class UKSMercMasteryManager : public UKSActivityManagerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMercMasteryManager");
		return ptr;
	}


	float GetWinPercentForJob(class UKSJobItem** JobItem, class AKSPlayerController** Player);
	class UKSJobItem* GetLowestJobForActivityType(EKSMercMasteryActivityType* Type, class AKSPlayerController** Player);
	class UKSJobItem* GetHighestJobForActivityType(EKSMercMasteryActivityType* Type, class AKSPlayerController** Player);
	bool GetActivityInstancesWithType(EKSMercMasteryActivityType* Type, class AKSPlayerController** Player, TArray<class UKSActivityInstance*>* OutActivityInstances);
	bool GetActivityInstancesWithJob(class UKSJobItem** Job, class AKSPlayerController** Player, TArray<class UKSActivityInstance*>* OutActivityInstances);
	class UKSActivityInstance* GetActivityInstanceByJobAndType(class UKSJobItem** JobItem, EKSMercMasteryActivityType* Type, class AKSPlayerController** Player);
	class UKSMercMasteryActivity* FindActivityByJobAndType(class UKSJobItem** JobItem, EKSMercMasteryActivityType* Type);
};


// Class Killstreak.KSMiniMapAssistant
// 0x0000 (0x0330 - 0x0330)
class AKSMiniMapAssistant : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMiniMapAssistant");
		return ptr;
	}


	void GetRelativeMinimapHeightToLocalPlayer(struct FVector* ActorLocation, EKSRelativeMinimapHeight* RelativeHeight);
};


// Class Killstreak.KSMinimapRendererBase
// 0x0000 (0x0330 - 0x0330)
class AKSMinimapRendererBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMinimapRendererBase");
		return ptr;
	}


	float GetMinimapWidth();
};


// Class Killstreak.KSPlayerModInstance
// 0x00B0 (0x01A8 - 0x00F8)
class UKSPlayerModInstance : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00F8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModTriggered;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bPreventModInitialization;                                // 0x0120(0x0001) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	bool                                               bInitialized;                                             // 0x0121(0x0001) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0122(0x0006) MISSED OFFSET
	class AKSPlayerState*                              ModOwner;                                                 // 0x0128(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class AKSCharacter*                                OwnerCharacter;                                           // 0x0130(0x0008) (Net, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0138(0x0008) MISSED OFFSET
	class UKSPlayerMod*                                ModAsset;                                                 // 0x0140(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class AKSPlayerState*                              ModInstigator;                                            // 0x0148(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                InstanceCount;                                            // 0x0150(0x0004) (Net, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                LocalInstanceCount;                                       // 0x0154(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	bool                                               bUsesDuration;                                            // 0x0158(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x17];                                      // 0x0159(0x0017) MISSED OFFSET
	bool                                               bUseAssetDataTableManager;                                // 0x0170(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0171(0x0007) MISSED OFFSET
	class UDynamicSkinTable*                           AssetDataTableManager;                                    // 0x0178(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TArray<struct FDataTableInfo>                      PersistentSkinDataTables;                                 // 0x0180(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x18];                                      // 0x0190(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerModInstance");
		return ptr;
	}


	bool StopAnimationFromEvent(struct FName* AnimEventName, class UKSCharacterAnimInst** CharAnimInstance);
	bool ReactsToAnimationEvent(struct FName* AnimEventName, int* Priority);
	void PlayAnimationFromEvent(struct FName* AnimEventName, class UKSCharacterAnimInst** CharAnimInstance);
	bool OwnerIsLocal();
	bool OwnerHasAuthority();
	bool OverrideInteraction(TScriptInterface<class UKSInteractable>* Interactable, float* Duration, class UClass** Type);
	void OnRep_OwnerCharacter();
	void OnRep_ModAsset();
	void OnRep_InstanceCount();
	void OnOwnerDied(class AKSCharacterBase** KillerCharacter);
	void OnNewCharacter();
	void OnModInitialized();
	void OnCharacterOwnerDeath(class AKSCharacterBase** Killer);
	float ModifyDamageDealt(float* DamageAmount, struct FDamageEvent* DamageEvent, class AController** EventInstigator, class AActor** DamageCauser, class AActor** DamagedActor);
	void ModEventReceived(struct FName* ModEvent);
	void InitializeMod();
	class AKSPlayerState* GetPlayerStateOwner();
	EPlayerModType GetModType();
	class AKSPlayerState* GetModInstigator();
	class UKSPlayerMod* GetModAsset();
	int GetInstanceCount();
	void GetDuration(float* Duration, float* RemainingTime, bool* UsesDuration);
	class AKSCharacter* GetCharacterOwner();
	void BroadcastModTriggeredInternal();
	void BroadcastModTriggered();
};


// Class Killstreak.KSModInst_Activated
// 0x01E8 (0x0390 - 0x01A8)
class UKSModInst_Activated : public UKSPlayerModInstance
{
public:
	bool                                               bUsesAbilityMovement;                                     // 0x01A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         _MovementMode;                                            // 0x01A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EKSGame_CustomMovement>                CustomMovementMode;                                       // 0x01AA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x01AB(0x0005) MISSED OFFSET
	class UKSTimerComponent*                           LockoutTimer;                                             // 0x01B0(0x0008) (Edit, ExportObject, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bIsLocked;                                                // 0x01B8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01B9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModLocked;                                              // 0x01C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnModLockoutTick;                                         // 0x01D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x01E0(0x0018) MISSED OFFSET
	struct FKSActionRestrictor                         SetupActionRestrictor;                                    // 0x01F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKSActionRestrictor                         RecoveryActionRestrictor;                                 // 0x0200(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0208(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModActivated;                                           // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSPlayerMod_Activated*                      ActivateMod;                                              // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnChargeChanged;                                          // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bDelayChargeConsumption;                                  // 0x0248(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0249(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModSetup;                                               // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UAkAudioEvent*                               ActivationSoundEvent;                                     // 0x0260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               DeactivationSoundEvent;                                   // 0x0268(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUnCrouchOnActivation;                                    // 0x0270(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0271(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModFailedToActivate;                                    // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0288(0x0010) MISSED OFFSET
	float                                              CurrentCharge;                                            // 0x0298(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0xEC];                                      // 0x029C(0x00EC) MISSED OFFSET
	bool                                               bDeactivateWhenWeaponFired;                               // 0x0388(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0389(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_Activated");
		return ptr;
	}


	void UpdateChargeDirect(float* DeltaCharge);
	void UpdateCharge(int* Delta);
	bool TryToCancel();
	bool TryToActivate();
	void SetAbilityMovementMode(TEnumAsByte<EMovementMode>* InMovementMode, TEnumAsByte<EKSGame_CustomMovement>* InCustomMovementMode);
	void SetAbilityMovementDisabled(bool* bDisable);
	void RefundCharge();
	void OnSetup();
	void OnRep_LockoutTimer();
	void OnRep_Locked();
	void OnRep_CurrentCharge();
	void OnOwnerDownStateChanged(class AKSPlayerState** DownedPlayer);
	void OnLockoutTimerTick(float* Seconds);
	void OnLockoutTimerActive(bool* bIsTimerActive);
	void OnFullyCharged();
	void OnEndRecovery();
	void OnEndActivationWarning();
	void OnEndActivation();
	void OnActivation();
	void OnAbilityReleased();
	bool IsLocked();
	bool IsActivated();
	bool IsAbilityMovementDisabled();
	struct FKSActionRestrictor GetSetupActionRestrictor();
	int GetRequiredCharge();
	struct FKSActionRestrictor GetRecoveryActionRestrictor();
	int GetMaximumCharge();
	float GetLockoutTimeRemaining();
	int GetDefaultCharge();
	int GetCurrentCharge();
	class UKSPlayerMod_Activated* GetActivatedModAsset();
	float GetAbilitySetupDuration();
	float GetAbilityRecoveryDuration();
	float GetAbilityDuration();
	void EndActivation();
	void ConsumeChargeAmount(float* Amount);
	void ConsumeCharge();
	void ClientModFailedToActivate(EKSAbilityUsageFailureType* AbilityFailureType);
	bool CanActivateWhileDowned();
	bool CanActivateNow(EKSAbilityUsageFailureType* OutAbilityFailureType);
	void BroadcastModSetup();
	void BroadcastModActivated(bool* bActive);
	void BroadcastEndRecovery();
	void BroadcastEndActivationWarning();
	void BeginSetup();
	void BeginActivation();
	void AbilityActivationRequestTimeout();
};


// Class Killstreak.KSModInst_ActivatedTarget
// 0x0100 (0x0490 - 0x0390)
class UKSModInst_ActivatedTarget : public UKSModInst_Activated
{
public:
	class UKSPlayerMod_ActivatedTarget*                ActivateTargetMod;                                        // 0x0390(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AKSCharacter*                                Target;                                                   // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03A0(0x0008) MISSED OFFSET
	class UDynamicSkinTable*                           TargetAssetDataTableManager;                              // 0x03A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xE0];                                      // 0x03B0(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_ActivatedTarget");
		return ptr;
	}


	class AKSCharacter* GetCachedTarget();
	void BroadcastTarget(class AKSCharacter** InTarget);
	void AssignTarget(class AKSCharacter** OutTarget);
};


// Class Killstreak.KSModInst_OnDamageOther
// 0x0018 (0x01C0 - 0x01A8)
class UKSModInst_OnDamageOther : public UKSPlayerModInstance
{
public:
	float                                              MinimumDamage;                                            // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	TArray<EDamageCategory>                            ValidDamageCategories;                                    // 0x01B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OnDamageOther");
		return ptr;
	}


	void OnMatchingDamageDealt(class AActor** DamagedActor, float* Damage);
	void OnInstigatedDamage(class AKSCharacterBase** Damager, float* Damage, class UDamageType** DamageType, class AActor** DamagedActor, class AActor** DamageCauser);
	bool DoesDamageMatch(class AKSCharacterBase** Damager, float* Damage, class UKSDamageTypeBase** DamageType, class AActor** DamagedActor, class AActor** DamageCauser);
};


// Class Killstreak.KSModInst_ApplyDebuffOnDamage
// 0x0068 (0x0228 - 0x01C0)
class UKSModInst_ApplyDebuffOnDamage : public UKSModInst_OnDamageOther
{
public:
	TArray<class UKSPlayerMod*>                        DebuffsToApply;                                           // 0x01C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bGiveDebuffsUniquely;                                     // 0x01D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D1(0x0003) MISSED OFFSET
	float                                              DebuffDuration;                                           // 0x01D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<class AKSCharacter*, struct FTimerHandle>     CharacterHandles;                                         // 0x01D8(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_ApplyDebuffOnDamage");
		return ptr;
	}


	void DebuffTimeExpired(class AKSCharacter** DebuffedCharacter);
};


// Class Killstreak.KSModInst_DamageDealt
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_DamageDealt : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_DamageDealt");
		return ptr;
	}

};


// Class Killstreak.KSModInst_OverTimeEffect
// 0x0018 (0x01C0 - 0x01A8)
class UKSModInst_OverTimeEffect : public UKSPlayerModInstance
{
public:
	class UKSTimerComponent*                           EffectTimer;                                              // 0x01A8(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	float                                              EffectTickPeriod;                                         // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                EffectTickCount;                                          // 0x01B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldImmediatelyEffect;                                 // 0x01B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bResetTickCountOnStackIncrease;                           // 0x01B9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01BA(0x0002) MISSED OFFSET
	int                                                TickCount;                                                // 0x01BC(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OverTimeEffect");
		return ptr;
	}


	void OnRep_EffectTimer();
	float GetEffectTickPeriod();
	void EffectTick();
};


// Class Killstreak.KSModInst_DamageOverTime
// 0x0018 (0x01D8 - 0x01C0)
class UKSModInst_DamageOverTime : public UKSModInst_OverTimeEffect
{
public:
	float                                              DamagePerTick;                                            // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x01C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSWeaponAsset*                              RadialDamageWeapon;                                       // 0x01D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_DamageOverTime");
		return ptr;
	}

};


// Class Killstreak.KSModInst_DetectEnemy
// 0x0040 (0x01E8 - 0x01A8)
class UKSModInst_DetectEnemy : public UKSPlayerModInstance
{
public:
	struct FScriptMulticastDelegate                    OnDetectEnemy;                                            // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x28];                                      // 0x01B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSModInst_DetectEnemy.WidgetClass
	bool                                               bIsDetectingEnemy;                                        // 0x01E0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_DetectEnemy");
		return ptr;
	}


	void OnRep_EnemyDetected();
	bool IsDetectingEnemy();
	void GetWidgetClass();
	void DetectEnemy(bool* bDetectEnemy);
};


// Class Killstreak.KSModInst_GiveItemOnActivation
// 0x0018 (0x03A8 - 0x0390)
class UKSModInst_GiveItemOnActivation : public UKSModInst_Activated
{
public:
	struct FScriptDelegate                             AsyncItemGiveDelegate;                                    // 0x0390(0x0010) (ZeroConstructor, InstancedReference)
	class UObject*                                     GivenItem;                                                // 0x03A0(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_GiveItemOnActivation");
		return ptr;
	}


	void TryToRemoveItem();
	void OnRep_GivenItem();
	void OnNewGivenItem();
	void OnItemRemoved();
	void AsyncItemGiveComplete(class UKSItem** Item, class UObject** GivenObject, struct FGiveItemParameters* InGiveItemParameters, bool* bSuccess);
};


// Class Killstreak.KSModInst_GiveWeaponOnActivation
// 0x0040 (0x03E8 - 0x03A8)
class UKSModInst_GiveWeaponOnActivation : public UKSModInst_GiveItemOnActivation
{
public:
	bool                                               bActivatesOnFire;                                         // 0x03A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRestrictSwapping;                                        // 0x03A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSwapToMain;                                              // 0x03AA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x25];                                      // 0x03AB(0x0025) MISSED OFFSET
	bool                                               bEndActivationOnHolster;                                  // 0x03D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEndActivationOnEmptyClip;                                // 0x03D1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bConsumeChargeWhenItemRemoved;                            // 0x03D2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReplenishesAmmoOnFullyCharged;                           // 0x03D3(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldBroadcastWeaponHits;                               // 0x03D4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	struct FTimerHandle                                SwapFromRetryTimer;                                       // 0x03D8(0x0008)
	float                                              SwapFromRetryTime;                                        // 0x03E0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_GiveWeaponOnActivation");
		return ptr;
	}


	bool TryToSwapBackToWeapon();
	void SwapFromRetry();
	void OnWeaponStateChanged(class AKSWeapon** Weapon, EWeaponStateNew* OldState, EWeaponStateNew* NewState);
	void OnGivenWeaponInstigatedDamage(class AKSCharacterBase** InPawn, struct FCombatEventInfo* DamageInfo);
	void HandleWeaponExhausted(class AKSWeapon** Weapon);
	void GivenWeaponInstigatedDamage(class AKSCharacterBase** InPawn, struct FCombatEventInfo* DamageInfo);
	bool EndsActivationOnHolster();
	bool EndsActivationOnEmptyClip();
	void BroadcastGivenWeaponInstigatedDamage(class AKSCharacterBase** InPawn, struct FCombatEventInfo* DamageInfo);
};


// Class Killstreak.KSModInst_FireWeaponOnActivation
// 0x0000 (0x03E8 - 0x03E8)
class UKSModInst_FireWeaponOnActivation : public UKSModInst_GiveWeaponOnActivation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_FireWeaponOnActivation");
		return ptr;
	}


	void HandleIdle(class AKSWeapon** Weapon, EWeaponStateNew* OldState);
	void HandleCooldown(class AKSWeapon** Weapon, EWeaponStateNew* OldState);
	void HandleBuildup(class AKSWeapon** Weapon, EWeaponStateNew* OldState);
	void ClientFire(class AKSWeapon** Weapon);
};


// Class Killstreak.KSModInst_DirectTargetWeapon
// 0x0018 (0x0400 - 0x03E8)
class UKSModInst_DirectTargetWeapon : public UKSModInst_FireWeaponOnActivation
{
public:
	struct FScriptMulticastDelegate                    OnTargetAcquired;                                         // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class AKSWeapon_DirectTarget>       TargetedWeapon;                                           // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_DirectTargetWeapon");
		return ptr;
	}


	class AActor* GetCurrentTarget();
};


// Class Killstreak.KSModInst_GiveBuildOnActivation
// 0x0058 (0x0440 - 0x03E8)
class UKSModInst_GiveBuildOnActivation : public UKSModInst_GiveWeaponOnActivation
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBuildSucceededDel;                                      // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0410(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBuildFailedDel;                                         // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bStartFireOnActivation;                                   // 0x0438(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0439(0x0001) MISSED OFFSET
	bool                                               bRefundOnReclaim;                                         // 0x043A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x043B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_GiveBuildOnActivation");
		return ptr;
	}


	void BuildSucceeded();
	void BuildSpawned(class AKSBuild** SpawnedBuild);
	void BuildReclaimed(class AKSBuild** Reclaimed);
	void BuildFailed();
};


// Class Killstreak.KSModInst_GiveEquipPoints
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_GiveEquipPoints : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_GiveEquipPoints");
		return ptr;
	}

};


// Class Killstreak.KSModInst_MainCameraFov
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_MainCameraFov : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_MainCameraFov");
		return ptr;
	}

};


// Class Killstreak.KSModInst_MartialArtist
// 0x0028 (0x04B8 - 0x0490)
class UKSModInst_MartialArtist : public UKSModInst_ActivatedTarget
{
public:
	EThrowDirection                                    TargetThrowDirection;                                     // 0x0490(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0491(0x0003) MISSED OFFSET
	float                                              ChargeTime;                                               // 0x0494(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0498(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_MartialArtist");
		return ptr;
	}


	float GetThrowDistance();
	struct FVector GetThrowDirection(struct FVector* ToDirection, EThrowDirection* ThrowDirection);
	void GetCardinalThrowDirection(EThrowDirection* OutThrowDirection);
	void BroadcastTargetInfo(EThrowDirection* Direction, TArray<struct FVector>* Path, float* PathDistance);
};


// Class Killstreak.KSModInst_MovementAbility
// 0x0008 (0x0398 - 0x0390)
class UKSModInst_MovementAbility : public UKSModInst_Activated
{
public:
	float                                              Distance;                                                 // 0x0390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0394(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_MovementAbility");
		return ptr;
	}


	float GetDistance();
};


// Class Killstreak.KSModInst_OnDodgeRoll
// 0x0008 (0x01B0 - 0x01A8)
class UKSModInst_OnDodgeRoll : public UKSPlayerModInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OnDodgeRoll");
		return ptr;
	}


	void Triggered(float* RollDuration);
	void OnDodgeRoll(float* RollDuration);
};


// Class Killstreak.KSModInst_OnDownOrRevive
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_OnDownOrRevive : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OnDownOrRevive");
		return ptr;
	}


	void OnReviveComplete(class AKSCharacter** Reviver, class AKSCharacter** Revivee);
};


// Class Killstreak.KSModInst_OnDownOther
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_OnDownOther : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OnDownOther");
		return ptr;
	}


	void OnDownOther(class AKSCharacter** Other);
	void DownTriggered(class AKSCharacter** Other);
};


// Class Killstreak.KSModInst_OnPickupItem
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_OnPickupItem : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OnPickupItem");
		return ptr;
	}


	void OnItemPickedUp(class AKSCharacter** Character, class AKSItemDrop** ItemDrop);
	void ItemPickedUp(class AKSCharacter** Character, class AKSItemDrop** ItemDrop);
};


// Class Killstreak.KSModInst_OnReviveOther
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_OnReviveOther : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OnReviveOther");
		return ptr;
	}


	void Triggered(class AKSCharacter** Reviver, class AKSCharacter** Revivee);
	void OnReviveOther(class AKSCharacter** Reviver, class AKSCharacter** Revivee);
};


// Class Killstreak.KSModInst_OnTakeDamage
// 0x0020 (0x01C8 - 0x01A8)
class UKSModInst_OnTakeDamage : public UKSPlayerModInstance
{
public:
	class UKSTimerComponent*                           TakeDamageTimer;                                          // 0x01A8(0x0008) (ExportObject, Net, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	float                                              MinimumDamage;                                            // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	TArray<EDamageCategory>                            ValidDamageCategories;                                    // 0x01B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_OnTakeDamage");
		return ptr;
	}


	void TakeDamageTimerComplete();
	void StopTakeDamageTimer();
	void StartTakeDamageTimer(float* Duration);
	void ReviveCompleted(class AKSCharacter** Reviver, class AKSCharacter** Revivee);
	void OnTakeDamage(class AActor** InActor, float* DamageAmount, class UDamageType** DamageTypeCDO, class AController** EventInstigator, class AActor** DamageCauser);
	void OnReviveCompleted(class AKSCharacter** Reviver, class AKSCharacter** Revivee);
	void OnRep_TakeDamageTimer();
	void MatchingDamageTaken(class AActor** InActor, float* DamageAmount, class UDamageType** DamageTypeCDO, class AController** EventInstigator, class AActor** DamageCauser);
};


// Class Killstreak.KSModInst_PhysAbilityMovement
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_PhysAbilityMovement : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_PhysAbilityMovement");
		return ptr;
	}

};


// Class Killstreak.KSModInst_PickupRange
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_PickupRange : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_PickupRange");
		return ptr;
	}

};


// Class Killstreak.KSModInst_PingOnOtherDowned
// 0x0020 (0x01C8 - 0x01A8)
class UKSModInst_PingOnOtherDowned : public UKSPlayerModInstance
{
public:
	TArray<struct FDownedEnemyPingHandle>              PingHandles;                                              // 0x01A8(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class UKSPlayerMod_PingOnOtherDowned> CastOwningMod;                                            // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AKSPlayerController>          OwningController;                                         // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_PingOnOtherDowned");
		return ptr;
	}


	void PingFromDownedEnemy(class AKSPlayerState** DownedEnemy);
	void OnPlayerDowned(struct FCombatEventInfo* EventInfo, int* XpBonus);
	void OnCharacterPinged(class AKSCharacter** PingedCharacter);
	void BroadcastSpawnPingEmitter(class UParticleSystem** EmitterTemplate, struct FVector* Location);
	void BroadcastPingedCharacter(class AKSCharacter** PingedCharacter);
};


// Class Killstreak.KSModInst_RevealAreaToTeam
// 0x0008 (0x03F0 - 0x03E8)
class UKSModInst_RevealAreaToTeam : public UKSModInst_FireWeaponOnActivation
{
public:
	bool                                               bAppliesScrambleEffectToEnemies;                          // 0x03E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_RevealAreaToTeam");
		return ptr;
	}

};


// Class Killstreak.KSModInst_RevealOnMinimap
// 0x0010 (0x01B8 - 0x01A8)
class UKSModInst_RevealOnMinimap : public UKSPlayerModInstance
{
public:
	float                                              PingPeriod;                                               // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01AC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_RevealOnMinimap");
		return ptr;
	}


	void GeneratePing();
};


// Class Killstreak.KSModInst_ReviveSelfOnActivation
// 0x0038 (0x03C8 - 0x0390)
class UKSModInst_ReviveSelfOnActivation : public UKSModInst_Activated
{
public:
	bool                                               bUsesCustomDuration;                                      // 0x0390(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0391(0x0003) MISSED OFFSET
	float                                              CustomReviveTime;                                         // 0x0394(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanUseWhileUp;                                           // 0x0398(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReviveDuringSetup;                                       // 0x0399(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x039A(0x0002) MISSED OFFSET
	float                                              UpAbilitySetupDuration;                                   // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UpAbilityDuration;                                        // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UpAbilityRecoveryDuration;                                // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FKSActionRestrictor                         UpAbilityRecoveryActionRestrictor;                        // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<class UKSPlayerMod*>                        UpBuffsGivenOnActivation;                                 // 0x03B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_ReviveSelfOnActivation");
		return ptr;
	}

};


// Class Killstreak.KSModInst_StartingEquipment
// 0x0000 (0x01A8 - 0x01A8)
class UKSModInst_StartingEquipment : public UKSPlayerModInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_StartingEquipment");
		return ptr;
	}


	void GiveEquipment();
};


// Class Killstreak.KSModInst_WeaponSkinOverride
// 0x0128 (0x02D0 - 0x01A8)
class UKSModInst_WeaponSkinOverride : public UKSPlayerModInstance
{
public:
	TMap<struct FGameplayTag, struct FDataTableInfo>   WeaponTypeSkinTables;                                     // 0x01A8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FDataTableInfo                              DefaultWeaponSkinTable;                                   // 0x01F8(0x0058) (Edit, DisableEditOnInstance)
	TArray<class UDynamicSkinTable*>                   WeaponTypeTableManagers;                                  // 0x0250(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	class UDynamicSkinTable*                           DefaultWeaponTableManager;                                // 0x0260(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TMap<struct FGameplayTag, class UMultiSkinObject*> WeaponTypeSkinObjects;                                    // 0x0268(0x0050) (ZeroConstructor, Transient, DuplicateTransient)
	class UMultiSkinObject*                            DefaultWeaponSkinObject;                                  // 0x02B8(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TArray<TWeakObjectPtr<class UKSWeaponComponent>>   AppliedWeaponComponents;                                  // 0x02C0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSModInst_WeaponSkinOverride");
		return ptr;
	}


	void OnActiveWeaponChanged(class AKSCharacter** Character);
};


// Class Killstreak.KSMultiDownsTracker
// 0x0030 (0x00C0 - 0x0090)
class UKSMultiDownsTracker : public UKSAccoladeTracker
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET
	TArray<struct FAccoladeMultiDownTracker>           MultiDownAccolades;                                       // 0x0098(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FAccoladePlayerTrackers>             TrackPlayers;                                             // 0x00A8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              MaxTrackerTimer;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMultiDownsTracker");
		return ptr;
	}


	void RemoveTrackerByPlayerState(class AKSPlayerState** CurrentPlayerState);
	void RemoveTracker(struct FAccoladePlayerTrackers* CurrentTrackPlayer);
	void HandleTrackerAccolade(struct FAccoladePlayerTrackers* CurrentTrackPlayer);
	bool GetTrackPlayer(int* PlayerId, struct FAccoladePlayerTrackers* OutTracker, int* TrackerIndex);
};


// Class Killstreak.KSMultiElimTracker
// 0x0020 (0x00B0 - 0x0090)
class UKSMultiElimTracker : public UKSAccoladeTracker
{
public:
	TArray<struct FAccoladeMultiElimTracker>           MultiElimAccolades;                                       // 0x0090(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FAccoladePlayerTrackers>             TrackPlayers;                                             // 0x00A0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSMultiElimTracker");
		return ptr;
	}


	void RemoveTrackerByPlayerState(class AKSPlayerState** CurrentPlayerState);
	void HandleTrackerAccolade(struct FAccoladePlayerTrackers* CurrentTrackPlayer);
	bool GetTrackPlayer(int* PlayerId, struct FAccoladePlayerTrackers* OutTracker, int* TrackerIndex);
};


// Class Killstreak.KSNamedLocation
// 0x0000 (0x0330 - 0x0330)
class AKSNamedLocation : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNamedLocation");
		return ptr;
	}

};


// Class Killstreak.KSNamedObject
// 0x0000 (0x0028 - 0x0028)
class UKSNamedObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNamedObject");
		return ptr;
	}


	struct FText GetKSName();
};


// Class Killstreak.KSNavArea
// 0x0008 (0x0050 - 0x0048)
class UKSNavArea : public UNavArea
{
public:
	EKSNavAreaType                                     _NavAreaType;                                             // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNavArea");
		return ptr;
	}

};


// Class Killstreak.KSNavigationQueryFilter
// 0x0028 (0x0070 - 0x0048)
class UKSNavigationQueryFilter : public UNavigationQueryFilter
{
public:
	class UClass*                                      DefaultFilter;                                            // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NoJumpFilter;                                             // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NoZiplineFilter;                                          // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NoJumpNoZiplineFilter;                                    // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           MaxSearchNodes;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNavigationQueryFilter");
		return ptr;
	}

};


// Class Killstreak.KSNavLinkProxy
// 0x0000 (0x0380 - 0x0380)
class AKSNavLinkProxy : public ANavLinkProxy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNavLinkProxy");
		return ptr;
	}

};


// Class Killstreak.KSNavModifierComponent
// 0x0010 (0x0160 - 0x0150)
class UKSNavModifierComponent : public UNavModifierComponent
{
public:
	struct FVector                                     ComponentBoundsOffset;                                    // 0x0150(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNavModifierComponent");
		return ptr;
	}


	void UpdateNavigationMesh();
	void UpdateCachedBounds();
	void SetAreaClassAndCacheBounds(class UClass** NewAreaClass);
};


// Class Killstreak.KSNavModifierVolume
// 0x0000 (0x0378 - 0x0378)
class AKSNavModifierVolume : public ANavModifierVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNavModifierVolume");
		return ptr;
	}

};


// Class Killstreak.KSNearMissComponent
// 0x0000 (0x0178 - 0x0178)
class UKSNearMissComponent : public UKSFXCurveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNearMissComponent");
		return ptr;
	}

};


// Class Killstreak.KSNeutralBombSpawner
// 0x0030 (0x0480 - 0x0450)
class AKSNeutralBombSpawner : public AKSLootSiteBase
{
public:
	struct FLootSiteDropInfo                           BombInfo;                                                 // 0x0450(0x0028) (Edit)
	bool                                               bInitialSpawn;                                            // 0x0478(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRespawn;                                                 // 0x0479(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x047A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNeutralBombSpawner");
		return ptr;
	}

};


// Class Killstreak.KSNeutralBombZone
// 0x00C0 (0x0500 - 0x0440)
class AKSNeutralBombZone : public AKSObjectiveBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0440(0x0008) MISSED OFFSET
	int                                                Team;                                                     // 0x0448(0x0004) (Edit, Net, ZeroConstructor, IsPlainOldData)
	int                                                FlipTeam;                                                 // 0x044C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                BombZoneGroup;                                            // 0x0450(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bActivated;                                               // 0x0454(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBombZoneActive;                                         // 0x0458(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       PointAreaComponentTag;                                    // 0x0468(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UPrimitiveComponent*>                 PointAreaComponents;                                      // 0x0470(0x0010) (ExportObject, ZeroConstructor)
	struct FGameplayTag                                BombEquipPoint;                                           // 0x0480(0x0008) (Edit, DisableEditOnInstance)
	float                                              ArmingDuration;                                           // 0x0488(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x048C(0x0004) MISSED OFFSET
	struct FText                                       ArmingProgressText;                                       // 0x0490(0x0018) (Edit, DisableEditOnInstance)
	struct FText                                       ArmingPrompt;                                             // 0x04A8(0x0018) (Edit, DisableEditOnInstance)
	class UStaticMeshComponent*                        BombZone;                                                 // 0x04C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AKSCharacter*                                CurrentInteractor;                                        // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       CameraName;                                               // 0x04D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraTransitionInTime;                                   // 0x04D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraTransitionOutTime;                                  // 0x04DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraMaxRotation;                                        // 0x04E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CameraRotationLockout;                                    // 0x04E4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCameraShake;                                             // 0x04E5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04E6(0x0002) MISSED OFFSET
	class UClass*                                      CameraShake;                                              // 0x04E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x04F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNeutralBombZone");
		return ptr;
	}


	void TeamUpdated();
	void OnTeamSidesFlipped();
	void OnRep_Team();
	void OnRep_Activated();
	void Activated(bool* bActive);
};


// Class Killstreak.KSStaticMeshComponent
// 0x0020 (0x0670 - 0x0650)
class UKSStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0650(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSStaticMeshComponent");
		return ptr;
	}

};


// Class Killstreak.KSNoCollisionStaticMeshComponent
// 0x0000 (0x0670 - 0x0670)
class UKSNoCollisionStaticMeshComponent : public UKSStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNoCollisionStaticMeshComponent");
		return ptr;
	}

};


// Class Killstreak.KSNoFlyZoneTracker
// 0x0058 (0x00E8 - 0x0090)
class UKSNoFlyZoneTracker : public UKSAccoladeTracker
{
public:
	int                                                QuantityDowns;                                            // 0x0090(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	TMap<class AKSPlayerState*, int>                   PlayerDowns;                                              // 0x0098(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNoFlyZoneTracker");
		return ptr;
	}


	void UpdatePlayerTrackers(class AKSPlayerState** InstigatorPlayerState);
	void HandleTrackerAccolade(class AKSPlayerState** Player);
};


// Class Killstreak.KSNPEActivity
// 0x0008 (0x01F0 - 0x01E8)
class UKSNPEActivity : public UKSActivity
{
public:
	EKSNPEActivityType                                 ReferenceType;                                            // 0x01E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNPEActivity");
		return ptr;
	}

};


// Class Killstreak.KSNPETrackManager
// 0x0000 (0x01C0 - 0x01C0)
class UKSNPETrackManager : public UKSActivityManagerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSNPETrackManager");
		return ptr;
	}


	class UKSActivityInstance* GetActivityInstanceByType(EKSNPEActivityType* Type, class AKSPlayerController** Player);
	class UKSNPEActivity* FindActivityByType(EKSNPEActivityType* Type);
};


// Class Killstreak.KSObjectHelper
// 0x0000 (0x0028 - 0x0028)
class UKSObjectHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSObjectHelper");
		return ptr;
	}

};


// Class Killstreak.KSOutOfBoundsManager
// 0x0068 (0x0160 - 0x00F8)
class UKSOutOfBoundsManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x00F8(0x0014) MISSED OFFSET
	float                                              OutOfBoundsWarningTime;                                   // 0x010C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OutOfBoundsTickDamageTime;                                // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OutOfBoundsTickDamage;                                    // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeSpentGroundedAllowedBeforeSave;                       // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	class UClass*                                      OutOfBoundsDamageType;                                    // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowSaving;                                             // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	int                                                CharacterOverlaps;                                        // 0x012C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                CharacterWarningTimer;                                    // 0x0130(0x0008)
	struct FTimerHandle                                CharacterDamageTickTimer;                                 // 0x0138(0x0008)
	struct FTimerHandle                                TimeSpentGroundedTimerHandle;                             // 0x0140(0x0008)
	TArray<class AKSOutOfBoundsRecoveryPoint*>         OutOfBoundsRecoveryPoints;                                // 0x0148(0x0010) (ZeroConstructor)
	float                                              DefaultRecoveryUseTime;                                   // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x015C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSOutOfBoundsManager");
		return ptr;
	}


	void TickDamage();
	void OnOutOfBoundsWarningExpired();
	void OnCharacterOutOfWorld(class AKSCharacter** Character);
	void OnActorOverlapZoneEnd(class AActor** OverlappedActor, class AActor** OtherActor);
	void OnActorOverlapZoneBegin(class AActor** OverlappedActor, class AActor** OtherActor);
	void OnActorOverlapVolumeEnd(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnActorOverlapVolumeBegin(class UPrimitiveComponent** OverlappedComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void ExpireTimeSpentGroundedTimer();
};


// Class Killstreak.KSOutOfBoundsManager_RoundGame
// 0x0020 (0x0180 - 0x0160)
class UKSOutOfBoundsManager_RoundGame : public UKSOutOfBoundsManager
{
public:
	float                                              SecondsIntoRoundToFreeze;                                 // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0164(0x0014) MISSED OFFSET
	class UKSPlayerMod*                                FrozenCharacterModAsset;                                  // 0x0178(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSOutOfBoundsManager_RoundGame");
		return ptr;
	}


	void OnRoundStarted(struct FRoundInitState* RoundState);
	void OnFreezeEnd();
};


// Class Killstreak.KSOutOfBoundsRecoveryPoint
// 0x0010 (0x0368 - 0x0358)
class AKSOutOfBoundsRecoveryPoint : public ANavigationObjectBase
{
public:
	int                                                SideNum;                                                  // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x035C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSOutOfBoundsRecoveryPoint");
		return ptr;
	}

};


// Class Killstreak.KSOutOfBoundsZone
// 0x0010 (0x0340 - 0x0330)
class AKSOutOfBoundsZone : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET
	float                                              TickDamage;                                               // 0x0338(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WarningDuration;                                          // 0x033C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSOutOfBoundsZone");
		return ptr;
	}


	void TurnOnDropBoundary();
	void TurnOffDropBoundary();
	void TurnOffCollision(class AKSGameState** GameState, struct FRoundResult* RoundResult);
};


// Class Killstreak.KSOutOfBoundsVolume
// 0x0008 (0x0370 - 0x0368)
class AKSOutOfBoundsVolume : public AVolume
{
public:
	float                                              TickDamage;                                               // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WarningDuration;                                          // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSOutOfBoundsVolume");
		return ptr;
	}


	void TurnOnCollision();
	void TurnOffCollision(class AKSGameState** GameState, struct FRoundResult* RoundResult);
};


// Class Killstreak.KSPathFollowingComponent
// 0x0000 (0x02E0 - 0x02E0)
class UKSPathFollowingComponent : public UCrowdFollowingComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPathFollowingComponent");
		return ptr;
	}

};


// Class Killstreak.KSPawnActionBase
// 0x0008 (0x00A0 - 0x0098)
class UKSPawnActionBase : public UPawnAction_BlueprintBase
{
public:
	class AKSCharacter*                                _KSChar;                                                  // 0x0098(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnActionBase");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_Crouch
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_Crouch : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_Crouch");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_DodgeRoll
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_DodgeRoll : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_DodgeRoll");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_FreeFall
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_FreeFall : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_FreeFall");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_Jump
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_Jump : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_Jump");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_Reload
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_Reload : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_Reload");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_StartADS
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_StartADS : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_StartADS");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_StartAimAlternate
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_StartAimAlternate : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_StartAimAlternate");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_StartFire
// 0x0010 (0x00B0 - 0x00A0)
class UKSPawnAction_StartFire : public UKSPawnActionBase
{
public:
	struct FGameplayTag                                EquipPoint;                                               // 0x00A0(0x0008) (Edit)
	bool                                               bInfiniteAmmo;                                            // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                PersistentAmmoCount;                                      // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_StartFire");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_StartSprint
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_StartSprint : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_StartSprint");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_StopADS
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_StopADS : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_StopADS");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_StopFire
// 0x0008 (0x00A8 - 0x00A0)
class UKSPawnAction_StopFire : public UKSPawnActionBase
{
public:
	struct FGameplayTag                                EquipPoint;                                               // 0x00A0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_StopFire");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_StopSprint
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_StopSprint : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_StopSprint");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_SwapWeapon
// 0x0008 (0x00A8 - 0x00A0)
class UKSPawnAction_SwapWeapon : public UKSPawnActionBase
{
public:
	struct FGameplayTag                                EquipPoint;                                               // 0x00A0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_SwapWeapon");
		return ptr;
	}

};


// Class Killstreak.KSPawnAction_Uncrouch
// 0x0000 (0x00A0 - 0x00A0)
class UKSPawnAction_Uncrouch : public UKSPawnActionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnAction_Uncrouch");
		return ptr;
	}

};


// Class Killstreak.KSPawnCommonInterface
// 0x0000 (0x0028 - 0x0028)
class UKSPawnCommonInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPawnCommonInterface");
		return ptr;
	}


	bool PrepareForNextRound(class AActor** ActorToDestroy);
};


// Class Killstreak.KSPayBackTracker
// 0x0010 (0x00A0 - 0x0090)
class UKSPayBackTracker : public UKSAccoladeTracker
{
public:
	TArray<struct FTrackPlayerElim>                    PlayerElimTracker;                                        // 0x0090(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPayBackTracker");
		return ptr;
	}


	bool IsVictimStored(int* VictimPlayerId, struct FTrackPlayerElim* PlayerTracker, int* TrackerIndex);
	void HandleTrackerAccolade(class AKSPlayerState** PlayerState);
	bool CheckLastInstigator(int* VictimId, int* CurrentInstigatorId, struct FTrackPlayerElim* PlayerTracker, int* TrackerIndex);
};


// Class Killstreak.KSPerformanceCaptureCamera
// 0x0000 (0x0330 - 0x0330)
class AKSPerformanceCaptureCamera : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPerformanceCaptureCamera");
		return ptr;
	}


	void GetNextCamera();
};


// Class Killstreak.KSPhysicsAssetUtilities
// 0x0000 (0x0028 - 0x0028)
class UKSPhysicsAssetUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPhysicsAssetUtilities");
		return ptr;
	}


	bool STATIC_AppendPhysicsAsset(class USkeletalMeshComponent** Mesh, class UPhysicsAsset** PhysicsAsset, struct FName* CollisionProfileName, bool* SimulatePhysics);
};


// Class Killstreak.KSPingBeaconBase
// 0x0010 (0x0340 - 0x0330)
class AKSPingBeaconBase : public AActor
{
public:
	class AKSPlayerState*                              PlayerOwner;                                              // 0x0330(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0338(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPingBeaconBase");
		return ptr;
	}


	void PingRemoved(int* PingId, class AKSPlayerState** OwningPlayer);
};


// Class Killstreak.KSPingManager
// 0x0408 (0x0500 - 0x00F8)
class UKSPingManager : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnPingFailureDel;                                         // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPingAdded;                                              // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPingRemoved;                                            // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FPingInfoChangeList                         ReplicatedPings;                                          // 0x0128(0x00C8) (Net, Transient)
	TArray<struct FPingInfo>                           LocallyPredictedPings;                                    // 0x01F0(0x0010) (ZeroConstructor, Transient)
	TMap<EPingType, float>                             PingLifetimes;                                            // 0x0200(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EPingType, class UClass*>                     PingBeaconTypes;                                          // 0x0250(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EPingType, int>                               MaxPingsForType;                                          // 0x02A0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x30];                                      // 0x02F0(0x0030) MISSED OFFSET
	float                                              PingThrottleDetectionPeriod;                              // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PingsAllowedDuringDetectionPeriod;                        // 0x0324(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PingThrottleDuration;                                     // 0x0328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPingDistance;                                          // 0x032C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AKSPingBeaconBase*>                   ActiveBeacons;                                            // 0x0330(0x0010) (ZeroConstructor, Transient)
	float                                              InputDifferentiationTime;                                 // 0x0340(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowPingRemoval;                                        // 0x0344(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0345(0x0003) MISSED OFFSET
	TMap<EPingType, class UAkAudioEvent*>              PingAudioCues;                                            // 0x0348(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	class AKSGameState_RoundGame*                      CachedRoundState;                                         // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AKSPlayerController*                         CachedOwner;                                              // 0x03A8(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class AKSTeamState*                                CachedTeam;                                               // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03B8(0x0004) MISSED OFFSET
	float                                              PingPrivilegeRestoreTime;                                 // 0x03BC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC8];                                      // 0x03C0(0x00C8) MISSED OFFSET
	unsigned char                                      UnknownData05[0x28];                                      // 0x03C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPingManager.MinimapDisplayWidget
	unsigned char                                      UnknownData06[0x28];                                      // 0x04B0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPingManager.FullmapDisplayWidget
	unsigned char                                      UnknownData07[0x28];                                      // 0x04D8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPingManager.OverlayDisplayWidget

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPingManager");
		return ptr;
	}


	void UpdateHoveredPing(int* PingId, class AKSPlayerState** PingingPlayer);
	void ThrottleDetectionPeriodExpired();
	void ServerRemovePing(int* PingId);
	void ServerPingRequest(struct FPingInfo* PingInfo);
	void RemovePing(int* PingId, class AKSPlayerState** PingingPlayer);
	void OnPingExpired(struct FPingInfo* ExpiringPing);
	void HoldTimerExpired();
	float GetPingLifetimes(EPingType* PingType);
	bool GetPingInfoById(int* PingId, struct FPingInfo* OutPingInfo);
	int GetPingIdForDisplayId(int* DisplayId);
	void GameRoundOver(class AKSGameState** GameState, struct FRoundResult* RoundResult);
	void DoubleClickTimerExpired();
	void ClientPingRejected(EPingFailedType* Reason, int* PingId);
	void ClearPingsOfType(EPingType* PingType);
	void AttemptRemovePing(int* PingId, class AKSPlayerState** PingingPlayer);
	void AttemptPing2D(struct FVector2D* WorldLocation2D);
	void AttemptManualPing(EPingType* PingType, class AActor** PingedActor, bool* bRemoveOtherPingsOfType);
	void AddPing(struct FPingInfo* PingInfo);
};


// Class Killstreak.KSPlayerCameraManager
// 0x0030 (0x2690 - 0x2660)
class AKSPlayerCameraManager : public APlayerCameraManager
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x2660(0x0028) MISSED OFFSET
	int                                                ThermalScopePPCount;                                      // 0x2688(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x268C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerCameraManager");
		return ptr;
	}

};


// Class Killstreak.KSPlayerInput
// 0x02A0 (0x15D0 - 0x1330)
class UKSPlayerInput : public UPGame_PlayerInput
{
public:
	TMap<struct FString, struct FString>               SavedSettingsConfig;                                      // 0x1330(0x0050) (ZeroConstructor, Config)
	TArray<struct FSettingConfigPair>                  SettingsConfig;                                           // 0x1380(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0xF4];                                      // 0x1390(0x00F4) MISSED OFFSET
	struct FVector2D                                   GamepadLookAcceleration;                                  // 0x1484(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinMouseSenseScaling;                                     // 0x148C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxMouseSenseScaling;                                     // 0x1490(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TouchLookSensitivityADS;                                  // 0x1494(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x1498(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKeyMappingsUpdated;                                     // 0x14A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FKSCustomInputActionKey>             CustomInputActionKeys;                                    // 0x14B0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TArray<struct FKSCustomInputAxisKey>               CustomInputAxisKeys;                                      // 0x14C0(0x0010) (Edit, ZeroConstructor, Config, DisableEditOnInstance)
	TMap<struct FName, struct FKSCustomInputActionKeyMappings> KSCustomActionKeyMappings;                                // 0x14D0(0x0050) (ZeroConstructor, Config)
	TMap<struct FName, struct FKSCustomInputAxisKeyMappings> KSCustomAxisKeyMappings;                                  // 0x1520(0x0050) (ZeroConstructor, Config)
	class UClass*                                      KSLeftAnalogStickFilterClass;                             // 0x1570(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	class UClass*                                      KSRightAnalogStickFilterClass;                            // 0x1578(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	class UKSAnalogStickFilter*                        LeftAnalogStickFilter;                                    // 0x1580(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x1588(0x0010) MISSED OFFSET
	class UKSAnalogStickFilter*                        RightAnalogStickFilter;                                   // 0x1598(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x15A0(0x0010) MISSED OFFSET
	struct FSoftObjectPath                             TouchRegionDeltaAxisAssistMultiplierCurvePath;            // 0x15B0(0x0018) (ZeroConstructor, Config)
	class UCurveFloat*                                 TouchRegionDeltaAxisAssistMultiplierCurve;                // 0x15C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerInput");
		return ptr;
	}

};


// Class Killstreak.KSPlayerInventoryHelper
// 0x00A0 (0x01B8 - 0x0118)
class UKSPlayerInventoryHelper : public UPUMG_PlayerInventoryHelper
{
public:
	TMap<struct FInventoryId, struct FScriptMulticastDelegate> DynamicCallbacksPerInventoryId;                           // 0x0118(0x0050) (ZeroConstructor)
	TMap<struct FInventoryTypeId, struct FScriptMulticastDelegate> DynamicCallbacksPerInventoryTypeId;                       // 0x0168(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerInventoryHelper");
		return ptr;
	}


	void RemoveAllItemUpdatedCallbacks(struct FScriptDelegate* Callback);
	void RemoveAllItemTypeUpdatedCallbacks(struct FScriptDelegate* Callback);
	int GetCountByType(int* ItemTypeId, int* ItemSubTypeId, class AKSPlayerController** Player);
	int GetCount(int64_t* ItemId, class AKSPlayerController** Player);
	struct FDateTime GetAcquiredTime(int64_t* ItemId, class AKSPlayerController** Player);
	void AddItemUpdatedCallback(struct FScriptDelegate* Callback, int64_t* ItemId, class AKSPlayerController** Player);
	void AddItemTypeUpdatedCallback(struct FScriptDelegate* Callback, int* ItemTypeId, int* ItemSubTypeId, class AKSPlayerController** Player);
};


// Class Killstreak.KSPlayerMod
// 0x00D0 (0x0228 - 0x0158)
class UKSPlayerMod : public UKSItem
{
public:
	bool                                               bIsPerk;                                                  // 0x0158(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0159(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerMod.FunctionalClass
	bool                                               bIsInstanceReplicated;                                    // 0x0188(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	int                                                ModUnlockTier;                                            // 0x018C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EModInterferenceType                               AttachmentInteraction;                                    // 0x0190(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSingleInstanceStack;                                     // 0x0191(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EPlayerModType                                     _ModType;                                                 // 0x0192(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0193(0x0005) MISSED OFFSET
	struct FGameplayTagContainer                       EffectCategories;                                         // 0x0198(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FName>                               TriggerEvents;                                            // 0x01B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, int>                            AnimEventPriorityMap;                                     // 0x01C8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0218(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSPlayerMod.RemovesFromLoadout

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod");
		return ptr;
	}


	bool IsSingleInstanceStack();
	bool IsPerk();
	bool IsInstanceReplicated();
	TArray<struct FName> GetTriggerEvents();
	bool GetPerkCategory(class UPerkCategory** FoundPerkCategory);
	int GetModUnlockTier();
	EPlayerModType GetModType();
	EModInterferenceType GetModInteraction();
	void GetFunctionalClass();
	struct FGameplayTagContainer GetEffectCategories();
};


// Class Killstreak.KSPlayerMod_Accuracy
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_Accuracy : public UKSPlayerMod
{
public:
	float                                              BaseAccuracyMultiplier;                                   // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Accuracy");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_Activated
// 0x0058 (0x0280 - 0x0228)
class UKSPlayerMod_Activated : public UKSPlayerMod
{
public:
	int                                                RequiredCharge;                                           // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaximumCharge;                                            // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DefaultCharge;                                            // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RefundFactor;                                             // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasLockout;                                              // 0x0238(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0239(0x0003) MISSED OFFSET
	float                                              LockoutTime;                                              // 0x023C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFullChargeOnRoundStart;                                  // 0x0240(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEndOnDown;                                               // 0x0241(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEndOnDeath;                                              // 0x0242(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0243(0x0005) MISSED OFFSET
	unsigned char                                      UnknownData02[0x10];                                      // 0x0243(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSPlayerMod_Activated.BuffsGivenOnActivation
	bool                                               bKeepsTeamAliveIfUsable;                                  // 0x0258(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bKeepsTeamAliveIfActive;                                  // 0x0259(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x025A(0x0002) MISSED OFFSET
	float                                              AbilitySetupDuration;                                     // 0x025C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSetupLagCompensation;                                    // 0x0260(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0261(0x0003) MISSED OFFSET
	float                                              AbilityDuration;                                          // 0x0264(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AbilityEndWarningTime;                                    // 0x0268(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AbilityRecoveryDuration;                                  // 0x026C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSelectableNormally;                                      // 0x0270(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSelectableWhileDowned;                                   // 0x0271(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0272(0x0002) MISSED OFFSET
	float                                              ChargePerSecond;                                          // 0x0274(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ChargePerHundredPoints;                                   // 0x0278(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x027C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Activated");
		return ptr;
	}


	int GetRequiredCharge();
	float GetRefundFactor();
	int GetMaximumCharge();
	int GetDefaultCharge();
	void GetBuffs();
	float GetAbilitySetupDuration();
	float GetAbilityRecoveryDuration();
	float GetAbilityEndWarningTime();
	float GetAbilityDuration();
};


// Class Killstreak.KSPlayerMod_ActivatedTarget
// 0x0010 (0x0290 - 0x0280)
class UKSPlayerMod_ActivatedTarget : public UKSPlayerMod_Activated
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0280(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSPlayerMod_ActivatedTarget.TargetBuffsGivenOnActivation

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_ActivatedTarget");
		return ptr;
	}


	void GetTargetBuffs();
};


// Class Killstreak.KSPlayerMod_ActivationConfig
// 0x0000 (0x0280 - 0x0280)
class UKSPlayerMod_ActivationConfig : public UKSPlayerMod_Activated
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_ActivationConfig");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_AdsMoveSpeed
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_AdsMoveSpeed : public UKSPlayerMod
{
public:
	float                                              AdsMoveSpeedMultiplier;                                   // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_AdsMoveSpeed");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_Aim
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_Aim : public UKSPlayerMod
{
public:
	bool                                               AimLocked;                                                // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CrosshairHidden;                                          // 0x0229(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x022A(0x0002) MISSED OFFSET
	float                                              SensitivityMultiplier;                                    // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Aim");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_AngleConfig
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_AngleConfig : public UKSPlayerMod
{
public:
	float                                              AngleThreshold;                                           // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseDistance;                                             // 0x022C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x022D(0x0003) MISSED OFFSET
	float                                              DistanceThreshold;                                        // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0234(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_AngleConfig");
		return ptr;
	}


	bool CheckDistanceAndAngleFromEnemies(class AKSCharacter** InCharacter, bool* bWithinDistance, bool* bWithinAngle);
	bool CheckDistanceAndAngle(struct FVector* start, struct FVector* end, struct FVector* DirectionToCheck, bool* bWithinDistance, bool* bWithinAngle);
	bool CheckAngle(struct FVector* Direction1, struct FVector* Direction2, bool* bWithinAngle);
};


// Class Killstreak.KSPlayerMod_ApplyModOnEvent
// 0x0018 (0x0240 - 0x0228)
class UKSPlayerMod_ApplyModOnEvent : public UKSPlayerMod
{
public:
	float                                              ModDuration;                                              // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x10];                                      // 0x022C(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSPlayerMod_ApplyModOnEvent.ModsToGiveOnEvent

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_ApplyModOnEvent");
		return ptr;
	}


	void RemoveMod(class AKSPlayerState** ModOwner);
	float GetModDuration();
	void ApplyMod(class AKSPlayerState** ModOwner);
};


// Class Killstreak.KSPlayerMod_CarryDownedAllies
// 0x0000 (0x0228 - 0x0228)
class UKSPlayerMod_CarryDownedAllies : public UKSPlayerMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_CarryDownedAllies");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_Charge
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_Charge : public UKSPlayerMod
{
public:
	bool                                               bIsMultiplier;                                            // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	float                                              ChargeMultiplier;                                         // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsDiscount;                                              // 0x0230(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	int                                                ChargeDiscount;                                           // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Charge");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_DamageDealt
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_DamageDealt : public UKSPlayerMod
{
public:
	float                                              DamageDealtMultiplier;                                    // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SlowedDamageDealtMultiplier;                              // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeployableDamageDealtMultiplier;                          // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0234(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_DamageDealt");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_DamageTaken
// 0x00C0 (0x02E8 - 0x0228)
class UKSPlayerMod_DamageTaken : public UKSPlayerMod
{
public:
	TArray<EDamageCategory>                            AffectedDamageCategories;                                 // 0x0228(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DamageTakenMultiplier;                                    // 0x0238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x023C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x023C(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_DamageTaken.DamageTakenParticle
	bool                                               ReducesAgentsDamageTaken;                                 // 0x0268(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ImmuneToNonDamageEffects;                                 // 0x0269(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NotifyDamageReduction;                                    // 0x026A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x026B(0x0005) MISSED OFFSET
	unsigned char                                      UnknownData03[0x28];                                      // 0x026B(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_DamageTaken.HitBodyAudioEvent
	unsigned char                                      UnknownData04[0x28];                                      // 0x0298(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_DamageTaken.HitHeadAudioEvent
	unsigned char                                      UnknownData05[0x28];                                      // 0x02C0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_DamageTaken.HitByAudioEvent

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_DamageTaken");
		return ptr;
	}


	TArray<EDamageCategory> GetAffectedDamageCategories();
};


// Class Killstreak.KSPlayerMod_DodgeRollDamageTaken
// 0x0000 (0x02E8 - 0x02E8)
class UKSPlayerMod_DodgeRollDamageTaken : public UKSPlayerMod_DamageTaken
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_DodgeRollDamageTaken");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_DodgeRollLockout
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_DodgeRollLockout : public UKSPlayerMod
{
public:
	float                                              LockoutTimeMultiplier;                                    // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_DodgeRollLockout");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_DownedHack
// 0x0000 (0x0228 - 0x0228)
class UKSPlayerMod_DownedHack : public UKSPlayerMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_DownedHack");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_DownedRoll
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_DownedRoll : public UKSPlayerMod
{
public:
	float                                              CooldownMultiplier;                                       // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceMultiplier;                                       // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedMultiplier;                                          // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AdditionalDownedHealth;                                   // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_DownedRoll");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_EffectImmunity
// 0x0000 (0x0228 - 0x0228)
class UKSPlayerMod_EffectImmunity : public UKSPlayerMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_EffectImmunity");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_FullSpeedADS
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_FullSpeedADS : public UKSPlayerMod
{
public:
	float                                              FullSpeedAlpha;                                           // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_FullSpeedADS");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_Gadget
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_Gadget : public UKSPlayerMod
{
public:
	float                                              GadgetThrowSpeedMutliplier;                               // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GadgetInnerRadiusMultiplier;                              // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GadgetOuterRadiusMutliplier;                              // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GadgetFXSizeMultiplier;                                   // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Gadget");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_GiveEquipPoints
// 0x0020 (0x0248 - 0x0228)
class UKSPlayerMod_GiveEquipPoints : public UKSPlayerMod
{
public:
	struct FGameplayTagContainer                       EquipPointsToGive;                                        // 0x0228(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_GiveEquipPoints");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_GiveItemOnActivation
// 0x0028 (0x02A8 - 0x0280)
class UKSPlayerMod_GiveItemOnActivation : public UKSPlayerMod_Activated
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0280(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_GiveItemOnActivation.GivenItem

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_GiveItemOnActivation");
		return ptr;
	}


	void GetGivenItem();
};


// Class Killstreak.KSPlayerMod_GiveItemOnEvent
// 0x0028 (0x0250 - 0x0228)
class UKSPlayerMod_GiveItemOnEvent : public UKSPlayerMod
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0228(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_GiveItemOnEvent.ItemToGive

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_GiveItemOnEvent");
		return ptr;
	}


	void GiveItem(class AKSCharacter** ModOwner, struct FScriptDelegate* GivenToEvent);
	void GetItemToGive();
};


// Class Killstreak.KSPlayerMod_GiveWeaponConfig
// 0x0008 (0x02B0 - 0x02A8)
class UKSPlayerMod_GiveWeaponConfig : public UKSPlayerMod_GiveItemOnActivation
{
public:
	float                                              Radius;                                                   // 0x02A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReclaimCharge;                                            // 0x02AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_GiveWeaponConfig");
		return ptr;
	}


	float GetReclaimCharge();
	float GetRadius();
};


// Class Killstreak.KSPlayerMod_GlobalMoveSpeed
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_GlobalMoveSpeed : public UKSPlayerMod
{
public:
	float                                              GlobalMoveSpeedMultiplier;                                // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanSprintWhenAffected;                                    // 0x022C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanDodgeRollWhenAffected;                                 // 0x022D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x022E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_GlobalMoveSpeed");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_Hacking
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_Hacking : public UKSPlayerMod
{
public:
	float                                              HackSpeedMultiplier;                                      // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DehackSpeedMultiplier;                                    // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Hacking");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_HardLandAvoid
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_HardLandAvoid : public UKSPlayerMod
{
public:
	bool                                               AllowBunnyHopping;                                        // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0229(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_HardLandAvoid");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_HealOnEvent
// 0x0020 (0x0248 - 0x0228)
class UKSPlayerMod_HealOnEvent : public UKSPlayerMod
{
public:
	bool                                               bHealUpTo;                                                // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHealAsPercentage;                                        // 0x0229(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x022A(0x0002) MISSED OFFSET
	float                                              HealthPercentage;                                         // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthAmount;                                             // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealDelay;                                                // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealPeriod;                                               // 0x0238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HealTickCount;                                            // 0x023C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFirstTickImmediately;                                    // 0x0240(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0241(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_HealOnEvent");
		return ptr;
	}


	bool GetHealUpTo();
	int GetHealTickCount();
	float GetHealthPercentage();
	float GetHealthAmount();
	float GetHealPeriod();
	float GetHealDelay();
	bool GetHealAsPercentage();
	bool GetFirstTickImmediately();
	void ApplyOverheal(class AKSCharacter** CharacterToHeal, class AKSCharacter** Healer);
	void ApplyHeal(class AKSCharacter** CharacterToHeal, class AKSCharacter** Healer);
};


// Class Killstreak.KSPlayerMod_HealthRegeneration
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_HealthRegeneration : public UKSPlayerMod
{
public:
	float                                              HealthRegenerationPerSecondAdded;                         // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthRegenerationDelayAdded;                             // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_HealthRegeneration");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_HideFromTeam
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_HideFromTeam : public UKSPlayerMod
{
public:
	bool                                               bHideFriendlyStencil;                                     // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNoFriendlyDrone;                                         // 0x0229(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x022A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_HideFromTeam");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_HideTarget
// 0x0000 (0x0228 - 0x0228)
class UKSPlayerMod_HideTarget : public UKSPlayerMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_HideTarget");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_HipfireSprint
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_HipfireSprint : public UKSPlayerMod
{
public:
	bool                                               bCanHipfireSprint;                                        // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanReloadSprint;                                         // 0x0229(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x022A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_HipfireSprint");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_KeepTeamAlive
// 0x0000 (0x0228 - 0x0228)
class UKSPlayerMod_KeepTeamAlive : public UKSPlayerMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_KeepTeamAlive");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_MainCameraFov
// 0x0038 (0x0260 - 0x0228)
class UKSPlayerMod_MainCameraFov : public UKSPlayerMod
{
public:
	float                                              FieldOfViewOverride;                                      // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintFovOverride;                                        // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraBoomLengthBonus;                                    // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintCameraBoomLengthBonus;                              // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0238(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerMod_MainCameraFov.SprintCameraShakeOverride

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_MainCameraFov");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_MedPackSpeed
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_MedPackSpeed : public UKSPlayerMod
{
public:
	float                                              MedPackSpeedMultiplier;                                   // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_MedPackSpeed");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_MedPackWhileMoving
// 0x0000 (0x0228 - 0x0228)
class UKSPlayerMod_MedPackWhileMoving : public UKSPlayerMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_MedPackWhileMoving");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_MeleeAttackSpeed
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_MeleeAttackSpeed : public UKSPlayerMod
{
public:
	float                                              MeleeAttackSpeedMultiplier;                               // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_MeleeAttackSpeed");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_MeleeMoveSpeed
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_MeleeMoveSpeed : public UKSPlayerMod
{
public:
	float                                              MeleeMoveSpeedMultiplier;                                 // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_MeleeMoveSpeed");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_OnDownOtherEvent
// 0x00B0 (0x02D8 - 0x0228)
class UKSPlayerMod_OnDownOtherEvent : public UKSPlayerMod
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0228(0x0050) UNKNOWN PROPERTY: MapProperty Killstreak.KSPlayerMod_OnDownOtherEvent.MeleeChargeBonusModePairs
	int                                                MeleeChargeBonusDefault;                                  // 0x0278(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x027C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x027C(0x0050) UNKNOWN PROPERTY: MapProperty Killstreak.KSPlayerMod_OnDownOtherEvent.HeadshotChargeBonusModePairs
	int                                                HeadshotChargeBonusDefault;                               // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_OnDownOtherEvent");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_PickupRange
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_PickupRange : public UKSPlayerMod
{
public:
	float                                              PickupRadius;                                             // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PickupCylinderRadius;                                     // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CompleteRadiusOverride;                                   // 0x0230(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0231(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_PickupRange");
		return ptr;
	}


	float GetPickupRadius();
};


// Class Killstreak.KSPlayerMod_PingOnOtherDowned
// 0x0048 (0x0270 - 0x0228)
class UKSPlayerMod_PingOnOtherDowned : public UKSPlayerMod
{
public:
	int                                                NumberOfPings;                                            // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumberOfEnemiesToPing;                                    // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldPingDownedPlayer;                                   // 0x0230(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	float                                              SecondsToRevealPingedEnemies;                             // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PingPeriod;                                               // 0x0238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PingRadius;                                               // 0x023C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PingAllEnemyTeams;                                        // 0x0240(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BroadcastPingToAllies;                                    // 0x0241(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DelayPingPastDownImmune;                                  // 0x0242(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0243(0x0005) MISSED OFFSET
	unsigned char                                      UnknownData02[0x28];                                      // 0x0243(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_PingOnOtherDowned.EmitterTemplate

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_PingOnOtherDowned");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_ReloadAndRetrieve
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_ReloadAndRetrieve : public UKSPlayerMod
{
public:
	float                                              RetrieveTimeMultiplier;                                   // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadTimeMultiplier;                                     // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_ReloadAndRetrieve");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_ReloadTime
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_ReloadTime : public UKSPlayerMod
{
public:
	float                                              ReloadTimeMultiplier;                                     // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_ReloadTime");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_RetrieveTime
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_RetrieveTime : public UKSPlayerMod
{
public:
	float                                              RetrieveTimeMultiplier;                                   // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_RetrieveTime");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_Revive
// 0x0040 (0x0268 - 0x0228)
class UKSPlayerMod_Revive : public UKSPlayerMod
{
public:
	bool                                               bIsMultiplier;                                            // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	float                                              ReviveTimeMultiplier;                                     // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsTime;                                                  // 0x0230(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	float                                              ReviveTime;                                               // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasTextOverride;                                         // 0x0238(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0239(0x0007) MISSED OFFSET
	struct FText                                       ReviveText;                                               // 0x0240(0x0018) (Edit, DisableEditOnInstance)
	struct FName                                       ReviveInteractionMode;                                    // 0x0258(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealChargeMultiplier;                                     // 0x0260(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0264(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Revive");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_ReviverDamageTaken
// 0x0008 (0x02F0 - 0x02E8)
class UKSPlayerMod_ReviverDamageTaken : public UKSPlayerMod_DamageTaken
{
public:
	bool                                               bCountRemoteRevives;                                      // 0x02E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_ReviverDamageTaken");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_ShowTeamHovers
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_ShowTeamHovers : public UKSPlayerMod
{
public:
	bool                                               ShowTeamHovers;                                           // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	int                                                Priority_ShowTeamHovers;                                  // 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoverCharacterLingerExtraTime;                            // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Priority_HoverCharacterLingerExtraTime;                   // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_ShowTeamHovers");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_SprintSpeed
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_SprintSpeed : public UKSPlayerMod
{
public:
	float                                              SprintSpeedMultiplier;                                    // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_SprintSpeed");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_StartingEquipment
// 0x0028 (0x0250 - 0x0228)
class UKSPlayerMod_StartingEquipment : public UKSPlayerMod
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0228(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSPlayerMod_StartingEquipment.EquipmentAsset

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_StartingEquipment");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_StartEquipNoFlinch
// 0x0000 (0x0250 - 0x0250)
class UKSPlayerMod_StartEquipNoFlinch : public UKSPlayerMod_StartingEquipment
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_StartEquipNoFlinch");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_Undetectable
// 0x0008 (0x0230 - 0x0228)
class UKSPlayerMod_Undetectable : public UKSPlayerMod
{
public:
	bool                                               HiddenOnRadar;                                            // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HiddenFromSonar;                                          // 0x0229(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HiddenFromRemoteExplosives;                               // 0x022A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HiddenFromThermal;                                        // 0x022B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HiddenFromShotDetection;                                  // 0x022C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x022D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_Undetectable");
		return ptr;
	}

};


// Class Killstreak.KSPlayerMod_VaultHeight
// 0x0010 (0x0238 - 0x0228)
class UKSPlayerMod_VaultHeight : public UKSPlayerMod
{
public:
	float                                              VaultHeight;                                              // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       VaultName;                                                // 0x022C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0234(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMod_VaultHeight");
		return ptr;
	}

};


// Class Killstreak.KSPlayerModInst_WeaponAttachment
// 0x0038 (0x01E0 - 0x01A8)
class UKSPlayerModInst_WeaponAttachment : public UKSPlayerModInstance
{
public:
	TArray<class UKSWeaponAttachment*>                 AttachmentsToGive;                                        // 0x01A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<EItemSourceType>                            ItemSourcesThatAllowAttachmentGiving;                     // 0x01B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<EItemSourceType>                            ItemSourcesThatForbidAttachmentGiving;                    // 0x01C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bAttachmentsPersistOnDrop;                                // 0x01D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01D9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerModInst_WeaponAttachment");
		return ptr;
	}


	void WeaponAddedToOwnerInventory(class AKSWeapon** NewWeapon, struct FGiveItemParameters* InGiveItemParameters);
	void OnAttachmentGivenSuccess(class UKSItem** ItemToGive, class UKSWeaponAttachmentInstance** GivenAttachment, struct FGiveItemParameters* InGiveItemParameters);
	void OnAttachmentGiven(class UKSItem** ItemToGive, class UObject** GivenObject, struct FGiveItemParameters* InGiveItemParameters, bool* bSuccess);
};


// Class Killstreak.KSWidgetInfoActor
// 0x0018 (0x0348 - 0x0330)
class AKSWidgetInfoActor : public AInfo
{
public:
	TArray<struct FKSWidgetInfoParams>                 WidgetParamsToCreate;                                     // 0x0330(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class AKSPlayerController*                         PlayerForWidget;                                          // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWidgetInfoActor");
		return ptr;
	}


	void OnHUDSetup();
};


// Class Killstreak.KSPlayerShop
// 0x01E0 (0x0528 - 0x0348)
class AKSPlayerShop : public AKSWidgetInfoActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET
	class AKSPlayerState*                              _PlayerState;                                             // 0x0358(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPurchaseAcknowledged;                                   // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShopManifestChanged;                                    // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShopItemChanged;                                        // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShopItemPurchased;                                      // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShopOpened;                                             // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShopClosed;                                             // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              CashPerKSPoint;                                           // 0x03C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	TArray<struct FShopItem>                           ShopManifest;                                             // 0x03C8(0x0010) (Edit, ZeroConstructor)
	struct FShopManifest                               ShopManifestMap;                                          // 0x03D8(0x0108) (Net)
	int                                                NextTransactionId;                                        // 0x04E0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2D];                                      // 0x04E4(0x002D) MISSED OFFSET
	bool                                               bShopInitialized;                                         // 0x0511(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bAvailable;                                               // 0x0512(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0513(0x0005) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnShopAvailabilityChanged;                                // 0x0518(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerShop");
		return ptr;
	}


	void ZoneLeftByPlayer(class AKSPlayerState** InPlayerState);
	void ZoneEnteredByPlayer(class AKSPlayerState** InPlayerState);
	void TryToSetItemActive(EShopItemType* ShopItemType);
	void TryToPurchaseItem(EShopItemType* ShopItemType);
	void ToggleShop();
	void ServerSetItemActive(struct FPlayerShopTransaction* InTransactionInfo);
	void ServerAttemptPurchase(struct FPlayerShopTransaction* InTransactionInfo);
	void OpenShop();
	void OnRep_PlayerState();
	void OnRep_bAvailable();
	void OnPlayerScoreChanged(struct FKSScoreChangeEvent* ScoreEvent);
	void OnPlayerJobChanged();
	void OnOwnerDestroyed(class AActor** DestroyedActor);
	void NotifyShopItemPurchased(struct FShopItem* ShopItem);
	void NotifyShopItemChanged(struct FShopItem* ShopItem);
	void InitializeShopItems();
	bool GetShopItemByType(EShopItemType* ShopItemType, struct FShopItem* Item);
	bool GetShopAvailability();
	int GetPriceOfItem(class UKSItem** InItem);
	void CloseShop();
	void ClientPurchaseAcknowledge(struct FPlayerShopTransaction* InTransactionInfo, bool* bSuccess);
	bool CanPurchaseItemNow(EShopItemType* ShopItemType, bool* bOutAvailable, bool* bCanAfford);
};


// Class Killstreak.KSPlayerShopZone
// 0x0020 (0x0350 - 0x0330)
class AKSPlayerShopZone : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnZoneEntered;                                            // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnZoneLeft;                                               // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerShopZone");
		return ptr;
	}


	void ZoneLeftByPlayer(class AKSPlayerState** PlayerState);
	void ZoneEnteredByPlayer(class AKSPlayerState** PlayerState);
};


// Class Killstreak.KSPlayerShotListener
// 0x00E0 (0x01D8 - 0x00F8)
class UKSPlayerShotListener : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    MinimapShotNofify;                                        // 0x00F8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0108(0x0058) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0108(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerShotListener.MinimapDisplayWidget
	unsigned char                                      UnknownData02[0x28];                                      // 0x0188(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerShotListener.FullmapDisplayWidget
	unsigned char                                      UnknownData03[0x28];                                      // 0x01B0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerShotListener.OverlayDisplayWidget

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerShotListener");
		return ptr;
	}


	void OnKSGameStateDestroyed(class AActor** Actor);
	void ClientRecieveShotInfo(struct FKSClientShotInfo* ShotInfo);
	void Authority_ProcessShotInfo(struct FKSGlobalShotInfo* ShotInfo);
};


// Class Killstreak.KSPlayerStart
// 0x0020 (0x0380 - 0x0360)
class AKSPlayerStart : public APlayerStart
{
public:
	bool                                               bInitialSpawnPoint;                                       // 0x0360(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRespawnPoint;                                            // 0x0361(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0362(0x0002) MISSED OFFSET
	int                                                SideNum;                                                  // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bBotOnly;                                                 // 0x0368(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0369(0x0007) MISSED OFFSET
	TArray<class UKSItem*>                             InventoryToGive;                                          // 0x0370(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerStart");
		return ptr;
	}


	void SetSideNum(int* InSideNum);
	void Init(class AKSCharacter** Character);
	int GetSideNum();
	void CharacterLoadoutRestored(class AKSCharacter** Character);
};


// Class Killstreak.KSPlayerStart_Extraction
// 0x0000 (0x0380 - 0x0380)
class AKSPlayerStart_Extraction : public AKSPlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerStart_Extraction");
		return ptr;
	}

};


// Class Killstreak.KSPlayerState
// 0x0598 (0x09F0 - 0x0458)
class AKSPlayerState : public APlayerState
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0458(0x0008) MISSED OFFSET
	bool                                               bIsDemoRecording;                                         // 0x0460(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFriendlyFireInflicted;                                  // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              TrackedFriendlyFireDamage;                                // 0x0478(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReverseFriendlyFireEnabled;                              // 0x047C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x047D(0x0003) MISSED OFFSET
	float                                              PredictionFudge;                                          // 0x0480(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxPredictionPing;                                        // 0x0484(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTrackedActorBegin;                                      // 0x0488(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnTrackedActorEnd;                                        // 0x0498(0x0010) (ZeroConstructor, InstancedReference)
	EIsPlayer                                          PlayerType;                                               // 0x04A8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x04A9(0x0007) MISSED OFFSET
	class AKSTeamState*                                r_Team;                                                   // 0x04B0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x04B8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKSPlayerStateTeamChangedDel;                            // 0x04C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0x18];                                      // 0x04D0(0x0018) MISSED OFFSET
	TWeakObjectPtr<class AKSCharacterBase>             CharacterOwner;                                           // 0x04E8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TWeakObjectPtr<class AKSCharacterBase>             BackupCharacterOwner;                                     // 0x04F0(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x30];                                      // 0x04F8(0x0030) MISSED OFFSET
	EEliminationState                                  EliminatedState;                                          // 0x0528(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0529(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerEliminated;                                       // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bDowned;                                                  // 0x0540(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0541(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerDownedChangedDel;                                 // 0x0548(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     LastKnownLocation;                                        // 0x0558(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsPremiumBoosted;                                        // 0x0564(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bUIRelevant;                                              // 0x0565(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0566(0x0002) MISSED OFFSET
	struct FSerializedMctsNetId                        r_ReplicatedNetId;                                        // 0x0568(0x0008) (Net)
	unsigned char                                      UnknownData10[0x18];                                      // 0x0570(0x0018) MISSED OFFSET
	class UKSTimerComponent*                           RespawnTimer;                                             // 0x0588(0x0008) (Edit, ExportObject, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UKSTimerComponent*                           DownedTimer;                                              // 0x0590(0x0008) (Edit, ExportObject, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnRespawnTimerTick;                                       // 0x0598(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRespawnTimerActive;                                     // 0x05A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRespawnTimerComplete;                                   // 0x05B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownedTimerTick;                                        // 0x05C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownedTimerActive;                                      // 0x05D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDownedTimerComplete;                                    // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnScoreChanged;                                           // 0x05F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                Kills;                                                    // 0x0608(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                deaths;                                                   // 0x060C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                Assists;                                                  // 0x0610(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                downs;                                                    // 0x0614(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                Revives;                                                  // 0x0618(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                Eliminations;                                             // 0x061C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                Hacks;                                                    // 0x0620(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                Dehacks;                                                  // 0x0624(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x18];                                      // 0x0628(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUIRelevantPlayerStateChangedDel;                        // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSScoreChangeList                          _ScoreChangeList;                                         // 0x0650(0x0090) (Net)
	class UKSPlayerMatchStats*                         PreviewRecordedStats;                                     // 0x06E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                Money;                                                    // 0x06E8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                LastMoney;                                                // 0x06EC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnMoneyChanged;                                           // 0x06F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bMoneyGivesCharge;                                        // 0x0700(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0701(0x0003) MISSED OFFSET
	int                                                Cash;                                                     // 0x0704(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                LastCash;                                                 // 0x0708(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                TotalCashEarned;                                          // 0x070C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                LastCashEarned;                                           // 0x0710(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0714(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCashChanged;                                            // 0x0718(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCashEarnedChanged;                                      // 0x0728(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCashChangeEvent;                                        // 0x0738(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSCashChangeList                           _CashChangeList;                                          // 0x0748(0x0090) (Net)
	bool                                               bShouldRestoreInventory;                                  // 0x07D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x17];                                      // 0x07D9(0x0017) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerModCharge;                                        // 0x07F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNextModTier;                                            // 0x0800(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Deprecated)
	struct FScriptMulticastDelegate                    OnModSelectConfirm;                                       // 0x0810(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, Deprecated)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0820(0x0008) MISSED OFFSET
	bool                                               bOnlyChargeModsWhenAlive;                                 // 0x0828(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x17];                                      // 0x0829(0x0017) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModAddedDel;                                            // 0x0840(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData17[0x18];                                      // 0x0850(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnModRemovedDel;                                          // 0x0868(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData18[0x18];                                      // 0x0878(0x0018) MISSED OFFSET
	TArray<class UKSPlayerModInstance*>                ActiveMods;                                               // 0x0890(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UKSSpecialty*>                        Specialties;                                              // 0x08A0(0x0010) (Net, ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnJobChanged;                                             // 0x08B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSJobItem*                                  _JobItem;                                                 // 0x08C0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnJobLoadFinishedDel;                                     // 0x08C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x18];                                      // 0x08D8(0x0018) MISSED OFFSET
	class UKSLoadoutClass*                             _LoadoutClass;                                            // 0x08F0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class AKSItemDrop*>                         ItemsDroppedOnDeath;                                      // 0x08F8(0x0010) (Net, ZeroConstructor, Transient)
	unsigned char                                      UnknownData20[0x18];                                      // 0x0908(0x0018) MISSED OFFSET
	EKSCharacterGender                                 _Gender;                                                  // 0x0920(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	EKSCharacterGender                                 LocalGender;                                              // 0x0921(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData21[0x6];                                       // 0x0922(0x0006) MISSED OFFSET
	struct FGameplayTagContainer                       SkinTagContainer;                                         // 0x0928(0x0020) (Transient)
	unsigned char                                      UnknownData22[0x18];                                      // 0x0948(0x0018) MISSED OFFSET
	bool                                               bStale;                                                   // 0x0960(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData23[0x7];                                       // 0x0961(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData24[0x28];                                      // 0x0961(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerState.MinimapDisplayWidget
	unsigned char                                      UnknownData25[0x28];                                      // 0x0990(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerState.FullmapDisplayWidget
	unsigned char                                      UnknownData26[0x28];                                      // 0x09B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSPlayerState.OverlayDisplayWidget
	struct FScriptMulticastDelegate                    OnShopItemPurchased;                                      // 0x09E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerState");
		return ptr;
	}


	void TryToBroadCastUIRelevantInfoHasChanged();
	bool SpendCash(int* cost);
	void SpawnedDropDestroyed(class AActor** Drop);
	void SetMoney(int* NewAmount);
	void SelectActiveMod(class UKSPlayerMod** NewMod);
	void RespawnTimerTick(float* Seconds);
	void RespawnTimerComplete();
	void RespawnTimerActive(bool* bActive);
	void ResetElimination();
	bool RemoveMod(class UKSPlayerMod** Mod, bool* RemoveAll);
	void OnTeamUpdated();
	void OnReverseFriendlyFireEnabled();
	void OnRep_TotalCashEarned();
	void OnRep_Specialties();
	void OnRep_RespawnTimer();
	void OnRep_PlayerType();
	void OnRep_Money();
	void OnRep_MctsNetId();
	void OnRep_LoadoutClass();
	void OnRep_JobItem();
	void OnRep_Gender();
	void OnRep_Eliminated();
	void OnRep_DownedTimer();
	void OnRep_Downed();
	void OnRep_Cash();
	void OnDeathDrop(class UKSItem** InItem, class AKSItemDrop** InDrop);
	void NotifyScoreChange(struct FKSScoreChangeEvent* Event);
	void NotifyCashChange(struct FKSScoreChangeEvent* Event);
	bool IsWaitingForRespawn();
	bool IsUIRelevant();
	bool IsReverseFriendlyFireEnabled();
	bool IsRespawning();
	bool IsPremiumBoosted();
	bool IsPlayer();
	bool IsInPlay();
	bool IsInParty();
	bool IsEliminated();
	bool IsDowned();
	bool HasModAny(TArray<class UKSPlayerMod*>* TestPlayerMods);
	bool HasMod(class UKSPlayerMod** TestPlayerMod);
	bool HasHideTarget();
	bool GiveModInstance(class UKSPlayerMod** Mod, class AKSPlayerState** ModInstigator, bool* Unique, class UKSPlayerModInstance** Instance);
	bool GiveMod(class UKSPlayerMod** Mod, class AKSPlayerState** ModInstigator, bool* Unique);
	float GetTimeUntilRespawnAllowed();
	bool GetSpecialties(TArray<class UKSSpecialty*>* OutSpecialties);
	int GetScore();
	int GetRevives();
	float GetRemainingRespawnTime();
	class UPUMG_PlayerInfo* GetPlayerInfo(class APUMG_HUD** HUD);
	int GetPlayerId();
	int GetPartySize();
	void GetModTierProgress(int* Current, int* Target);
	TArray<class UKSPlayerMod*> GetModOptionsOfTier(int* Tier);
	bool GetModInstances(TArray<class UKSPlayerModInstance*>* OutMods);
	int64_t GetMctsPlayerId();
	bool GetLoadoutClass(class UKSLoadoutClass** OutLoadoutClass);
	int GetKills();
	class UKSJobItem* GetJob();
	TArray<class AKSItemDrop*> GetItemsDroppedOnDeath();
	int GetHacks();
	int GetEliminations();
	EEliminationState GetEliminatedState();
	int GetDowns();
	int GetDehacks();
	int GetDeaths();
	float GetCurrentTimePlayed();
	int GetCurrentModTier();
	int GetCurrentCash();
	class AKSCharacterBase* GetCharacterOwner();
	class AKSCharacterBase* GetBestCharacterOwner();
	class AKSCharacterBase* GetBackupCharacterOwner();
	int GetAssists();
	TArray<class UKSPlayerMod*> GetActiveMods();
	bool GetActivatableMods(TArray<class UKSModInst_Activated*>* OutMods);
	void EnterPlay(bool* bSkipResetEliminatedOrDownedTest, bool* bSpendTicket);
	void EliminatePlayer();
	void EarnCash(int* Earnings, bool* bShareWithTeam, struct FText* Reason);
	void DownedTimerTick(float* Seconds);
	void DownedTimerComplete();
	void DownedTimerActive(bool* bActive);
	void ClientNotifyFriendlyFireDamageApplied(float* Amount);
	void ClientNotifyExceededReverseFriendlyFireThreshold();
	void ChangeMoney(int* Delta, struct FText* Reason, bool* bBonus);
	bool AnyActivatableModsActive();
	void AddScore(int* InScore);
	void AddRevive(int* Count);
	void AddPerSecondCharge();
	void AddKill(int* Count);
	void AddHack(int* Count);
	void AddElimination(int* Count);
	void AddDown(int* Count);
	void AddDehack(int* Count);
	void AddDeath(int* Count);
	void AddAssist(int* Count);
	bool ActivatableModAtIndexActive(int* AbilityIndex);
};


// Class Killstreak.KSPlayerState_Control
// 0x0000 (0x09F0 - 0x09F0)
class AKSPlayerState_Control : public AKSPlayerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerState_Control");
		return ptr;
	}

};


// Class Killstreak.KSPlayerState_Heist
// 0x0008 (0x09F8 - 0x09F0)
class AKSPlayerState_Heist : public AKSPlayerState
{
public:
	int                                                HardCashAmount;                                           // 0x09F0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                SoftCashAmount;                                           // 0x09F4(0x0004) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerState_Heist");
		return ptr;
	}


	int GetSoftCash();
	int GetHardCash();
};


// Class Killstreak.KSPlayerStatsActivity
// 0x0008 (0x01F0 - 0x01E8)
class UKSPlayerStatsActivity : public UKSActivity
{
public:
	EKSPlayerStatsActivityType                         ReferenceType;                                            // 0x01E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerStatsActivity");
		return ptr;
	}

};


// Class Killstreak.KSPlayerStatsManager
// 0x0000 (0x01C0 - 0x01C0)
class UKSPlayerStatsManager : public UKSActivityManagerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerStatsManager");
		return ptr;
	}


	class UKSActivityInstance* GetActivityInstanceByType(EKSPlayerStatsActivityType* Type, class AKSPlayerController** Player);
	class UKSPlayerStatsActivity* FindActivityByType(EKSPlayerStatsActivityType* Type);
};


// Class Killstreak.KSProjectile
// 0x0358 (0x06B8 - 0x0360)
class AKSProjectile : public AKSLagCompensatedActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0360(0x0018) MISSED OFFSET
	float                                              HorizontalThrowSpeed;                                     // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDeadOrDownedDrop;                                        // 0x037C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x037D(0x0003) MISSED OFFSET
	class USceneComponent*                             CollisionComponent0;                                      // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UProjectileMovementComponent*                _ProjectileMovementComponent;                             // 0x0388(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FHitResult                                  ProjectileHit;                                            // 0x0390(0x0088) (BlueprintVisible, Net, IsPlainOldData)
	float                                              LifeSpanAfterDeactivate;                                  // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldHideOnDeactivate;                                  // 0x041C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStopped;                                                 // 0x041D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x12];                                      // 0x041E(0x0012) MISSED OFFSET
	float                                              HitValidationLenience;                                    // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FHitResult                                  StoppingHit;                                              // 0x0434(0x0088) (BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	bool                                               bAttachWhenStopped;                                       // 0x04BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDetachWhenBumped;                                        // 0x04BD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSimulatePhysicsWhenStopped;                              // 0x04BE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCreateClusterSegmentsOnStopped;                          // 0x04BF(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCreateClusterSegmentsOnExplode;                          // 0x04C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x04C1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponAssetSet;                                         // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x04D8(0x0010) MISSED OFFSET
	class UKSWeaponAsset*                              _WeaponAsset;                                             // 0x04E8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UKSWeaponAsset*                              ParentWeaponAsset;                                        // 0x04F0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UKSWeaponAsset*                              DamageWeaponAssetOverride;                                // 0x04F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AKSWeapon*                                   SpawningWeapon;                                           // 0x0500(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     SpawnLocation;                                            // 0x0508(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    SpawnRotation;                                            // 0x0514(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	class UPrimitiveComponent*                         PrimitiveCollisionComponent;                              // 0x0520(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FVector                                     LocationLastFrame;                                        // 0x0528(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bActive;                                                  // 0x0534(0x0001) (ZeroConstructor, IsPlainOldData)
	EProjectileExplosionType                           DeactivateExplosionType;                                  // 0x0535(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDeactivateInWater;                                       // 0x0536(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x5];                                       // 0x0537(0x0005) MISSED OFFSET
	bool                                               bCanBeKilled;                                             // 0x053C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x053D(0x0003) MISSED OFFSET
	float                                              MaxHealth;                                                // 0x0540(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSetInstigatorToKiller;                                   // 0x0544(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0545(0x0003) MISSED OFFSET
	float                                              CurrentHealth;                                            // 0x0548(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              LifeSpanAfterKilled;                                      // 0x054C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bExplodeOnKilled;                                         // 0x0550(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProjectileKillPending;                                   // 0x0551(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x0552(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnProjectileKilled;                                       // 0x0558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bAllowFriendlyPlayersToDamage;                            // 0x0568(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasPlayedExplosion;                                      // 0x0569(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x6];                                       // 0x056A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayExplosion;                                          // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UParticleSystem*                             DefaultSpang;                                             // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<TEnumAsByte<EPhysicalSurface>, class UParticleSystem*> SurfaceSpangs;                                            // 0x0588(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SpinsPerSecond;                                           // 0x05D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedToReachSpinsPerSecond;                               // 0x05DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SpinAxis;                                                 // 0x05E0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBreakDestructibles;                                   // 0x05EC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanReclaim;                                              // 0x05ED(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanAnyoneReclaim;                                        // 0x05EE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldRestoreWeaponAssetOnReclaim;                       // 0x05EF(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReclaimTime;                                              // 0x05F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x05F4(0x0004) MISSED OFFSET
	class UClass*                                      ReclaimInteractionType;                                   // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AKSCharacter*                                Reclaimer;                                                // 0x0600(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bReclaimPending;                                          // 0x0608(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0609(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReclaim;                                                // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bShouldModifyVisibilityChecks;                            // 0x0620(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0621(0x0003) MISSED OFFSET
	float                                              VisibilityDistance;                                       // 0x0624(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShowOnHud;                                               // 0x0628(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0629(0x0007) MISSED OFFSET
	class UObject*                                     WidgetIcon;                                               // 0x0630(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x28];                                      // 0x0638(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSProjectile.MinimapDisplayWidget
	unsigned char                                      UnknownData15[0x28];                                      // 0x0660(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSProjectile.FullmapDisplayWidget
	unsigned char                                      UnknownData16[0x28];                                      // 0x0688(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSProjectile.OverlayDisplayWidget
	EProjectileVisibilityType                          WidgetIconAudience;                                       // 0x06B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x06B1(0x0003) MISSED OFFSET
	int                                                OriginalOwnerId;                                          // 0x06B4(0x0004) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile");
		return ptr;
	}


	void UpdateSpinRotation(float* DeltaSeconds);
	void TriggerExplosionFromHitResult(struct FHitResult* HitResult, EProjectileExplosionType* ExplosionType);
	void TriggerExplosion(struct FProjectileExplosionInfo* ExplosionInfo);
	void SpawnSpang(struct FHitResult* Hit);
	void SimulateExplosion();
	bool ShouldBounceOff(struct FHitResult* HitResult);
	void SetWeaponAsset(class UKSWeaponAsset** InAsset);
	void SetHorizontalThrowSpeed(float* InSpeed);
	void SetDamageOverrideWeaponAsset(class UKSWeaponAsset** InWeaponAsset);
	void ServerProcessPredictedHits(TArray<struct FLaggedProjectileHit>* PredictedHits);
	void RecordPredictedHits(EProjectilePredictionType* PredictionType, TArray<struct FHitResult>* HitResults);
	void RecordPredictedHit(struct FHitResult* HitResult, EProjectilePredictionType* PredictionType);
	void PlayFizzle(struct FProjectileExplosionInfo* ExplosionInfo);
	void PlayExplosion(struct FProjectileExplosionInfo* ExplosionInfo);
	void OnRep_WeaponAsset();
	void OnRep_StoppingHit();
	void OnRep_ProjectileHit();
	void OnRep_CurrentHealth();
	bool OnProjectileStopped(struct FHitResult* HitResult);
	bool OnProjectileBounced(struct FHitResult* HitResult, struct FVector* ImpactVelocity);
	void OnKilled(class AController** EventInstigator);
	void NativeOnProjectileStopped(struct FHitResult* HitResult);
	void NativeOnProjectileBounced(struct FHitResult* HitResult, struct FVector* ImpactVelocity);
	float ModifyDamageDealt(float* DamageAmount, struct FDamageEvent* DamageEvent, class AController** EventInstigator, class AActor** DamageCauser, class AActor** DamagedActor);
	bool IsActive();
	class UKSWeaponAsset* GetWeaponAsset();
	struct FRotator GetSpawnRotation();
	struct FVector GetSpawnLocation();
	class AKSWeapon* GetSpawningWeapon();
	class USceneComponent* GetProjectileUpdatedComponent();
	void GetOutlineableMeshes(TArray<class UPrimitiveComponent*>* OutMeshes);
	class UProjectileMovementComponent* GetMovementComponent();
	float GetHorizontalThrowSpeed();
	class UKSWeaponAsset* GetDamageWeaponAsset();
	class AController* GetDamageInstigator();
	float GetDamageFalloffRangeScaler();
	class USceneComponent* GetComponentToRotate();
	class UKSProjectileClusterComponent* GetClusterComponent();
	void DoRadialDamageDefault();
	void Deactivate();
	void CreateClusterSegmentsFromStoppingHit();
	float ComponentTakeDamage(class UPrimitiveComponent** HitComponent, float* DamageAmount);
	void BroadcastExplosion(struct FProjectileExplosionInfo* ExplosionInfo);
	bool AffectsActor(class AActor** InActor);
};


// Class Killstreak.KSProjectile_Grenade
// 0x0098 (0x0750 - 0x06B8)
class AKSProjectile_Grenade : public AKSProjectile
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x06B8(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x06B8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSProjectile_Grenade.OverlayWarningDisplayWidget
	struct FScriptMulticastDelegate                    OnGrenadeProximity;                                       // 0x06F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bTakeOverOnStopped;                                       // 0x0700(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0701(0x0003) MISSED OFFSET
	float                                              FuseTimeRemaining;                                        // 0x0704(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0708(0x0008) MISSED OFFSET
	struct FTimerHandle                                FuseTimerHandle;                                          // 0x0710(0x0008) (Edit)
	struct FTimerHandle                                FuseCookPauseTimerHandle;                                 // 0x0718(0x0008) (Edit)
	bool                                               bSetFuseOnBounce;                                         // 0x0720(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0721(0x0003) MISSED OFFSET
	float                                              BounceFuseTime;                                           // 0x0724(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSetFuseOnStopped;                                        // 0x0728(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0729(0x0003) MISSED OFFSET
	float                                              StoppedFuseTime;                                          // 0x072C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bExplodesOnStopped;                                       // 0x0730(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0731(0x0007) MISSED OFFSET
	class USphereComponent*                            DetectionSphere;                                          // 0x0738(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0740(0x0001) MISSED OFFSET
	bool                                               bGeneratesTouchSenseEvents;                               // 0x0741(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x0742(0x0006) MISSED OFFSET
	class UKSItemStimuliSourceComponent*               _StimuliSourceComponent;                                  // 0x0748(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_Grenade");
		return ptr;
	}


	void UnregisterTouchEvent(class AKSCharacter** KSCharacter);
	bool ShouldExplodeOnBounce(struct FHitResult* HitResult, struct FVector* ImpactVelocity);
	void SetFuseTime(float* InFuseTime);
	void RegisterTouchEvent(class AKSCharacter** KSCharacter);
	void OnRep_FuseTimeRemaining();
	void OnOverlapEnd(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
	void OnOverlapBegin(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void OnLocalViewTargetChanged(class AKSPlayerController** InController, class AActor** OldViewTarget, class AActor** NewViewTarget);
	bool IsInProximityOfLocalCharacter();
	void FuseTimeExpired();
	bool CanSeeProximityWarning(class AController** QueriedPlayer);
};


// Class Killstreak.KSSpreadProjectile
// 0x0040 (0x03A0 - 0x0360)
class AKSSpreadProjectile : public AKSLagCompensatedActor
{
public:
	class USceneComponent*                             CollisionComponent;                                       // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UProjectileMovementComponent*                _ProjectileMovementComponent;                             // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0370(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSpreadProjectile");
		return ptr;
	}


	bool OnProjectileStopped(struct FHitResult* HitResult);
	bool OnProjectileBounced(struct FHitResult* HitResult, struct FVector* ImpactVelocity);
	void NativeOnProjectileStopped(struct FHitResult* HitResult);
	void NativeOnProjectileBounced(struct FHitResult* HitResult, struct FVector* ImpactVelocity);
};


// Class Killstreak.KSGrenadeSpreadRule
// 0x0000 (0x0028 - 0x0028)
class UKSGrenadeSpreadRule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGrenadeSpreadRule");
		return ptr;
	}


	TArray<struct FTransform> GetSpread(class UWorld** World, struct FTransform* Transform, float* Radius, float* NormalZMin);
};


// Class Killstreak.KSSpikeBallSpreadRule
// 0x0000 (0x0028 - 0x0028)
class UKSSpikeBallSpreadRule : public UKSGrenadeSpreadRule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSpikeBallSpreadRule");
		return ptr;
	}

};


// Class Killstreak.KSGroundSpreadRule
// 0x0010 (0x0038 - 0x0028)
class UKSGroundSpreadRule : public UKSGrenadeSpreadRule
{
public:
	TArray<struct FVector>                             GroundSpreadVectors;                                      // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSGroundSpreadRule");
		return ptr;
	}

};


// Class Killstreak.KSClusterSpreadRule
// 0x0000 (0x0028 - 0x0028)
class UKSClusterSpreadRule : public UKSGrenadeSpreadRule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSClusterSpreadRule");
		return ptr;
	}

};


// Class Killstreak.KSProjectile_GrenadeSpread
// 0x0290 (0x09E0 - 0x0750)
class AKSProjectile_GrenadeSpread : public AKSProjectile_Grenade
{
public:
	float                                              TimeToStartSpread;                                        // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TickSpreadFrequency;                                      // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                TickSpreadTimerHandle;                                    // 0x0758(0x0008)
	class UClass*                                      SpreadRuleClass;                                          // 0x0760(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NormalZMin;                                               // 0x0768(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x076C(0x0004) MISSED OFFSET
	struct FKSSpreadList                               _SpreadList;                                              // 0x0770(0x00C8) (Net)
	float                                              MaxSpreadDistance;                                        // 0x0838(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PreventCollisionBeneathSpread;                            // 0x083C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x083D(0x0003) MISSED OFFSET
	struct FTimerHandle                                SpreadTimerHandle;                                        // 0x0840(0x0008)
	TArray<struct FTransform>                          QueuedTransforms;                                         // 0x0848(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             SpreadStartLocations;                                     // 0x0858(0x0010) (ZeroConstructor)
	int                                                SpreadProjectileCount;                                    // 0x0868(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x086C(0x0004) MISSED OFFSET
	TArray<class AKSSpreadProjectile*>                 SpreadProjectiles;                                        // 0x0870(0x0010) (ZeroConstructor)
	class UClass*                                      SpreadProjectileToSpawn;                                  // 0x0880(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpreadProjectileRotationMin;                              // 0x0888(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpreadProjectileRotationMax;                              // 0x088C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthPerTransform;                                    // 0x0890(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SphereCollisionRadius;                                    // 0x0894(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bExtinguishable;                                          // 0x0898(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0899(0x0007) MISSED OFFSET
	class UClass*                                      OverlapClassFilter;                                       // 0x08A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              OverlapObjectTypes;                                       // 0x08A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x10];                                      // 0x08B8(0x0010) MISSED OFFSET
	float                                              LingerDuration;                                           // 0x08C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x08CC(0x0004) MISSED OFFSET
	TArray<class AActor*>                              AffectedActors;                                           // 0x08D0(0x0010) (ZeroConstructor)
	TMap<class AActor*, struct FTimerHandle>           LingeringAffectedActors;                                  // 0x08E0(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0930(0x0004) MISSED OFFSET
	float                                              TickDamageAmount;                                         // 0x0934(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TickDamageClass;                                          // 0x0938(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TickDamageFrequency;                                      // 0x0940(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x0944(0x000C) MISSED OFFSET
	class UKSNavModifierComponent*                     _KSNavModifierComponent;                                  // 0x0950(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UParticleSystemComponent*>            ParticleSystemComponents;                                 // 0x0958(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UMeshComponent*>                      MeshComponents;                                           // 0x0968(0x0010) (ExportObject, ZeroConstructor)
	class UParticleSystem*                             ParticleSystemTemplate;                                   // 0x0978(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreDeactivateTime;                                        // 0x0980(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParticleOcclusionRadius;                                  // 0x0984(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UObject*                                     MeshAsset;                                                // 0x0988(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshOutlineThickness;                                     // 0x0990(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0994(0x0004) MISSED OFFSET
	class UClass*                                      SkeletalAnimClass;                                        // 0x0998(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  MeshTransform;                                            // 0x09A0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x10];                                      // 0x09D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_GrenadeSpread");
		return ptr;
	}


	void ProcessNextSpreadTransform();
	void OnSpreadTransformRemoved(struct FTransform* RemovedTransform);
	void OnSpreadTransformAdded(struct FTransform* AddedTransform);
	void OnSpreadTick();
	void OnSpreadProjectileStopped(struct FHitResult* HitResult);
	void OnLingerEnd(class AActor** LingerActor);
	void OnDamageTick();
	void OnBeginLingering();
	void OnAllSpreadTransformsRemoved();
	void OnAffectedDestroyed(class AActor** AffectedActor);
	void OnActorUnaffected(class AActor** UnaffectedActor);
	void OnActorDamaged(class AActor** DamagedActor, float* Amount);
	void OnActorAffected(class AActor** AffectedActor);
	void ConfigureSpreadTransformParticleSystem(class UParticleSystemComponent** ParticleSystem);
	void CleanupParticleSystemComponents();
	void CleanupMeshComponents();
	void BeginLingering();
};


// Class Killstreak.KSProjectile_Melee
// 0x0018 (0x06D0 - 0x06B8)
class AKSProjectile_Melee : public AKSProjectile
{
public:
	class UClass*                                      ProjectileDamageType;                                     // 0x06B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AActor*>                              HitActors;                                                // 0x06C0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_Melee");
		return ptr;
	}


	void PredictDamage(float* DeltaTime);
	void LookAheadHit(class AActor** HitActor, struct FHitResult* HitResult);
	void FlushHitIgnoreActors();
	void AllowFutureHitOnActor(class AActor** PreviouslyHitActor);
};


// Class Killstreak.KSProjectile_Pierce
// 0x0038 (0x06F0 - 0x06B8)
class AKSProjectile_Pierce : public AKSProjectile
{
public:
	float                                              ProjectileEdgeTolerance;                                  // 0x06B8(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ETraceTypeQuery>                       TraceChannel;                                             // 0x06BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x06BD(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypes;                                              // 0x06C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bDrawDebugLine;                                           // 0x06D0(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x06D1(0x0007) MISSED OFFSET
	TArray<class AActor*>                              AlreadyHitActors;                                         // 0x06D8(0x0010) (ZeroConstructor)
	bool                                               bHasHitWall;                                              // 0x06E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bHasHitEnemy;                                             // 0x06E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x06EA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_Pierce");
		return ptr;
	}

};


// Class Killstreak.KSProjectile_ProximityGrenade
// 0x0018 (0x0768 - 0x0750)
class AKSProjectile_ProximityGrenade : public AKSProjectile_Grenade
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0750(0x0008) MISSED OFFSET
	class UKSProximityComponent*                       _ProximityComponent;                                      // 0x0758(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bInitializeProximityCheckingOnStopped;                    // 0x0760(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0761(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_ProximityGrenade");
		return ptr;
	}


	void ProximityActorUpdated(class AActor** Actor, class UPrimitiveComponent** Component, struct FKSActorProximityInfo* ProximityInfo);
	struct FVector GetProximityTraceRelativeLocation();
	class UPrimitiveComponent* GetProximityComponent();
};


// Class Killstreak.KSProjectile_RemoteTrigger
// 0x0048 (0x0798 - 0x0750)
class AKSProjectile_RemoteTrigger : public AKSProjectile_Grenade
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0750(0x0018) MISSED OFFSET
	bool                                               CanDetonateNow;                                           // 0x0768(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bCanDetonateBeforeStopping;                               // 0x0769(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x076A(0x0006) MISSED OFFSET
	class UKSPlayerMod*                                DetectionMod;                                             // 0x0770(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0778(0x0008) MISSED OFFSET
	bool                                               bRequiresMatchingDetonator;                               // 0x0780(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0781(0x0003) MISSED OFFSET
	struct FVector                                     RelativeInteractionPoint;                                 // 0x0784(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0790(0x0001) MISSED OFFSET
	bool                                               DetectedEnemy;                                            // 0x0791(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x0792(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_RemoteTrigger");
		return ptr;
	}


	void ReportOwningClientLoaded();
	void OnRealActorStopped(class AKSProjectile_RemoteTrigger** RealProjectile);
	bool IsDetonatable();
};


// Class Killstreak.KSProjectile_ReviveDart
// 0x0038 (0x06F0 - 0x06B8)
class AKSProjectile_ReviveDart : public AKSProjectile
{
public:
	TWeakObjectPtr<class AKSCharacter>                 TargetCharacter;                                          // 0x06B8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ReviveTime;                                               // 0x06C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06C4(0x0004) MISSED OFFSET
	class UKSPlayerMod*                                TargetCharacterMod;                                       // 0x06C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSucceed;                                                // 0x06D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFailed;                                                 // 0x06E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_ReviveDart");
		return ptr;
	}


	void OnReviveEnd(class AKSCharacter** RevivingCharacter, bool* SuccessfulRevive);
};


// Class Killstreak.KSProjectile_ZiplineAnchor
// 0x0030 (0x06E8 - 0x06B8)
class AKSProjectile_ZiplineAnchor : public AKSProjectile
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x06B8(0x0020) MISSED OFFSET
	struct FVector                                     ProjectileTarget;                                         // 0x06D8(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x06E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectile_ZiplineAnchor");
		return ptr;
	}

};


// Class Killstreak.KSProjectileClusterComponent
// 0x0050 (0x0148 - 0x00F8)
class UKSProjectileClusterComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x00F8(0x000C) MISSED OFFSET
	float                                              ClusterSegmentSpawnOffset;                                // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomMinPitch;                                           // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomMaxPitch;                                           // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomMinYaw;                                             // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomMaxYaw;                                             // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FKSProjectileClusterSegment>         ClusterSegmentDefinitions;                                // 0x0118(0x0010) (Edit, ZeroConstructor)
	TArray<class AKSProjectile*>                       ClusterSegments;                                          // 0x0128(0x0010) (ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnOwnedSegmentKilled;                                     // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectileClusterComponent");
		return ptr;
	}


	void OnSegmentKilled(class AKSProjectile** Segment);
	TArray<class AKSProjectile*> GetSpawnedSegments();
	struct FTransform GetClusterTransform(struct FHitResult* Hit, struct FVector* PassThroughVector);
	void CreateClusterSegments(struct FHitResult* Hit, class AKSWeapon** WeaponUsed);
};


// Class Killstreak.KSProjectileMovementComponent
// 0x0000 (0x0200 - 0x0200)
class UKSProjectileMovementComponent : public UProjectileMovementComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjectileMovementComponent");
		return ptr;
	}

};


// Class Killstreak.KSProjWeaponTargetingModule
// 0x0020 (0x00D8 - 0x00B8)
class UKSProjWeaponTargetingModule : public UKSDefaultAimTargetingModule
{
public:
	float                                              ProjectileSimFrequency;                                   // 0x00B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSimTime;                                               // 0x00BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x00C0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProjWeaponTargetingModule");
		return ptr;
	}

};


// Class Killstreak.KSProximityComponent
// 0x00A8 (0x01A0 - 0x00F8)
class UKSProximityComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnProximityInfoUpdated;                                   // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSProximityFilter                          _ProximityFilter;                                         // 0x0108(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              MaxTimeBetweenUpdates;                                    // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	TMap<class AActor*, struct FKSActorProximityInfo>  ActorProximityInfoMap;                                    // 0x0130(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0180(0x0010) MISSED OFFSET
	class UPrimitiveComponent*                         RegisteredShape;                                          // 0x0190(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               bProximityCheckingEnabled;                                // 0x0198(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0199(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSProximityComponent");
		return ptr;
	}


	void UnregisterOverlapShape(class UPrimitiveComponent** OverlapShape);
	bool ShouldTrackActor(class AActor** InActor);
	void SetProximityTraceOffset(struct FVector* Offset);
	void SetProximityCheckingEnabled(bool* Enabled);
	void RegisterOverlapShape(class UPrimitiveComponent** OverlapShape);
	void ProximityOverlapStart(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex, bool* bFromSweep, struct FHitResult* SweepResult);
	void ProximityOverlapEnd(class UPrimitiveComponent** OverlappedComp, class AActor** OtherActor, class UPrimitiveComponent** OtherComp, int* OtherBodyIndex);
};


// Class Killstreak.KSRemoteReviverInterface
// 0x0000 (0x0028 - 0x0028)
class UKSRemoteReviverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRemoteReviverInterface");
		return ptr;
	}

};


// Class Killstreak.KsReverbVolume
// 0x0000 (0x03A0 - 0x03A0)
class AKsReverbVolume : public AAkReverbVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KsReverbVolume");
		return ptr;
	}

};


// Class Killstreak.KSReverseTracker
// 0x0010 (0x00A0 - 0x0090)
class UKSReverseTracker : public UKSAccoladeTracker
{
public:
	TArray<struct FPlayerDamageInfo>                   _PlayerDamageInfo;                                        // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSReverseTracker");
		return ptr;
	}


	void StoreDamageTakenEvent(struct FAdvancedCombatEvent* DamageEvent);
	void HandleTrackerAccolade(class AKSPlayerState** PlayerState);
	bool CheckVictimDamageInstigator(class AKSPlayerState** Instigator, class AKSPlayerState** Victim, struct FPlayerDamageInfo* OutPlayerInfo);
};


// Class Killstreak.KSRewardsCalculator
// 0x0000 (0x0028 - 0x0028)
class UKSRewardsCalculator : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRewardsCalculator");
		return ptr;
	}


	void GetStatsOrdering(TArray<EPlayerStatType>* StatsOrdering);
	bool GetRewardsFromStat(struct FPlayerMatchStatInfo* PlayerStatInfo, float* OutExpRewardValue);
	void CalcPlayerRewards(int* PlayerTeamNum, class UKSPlayerMatchStats** playerStats, class AKSPlayerController** PlayerController, struct FPlayerRewardsSummary* Rewards);
};


// Class Killstreak.KSSpectatorPawn
// 0x0000 (0x03B8 - 0x03B8)
class AKSSpectatorPawn : public ASpectatorPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSpectatorPawn");
		return ptr;
	}


	void GamepadLookUp(float* Value);
	void GamepadLookRight(float* Value);
};


// Class Killstreak.KSRideAlongSpectatorPawn
// 0x0000 (0x03B8 - 0x03B8)
class AKSRideAlongSpectatorPawn : public AKSSpectatorPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRideAlongSpectatorPawn");
		return ptr;
	}

};


// Class Killstreak.KSRocket
// 0x0070 (0x07C0 - 0x0750)
class AKSRocket : public ACharacter
{
public:
	float                                              RocketRotationCatchUpRadians;                             // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraInitialLockoutTime;                                 // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0758(0x0008) MISSED OFFSET
	class USpringArmComponent*                         _SpringArm;                                               // 0x0760(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            MainCamera;                                               // 0x0768(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSWeaponAsset*                              ExplodeWeaponAsset;                                       // 0x0770(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlightDuration;                                           // 0x0778(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x077C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFlightDurationTimerTick;                                // 0x0780(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFlightDurationTimerActive;                              // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFlightDurationTimerComplete;                            // 0x07A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UKSTimerComponent*                           FlightDurationTimer;                                      // 0x07B0(0x0008) (Edit, ExportObject, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x07B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRocket");
		return ptr;
	}


	void OnRep_FlightDurationTimer();
	void OnIgnitionKickoff();
	void NativeOnProjectileStopped(struct FHitResult* HitResult);
	void NativeOnIgnitionKickoff();
	void NativeDetonate(struct FProjectileExplosionInfo* ExplosionInfo);
	class UKSWeaponAsset* GetWeaponAsset();
	float GetFlightDuration();
	void GamepadLookUp(float* Value);
	void GamepadLookRight(float* Value);
	void FlightDurationTimerTick(float* Seconds);
	void FlightDurationTimerComplete();
	void FlightDurationTimerActive(bool* bActive);
	void EnableCameraControl();
	void Detonate(struct FProjectileExplosionInfo* ExplosionInfo);
	void BroadcastDetonate(struct FProjectileExplosionInfo* ExplosionInfo);
};


// Class Killstreak.KSRocketMovementComponent
// 0x0040 (0x0780 - 0x0740)
class UKSRocketMovementComponent : public UCharacterMovementComponent
{
public:
	float                                              MaxSpeed;                                                 // 0x0740(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RocketAcceleration;                                       // 0x0744(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RocketIgniteTime;                                         // 0x0748(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RocketRotationCatchUpDegrees;                             // 0x074C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSmoothRotation;                                          // 0x0750(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0751(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnIgnitionKickoff;                                        // 0x0758(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRocketStop;                                             // 0x0768(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0778(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRocketMovementComponent");
		return ptr;
	}


	void StopSimulating(struct FHitResult* HitResult);
	void OnRocketStopDelegate__DelegateSignature(struct FHitResult* ImpactResult);
	void OnIgnitionKickoffDelegate__DelegateSignature();
};


// Class Killstreak.KSRoundBasedObject
// 0x0010 (0x0340 - 0x0330)
class AKSRoundBasedObject : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0330(0x0008) MISSED OFFSET
	int                                                SideNum;                                                  // 0x0338(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	ELocalRequirements                                 SkyDiverRelevanceRules;                                   // 0x033C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	ELimitPerRound                                     SkyDiverLimit;                                            // 0x033D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x033E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRoundBasedObject");
		return ptr;
	}


	void ReceiveGameSetup();
	void OnSkyDiveStarted(class AKSCharacter** SkyDiver);
	void OnSkyDiveSkipped(class AKSCharacter** SkyDiver);
	void OnSkyDiveEnded(class AKSCharacter** SkyDiver);
	void OnRoundStarted(struct FRoundInitState* RoundInitState);
	void OnRoundEnded(class AKSGameState** GameState, struct FRoundResult* RoundResult);
	void OnGameSetup();
	bool IsSkyDivingActive();
	bool CheckPlayerForMatchingTeam(class APlayerController** PC);
	bool CheckLocalPlayerForMatchingTeam();
	bool CheckCharacterForMatchingTeam(class AKSCharacter** Character);
};


// Class Killstreak.KSRoundedSquareDeadZoneFilter
// 0x0008 (0x0038 - 0x0030)
class UKSRoundedSquareDeadZoneFilter : public UKSAnalogStickFilter
{
public:
	float                                              CardinalSize;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	float                                              CornerRadius;                                             // 0x0034(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRoundedSquareDeadZoneFilter");
		return ptr;
	}

};


// Class Killstreak.KSRoyaleSafeZone
// 0x0050 (0x0380 - 0x0330)
class AKSRoyaleSafeZone : public AActor
{
public:
	class UBoxComponent*                               ValidityZone;                                             // 0x0330(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UKSWeaponAsset*                              ZoneDamageAsset;                                          // 0x0338(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StartingRadius;                                           // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FSafeZoneParams                             OldParams;                                                // 0x0344(0x0010) (Net, Transient)
	struct FSafeZoneParams                             NewParams;                                                // 0x0354(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	float                                              ZoneLerpVelocity;                                         // 0x0364(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ZoneLerpAlpha;                                            // 0x0368(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     CurrentCenter;                                            // 0x036C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentRadius;                                            // 0x0378(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ZoneActive;                                               // 0x037C(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsShrinking;                                              // 0x037D(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x037E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSRoyaleSafeZone");
		return ptr;
	}


	bool TryToDamage(class AActor** TargetActor, float* AttemptedDamage);
	void StartShrink();
	void SetNewZoneParams(float* NewRadius, float* TimeToChange, class AActor** MustContainActor, float* MustContainSafeRadius);
	void OnZoneActivated();
	void OnRep_ZoneActive();
	void OnRep_NewParams();
	void OnCircleUpdate(float* NewRadius, struct FVector* NewLocation);
	bool IsZoneActive();
};


// Class Killstreak.KSSafeZone
// 0x0028 (0x0368 - 0x0340)
class AKSSafeZone : public AKSOutOfBoundsZone
{
public:
	int                                                SideNum;                                                  // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	TArray<class AKSCharacter*>                        RevealedCharacters;                                       // 0x0348(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0358(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSafeZone");
		return ptr;
	}


	void RevealOverlappedCharacter(class AKSCharacter** Character);
};


// Class Killstreak.KSSceneComponentPoolStatics
// 0x0000 (0x0028 - 0x0028)
class UKSSceneComponentPoolStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSceneComponentPoolStatics");
		return ptr;
	}


	class UTracerParticleSystemComponent* STATIC_SpawnTracerEmitterWithRotation(class UObject** WorldContextObject, class UParticleSystem** EmitterTemplate, struct FVector* start, struct FVector* end, bool* DeactivatesOnDestinationReached, float* TravelSpeed, struct FRotator* Rotation);
	class UTracerParticleSystemComponent* STATIC_SpawnTracerEmitter(class UObject** WorldContextObject, class UParticleSystem** EmitterTemplate, struct FVector* start, struct FVector* end, bool* DeactivatesOnDestinationReached, float* TravelSpeed);
	class UTracerStaticMeshComponent* STATIC_SpawnMeshTracerWithRotation(class UObject** WorldContextObject, class UStaticMesh** StaticMesh, struct FVector* start, struct FVector* end, class AActor** Instigator, class UMaterial** FriendlyMaterial, class UMaterialInstance** EnemyMaterial, float* TravelSpeed, struct FRotator* Rotation);
	class UTracerStaticMeshComponent* STATIC_SpawnMeshTracer(class UObject** WorldContextObject, class UStaticMesh** StaticMesh, struct FVector* start, struct FVector* end, class AActor** Instigator, class UMaterial** FriendlyMaterial, class UMaterialInstance** EnemyMaterial, float* TravelSpeed);
	class UAkComponent* STATIC_SpawnAkComponentAtLocation(class UObject** WorldContextObject, class UAkAudioEvent** AkEvent, class UAkAuxBus** EarlyReflectionsBus, struct FVector* Location, struct FRotator* Orientation, struct FString* EventName, struct FString* EarlyReflectionsBusName, EOcclusionType* OcclusionType, bool* UseDistance, bool* UseDirection);
	bool STATIC_SetSwitchOnNextAkComponentInPool(class UObject** WorldContextObject, struct FName* SwitchGroup, struct FName* SwitchState);
	bool STATIC_SetRTPCValueOnNextAkComponentInPool(class UObject** WorldContextObject, struct FName* RTPC, float* Value, int* InterpolationTimeMs);
};


// Class Killstreak.KSShield
// 0x0030 (0x0360 - 0x0330)
class AKSShield : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnShieldDamagedDel;                                       // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0340(0x0018) MISSED OFFSET
	bool                                               bShieldEnabled;                                           // 0x0358(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x035C(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSShield");
		return ptr;
	}


	void SetShieldEnabled(bool* ShieldEnabled);
	void OnRep_ShieldEnabled();
	void OnRep_Health();
};


// Class Killstreak.KSShopRuleComponent
// 0x00B0 (0x01A8 - 0x00F8)
class UKSShopRuleComponent : public UKSGameRuleComponent
{
public:
	int                                                StartingCash;                                             // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bResetShopsOnTeamSidesFlipped;                            // 0x00FC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	class UClass*                                      ShopClass;                                                // 0x0100(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<int64_t, class AKSPlayerShop*>                PlayerShops;                                              // 0x0108(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0158(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSShopRuleComponent");
		return ptr;
	}


	class AKSPlayerShop* GetShopForPlayer(class AKSPlayerState** InPlayerState);
};


// Class Killstreak.KSSkinBundle
// 0x0030 (0x0198 - 0x0168)
class UKSSkinBundle : public UKSItemBundle
{
public:
	bool                                               StarterSkin;                                              // 0x0168(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0169(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x0169(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSkinBundle.SkinFlatImage

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSkinBundle");
		return ptr;
	}


	bool IsStarterSkin();
	void GetSkinImage();
};


// Class Killstreak.KSSkyDiveListener
// 0x0000 (0x0028 - 0x0028)
class UKSSkyDiveListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSkyDiveListener");
		return ptr;
	}

};


// Class Killstreak.KSSmoothingComponent
// 0x0030 (0x02A0 - 0x0270)
class UKSSmoothingComponent : public USceneComponent
{
public:
	bool                                               bSmoothTranslation;                                       // 0x0270(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSmoothRotation;                                          // 0x0271(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0272(0x0002) MISSED OFFSET
	struct FVector                                     TranslationOffset;                                        // 0x0274(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FQuat                                       RotationOffset;                                           // 0x0280(0x0010) (Transient, IsPlainOldData)
	class AKSCharacter*                                CharacterOwner;                                           // 0x0290(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0298(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSmoothingComponent");
		return ptr;
	}

};


// Class Killstreak.KSSpecialty
// 0x0188 (0x02E0 - 0x0158)
class UKSSpecialty : public UKSItem
{
public:
	int                                                RequiredUnlockLevel;                                      // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x015C(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSpecialty.DynamicPoseImage
	unsigned char                                      UnknownData02[0x28];                                      // 0x0188(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSpecialty.BannerIcon
	unsigned char                                      UnknownData03[0x28];                                      // 0x01B0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSpecialty.LeftBannerIcon
	unsigned char                                      UnknownData04[0x28];                                      // 0x01D8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSpecialty.RightBannerIcon
	unsigned char                                      UnknownData05[0x28];                                      // 0x0200(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSpecialty.SmallIcon
	unsigned char                                      UnknownData06[0x10];                                      // 0x0228(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSSpecialty.AvailableKillstreaks
	unsigned char                                      UnknownData07[0x10];                                      // 0x0238(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSSpecialty.AvailableAbilities
	unsigned char                                      UnknownData08[0x10];                                      // 0x0248(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSSpecialty.AvailableGadgets
	unsigned char                                      UnknownData09[0x10];                                      // 0x0258(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSSpecialty.AvailablePistols
	unsigned char                                      UnknownData10[0x10];                                      // 0x0268(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSSpecialty.AvailableWeaponAttachments
	ESpecialtyRoleType                                 _RoleType;                                                // 0x0278(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0279(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData12[0x10];                                      // 0x0279(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSSpecialty.AutoEquippedMods
	unsigned char                                      UnknownData13[0x28];                                      // 0x0290(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSpecialty.PerkSlotOneCategory
	unsigned char                                      UnknownData14[0x28];                                      // 0x02B8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSSpecialty.PerkSlotTwoCategory

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSpecialty");
		return ptr;
	}


	class UTexture2D* GetDynamicPoseImage(bool* bAllowSyncLoad);
};


// Class Killstreak.KSSpringArmComponent
// 0x0050 (0x0350 - 0x0300)
class UKSSpringArmComponent : public USpringArmComponent
{
public:
	bool                                               bEnableSmoothLengthReturn;                                // 0x0300(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0301(0x0003) MISSED OFFSET
	float                                              SmoothLengthReturnSpeed;                                  // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 SmoothingCurve;                                           // 0x0308(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                OffsetCurve;                                              // 0x0310(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRelativeTargetOffset;                                    // 0x0318(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0319(0x0007) MISSED OFFSET
	class AKSCharacter*                                CharacterOwner;                                           // 0x0320(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0328(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSpringArmComponent");
		return ptr;
	}

};


// Class Killstreak.KSSprintCameraShake
// 0x0000 (0x0180 - 0x0180)
class UKSSprintCameraShake : public UKSVelocityCameraShake
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSprintCameraShake");
		return ptr;
	}


	void StopShakeOnStopSprint(bool* NewSprint);
};


// Class Killstreak.KSPlayerMatchStats
// 0x0050 (0x0078 - 0x0028)
class UKSPlayerMatchStats : public UObject
{
public:
	TMap<EPlayerStatType, struct FPlayerMatchStatInfo> StatsByType;                                              // 0x0028(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSPlayerMatchStats");
		return ptr;
	}


	bool GetStat(EPlayerStatType* StatType, struct FPlayerMatchStatInfo* OutStat);
};


// Class Killstreak.KSStoreItem
// 0x0000 (0x00D0 - 0x00D0)
class UKSStoreItem : public UPUMG_StoreItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSStoreItem");
		return ptr;
	}

};


// Class Killstreak.KSStoreItemHelper
// 0x0000 (0x0188 - 0x0188)
class UKSStoreItemHelper : public UPUMG_StoreItemHelper
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSStoreItemHelper");
		return ptr;
	}


	bool HasPortalOffers();
};


// Class Killstreak.KSSwapHandlerProfile
// 0x0010 (0x0038 - 0x0028)
class UKSSwapHandlerProfile : public UObject
{
public:
	TArray<struct FEquipPointDefinition>               EquipPointDefinitions;                                    // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSwapHandlerProfile");
		return ptr;
	}

};


// Class Killstreak.KSSwimmingAnimInst
// 0x0000 (0x0F10 - 0x0F10)
class UKSSwimmingAnimInst : public UKSCharacterAnimInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSwimmingAnimInst");
		return ptr;
	}


	void SwimNotifyTransitionStateLock(bool* bShouldLock);
	void SwimNotifyTransitionEnd();
};


// Class Killstreak.KSSwimmingPhysicsVolume
// 0x0000 (0x0378 - 0x0378)
class AKSSwimmingPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSSwimmingPhysicsVolume");
		return ptr;
	}

};


// Class Killstreak.KSTabletAnimInstance
// 0x0030 (0x02C0 - 0x0290)
class UKSTabletAnimInstance : public UKSAnimInstance
{
public:
	bool                                               bIsClosed;                                                // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2F];                                      // 0x0291(0x002F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTabletAnimInstance");
		return ptr;
	}


	bool OpenTablet();
	void FullyOpened();
	void FullyClosed();
	bool CloseTablet();
	bool CheckFullyOpened();
	bool CheckFullyClosed();
};


// Class Killstreak.KSTabletMeshComponent
// 0x0000 (0x0DE0 - 0x0DE0)
class UKSTabletMeshComponent : public UKSSkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTabletMeshComponent");
		return ptr;
	}


	void OpenTablet();
	void OnOpenComplete();
	void OnCloseComplete();
	void CloseTablet();
};


// Class Killstreak.KSTeamCreator
// 0x0000 (0x0028 - 0x0028)
class UKSTeamCreator : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTeamCreator");
		return ptr;
	}

};


// Class Killstreak.KSTeamKillTracker
// 0x0018 (0x00A8 - 0x0090)
class UKSTeamKillTracker : public UKSAccoladeTracker
{
public:
	TArray<struct FPlayerTeamTracker>                  PlayerTeamKillTracker;                                    // 0x0090(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                TeamKillRequirement;                                      // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTeamKillTracker");
		return ptr;
	}


	void StoreCombatInfo(struct FCombatEventInfo* ElimEvent);
	bool HasEliminateVictim(struct FPlayerTeamTracker* PlayerTeamTracker, int* VictimPlayerId);
	bool ContainsPlayer(class AKSPlayerState** PlayerState, struct FPlayerTeamTracker* PlayerTeamTracker, int* TrackerIndex);
	bool CheckRequirements(struct FCombatEventInfo* ElimEvent);
};


// Class Killstreak.KSTeamState
// 0x0160 (0x0490 - 0x0330)
class AKSTeamState : public AInfo
{
public:
	int                                                r_TeamNum;                                                // 0x0330(0x0004) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bTeamEliminated;                                          // 0x0334(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bTeamEliminatedOrDowned;                                  // 0x0335(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0336(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTeamEliminated;                                         // 0x0338(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamEliminatedOrDowned;                                 // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamMemberEliminatedDel;                                // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamMemberDownedDel;                                    // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class AKSPlayerState*>                      AllMembers;                                               // 0x0378(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<class AKSPlayerState*>                      PlayerMembers;                                            // 0x0388(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0398(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMemberAdded;                                            // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMemberRemoved;                                          // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKSRespawnConfig                            _RespawnConfig;                                           // 0x03C8(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                Respawns;                                                 // 0x03D4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnRespawnsChangedDel;                                     // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                Score;                                                    // 0x03E8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                RoundWins;                                                // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                RoundLosses;                                              // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	EExtractionTeamType                                _TeamType;                                                // 0x03F4(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03F5(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPingAdded;                                              // 0x03F8(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnPingRemoved;                                            // 0x0408(0x0010) (ZeroConstructor, InstancedReference)
	class UClass*                                      JobSelectionClass;                                        // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSJobSelectionComponent*                    _JobSelectionComponent;                                   // 0x0420(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnJobSelectionComponentReady;                             // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x48];                                      // 0x0438(0x0048) MISSED OFFSET
	int                                                TotalKills;                                               // 0x0480(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                TotalDeaths;                                              // 0x0484(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                TotalAssists;                                             // 0x0488(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                SideNum;                                                  // 0x048C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTeamState");
		return ptr;
	}


	bool ShouldKeepTeamAlive();
	void ResetTeamElimination();
	void OnTeamUpdated();
	void OnTeamMemberRemoved(class AKSPlayerState** LostMember);
	void OnTeamMemberEliminated(class AKSPlayerState** Member);
	void OnTeamMemberDowned(class AKSPlayerState** Member);
	void OnTeamMemberAdded(class AKSPlayerState** NewMember);
	void OnRep_TeamEliminatedOrDowned();
	void OnRep_TeamEliminated();
	void OnRep_Respawns();
	void OnRep_JobSelectionComponent();
	void NewPingRequest(struct FPingInfo* PingInfo);
	void NewPingRemoveRequest(int* PingId, class AKSPlayerState** PingingPlayer);
	bool IsEliminated();
	bool IsDefending();
	bool IsAttacking();
	EExtractionTeamType GetTeamType();
	struct FKSRespawnConfig GetRespawnConfig();
	int GetPlayersRemaining(bool* DownAsDead);
	int GetNumberOfPlayers();
	int GetLivesRemaining(bool* CountDowned);
	TArray<class AKSPlayerState*> GetAllMembers();
	void EliminateTeam();
	bool AllPlayersEliminatedOrDowned();
};


// Class Killstreak.KSTeamState_Control
// 0x0008 (0x0498 - 0x0490)
class AKSTeamState_Control : public AKSTeamState
{
public:
	int                                                ControlScore;                                             // 0x0490(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0494(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTeamState_Control");
		return ptr;
	}

};


// Class Killstreak.KSThreatComponent
// 0x00E8 (0x01E0 - 0x00F8)
class UKSThreatComponent : public UActorComponent
{
public:
	float                                              ThreatRefreshPeriod;                                      // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentThreat;                                            // 0x00FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ThreatBucketValue;                                        // 0x0100(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0104(0x000C) MISSED OFFSET
	class UKSThreatComponent*                          OwningThreat;                                             // 0x0110(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UKSThreatComponent*>                  OwnedThreats;                                             // 0x0118(0x0010) (ExportObject, ZeroConstructor)
	class AKSCharacter*                                OwningCharacter;                                          // 0x0128(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AKSCharacter>                 LocalPlayerCharacter;                                     // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0138(0x0010) MISSED OFFSET
	float                                              SelfThreatValue;                                          // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AllyThreatValue;                                          // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultThreatValue;                                       // 0x0150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	TArray<float>                                      BucketValues;                                             // 0x0158(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bUseFocused;                                              // 0x0168(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	float                                              FocusedValue;                                             // 0x016C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FocusedWeight;                                            // 0x0170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FocusedInnerAngle;                                        // 0x0174(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0178(0x0004) MISSED OFFSET
	float                                              FocusedOuterAngle;                                        // 0x017C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0180(0x0004) MISSED OFFSET
	bool                                               bUseFocusTarget;                                          // 0x0184(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0185(0x0003) MISSED OFFSET
	float                                              FocusTargetValue;                                         // 0x0188(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FocusTargetWeight;                                        // 0x018C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FocusTargetInnerAngle;                                    // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0194(0x0004) MISSED OFFSET
	float                                              FocusTargetOuterAngle;                                    // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	bool                                               bUseProximity;                                            // 0x01A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x01A1(0x0003) MISSED OFFSET
	float                                              ProximityValue;                                           // 0x01A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ProximityWeight;                                          // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProximityInnerDistance;                                   // 0x01AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProximityOuterDistance;                                   // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseBehind;                                               // 0x01B4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x01B5(0x0003) MISSED OFFSET
	float                                              BehindValue;                                              // 0x01B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BehindWeight;                                             // 0x01BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BehindInnerAngle;                                         // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	float                                              BehindOuterAngle;                                         // 0x01C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x01CC(0x0004) MISSED OFFSET
	bool                                               bUseEffectiveRange;                                       // 0x01D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x01D1(0x0003) MISSED OFFSET
	float                                              EffectiveRangeValue;                                      // 0x01D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EffectiveRangeWeight;                                     // 0x01D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSThreatComponent");
		return ptr;
	}


	void DebugThreatLevels(bool* Show);
};


// Class Killstreak.KSTimerComponent
// 0x0098 (0x0190 - 0x00F8)
class UKSTimerComponent : public UActorComponent
{
public:
	struct FPGame_ReplicatedTimer                      _ReplicatedTimer;                                         // 0x00F8(0x0038) (Net)
	bool                                               bIsTimerActive;                                           // 0x0130(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5F];                                      // 0x0131(0x005F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSTimerComponent");
		return ptr;
	}


	void OnRep_Active();
	void BroadcastTimerComplete();
};


// Class Killstreak.KSUISessionManager
// 0x0008 (0x0030 - 0x0028)
class UKSUISessionManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSUISessionManager");
		return ptr;
	}

};


// Class Killstreak.KSVehicle
// 0x0380 (0x0720 - 0x03A0)
class AKSVehicle : public AWheeledVehicle
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A0(0x0010) MISSED OFFSET
	class UKSVehicleMovementComponent4W*               _KSVehicleMovementComponent;                              // 0x03B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	TArray<class UKSVehicleSeatComponent*>             Seats;                                                    // 0x03B8(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	TMap<class AKSCharacter*, class UKSVehicleSeatComponent*> RiderMap;                                                 // 0x03C8(0x0050) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnVehicleSeatingChanged;                                  // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FText                                       VehicleName;                                              // 0x0428(0x0018) (Edit, DisableEditOnInstance)
	float                                              TimeToGetIn;                                              // 0x0440(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSpeedToEnter;                                          // 0x0444(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAngleFromVehicleToInteract;                            // 0x0448(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwapToDriverSeatHoldTime;                                 // 0x044C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AKSCharacter*                                Driver;                                                   // 0x0450(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TArray<struct FKSRiderSeatPair>                    Riders;                                                   // 0x0458(0x0010) (Net, ZeroConstructor)
	TArray<class AKSCharacter*>                        Interacters;                                              // 0x0468(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0478(0x0001) MISSED OFFSET
	bool                                               PreventRiderSilhouette;                                   // 0x0479(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x047A(0x0002) MISSED OFFSET
	float                                              DetachedParachuteLinearDamping;                           // 0x047C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeUntilParachuteDestroyed;                              // 0x0480(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ParachuteDetachImpulse;                                   // 0x0484(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               ParachuteImpulseBoneNames;                                // 0x0490(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USkeletalMeshComponent*                      ParachuteMesh;                                            // 0x04A0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                                      // 0x04A8(0x0040) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnManualDetachmentAvailable;                              // 0x04E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnManualDetachmentUnavailable;                            // 0x04F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0508(0x0008) MISSED OFFSET
	TArray<struct FName>                               ValidInteractionTypes;                                    // 0x0510(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USpringArmComponent*                         _SpringArm;                                               // 0x0520(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            MainCamera;                                               // 0x0528(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x18];                                      // 0x0530(0x0018) MISSED OFFSET
	float                                              RiderCameraBlendTime;                                     // 0x0548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RiderCameraBlendExponent;                                 // 0x054C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraXTurnRate;                                          // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraYTurnRate;                                          // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraDeadZoneRate;                                       // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraMinHorizontalAngle;                                 // 0x055C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraMaxHorizontalAngle;                                 // 0x0560(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraMinVerticalAngle;                                   // 0x0564(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraMaxVerticalAngle;                                   // 0x0568(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FReplicatedViewInfo                         _ViewInfo;                                                // 0x056C(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	float                                              MaxHealth;                                                // 0x0574(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentHealth;                                            // 0x0578(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x057C(0x0004) MISSED OFFSET
	float                                              CurrentHealthStage;                                       // 0x0580(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0584(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVehicleHealthChanged;                                   // 0x0588(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               Destroyed;                                                // 0x0598(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0599(0x0003) MISSED OFFSET
	struct FVector                                     LocalImpulsePosition;                                     // 0x059C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStaticMeshComponent*                        DestroyedMesh;                                            // 0x05A8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UPrimitiveComponent*>                 DamageableComponents;                                     // 0x05B0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData09[0x8];                                       // 0x05C0(0x0008) MISSED OFFSET
	TMap<float, struct FKSVehicleDestructionStage>     HealthStages;                                             // 0x05C8(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<EDamageCategory, float>                       Vulnerabilities;                                          // 0x0618(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DamageImpulseMultiplier;                                  // 0x0668(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	class UKSWeaponAsset*                              DestructionDamageWeapon;                                  // 0x0670(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DestructionDamageTypeClass;                               // 0x0678(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x40];                                      // 0x0680(0x0040) MISSED OFFSET
	float                                              MinSpeedToDamageHitPlayer;                                // 0x06C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSpeedToDamageHitPlayer;                                // 0x06C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinPlayerDamageMultiplier;                                // 0x06C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPlayerDamageMultiplier;                                // 0x06CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerDamageCooldown;                                     // 0x06D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinSpeedForImpactDamage;                                  // 0x06D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSpeedForImpactDamage;                                  // 0x06D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinImpactDamage;                                          // 0x06DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxImpactDamage;                                          // 0x06E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VehicleDamageCooldown;                                    // 0x06E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinImpactAngleFromVehicleUp;                              // 0x06E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxImpactAngleFromVehicleUp;                              // 0x06EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinAngleToSlideCorrect;                                   // 0x06F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAngleToSlideCorrect;                                   // 0x06F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSlideCorrectionSpeed;                                  // 0x06F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0xC];                                       // 0x06FC(0x000C) MISSED OFFSET
	class UKSWeaponAsset*                              ImpactDamageWeapon;                                       // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ImpactDamageTypeClass;                                    // 0x0710(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCapsuleComponent*                           PlayerHitComponent;                                       // 0x0718(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSVehicle");
		return ptr;
	}


	void VehicleHit(class UPrimitiveComponent** HitComponent, class AActor** OtherActor, class UPrimitiveComponent** OtherComponent, struct FVector* NormalImpulse, struct FHitResult* Hit);
	void VehicleFeatureReleased();
	void VehicleFeaturePressed();
	void VehicleFeature(bool* Pressed);
	void UseReleased();
	void UsePressed();
	void TurnCameraY(float* Rate);
	void TurnCameraX(float* Rate);
	void SwapReleased();
	void SwapPressed();
	void StopParachute();
	void Steer(float* Value);
	void StartParachute();
	void ServerVehicleFeature(bool* Pressed);
	void ServerUpdateRotation(struct FReplicatedViewInfo* NewViewInfo);
	void ServerHorn(bool* Pressed);
	void ServerGetOut(class AKSCharacter** Rider);
	void ServerGetInNextEmptySeat(class AKSCharacter** Rider);
	void ServerAirSpeed(float* Value);
	void RiderDestroyed(class AActor** DestroyedActor);
	void ResetVehicle(struct FRoundInitState* RoundInitState);
	void ResetInput();
	void ResetCameraRotations();
	void PlayHealthStageChange(struct FKSVehicleDestructionStage* Stage);
	void OnRep_Riders();
	void OnRep_Driver();
	void OnRep_Destroyed();
	void OnRep_CurrentHealthStage();
	void OnRep_CurrentHealth();
	void MoveForward(float* Value);
	void HornReleased();
	void HornPressed();
	void Horn(bool* Pressed);
	void HideParachute();
	bool GetInHighestPriorityEmptySeat(class AKSCharacter** Rider);
	class AKSCharacter* GetDriver();
	void Explode();
	void ExitPressed();
	void Deteriorate();
	void BroadcastVehicleFeature(bool* Pressed);
	void BroadcastHorn(bool* Pressed);
	void Brake(float* Value);
	void AirSpeed(float* Value);
};


// Class Killstreak.KSVehicle_Remote
// 0x00A0 (0x07C0 - 0x0720)
class AKSVehicle_Remote : public AKSVehicle
{
public:
	class AKSCharacter*                                OwningCharacter;                                          // 0x0720(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     JumpVector;                                               // 0x0728(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     JumpGroundTraceVector;                                    // 0x0734(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpCooldown;                                             // 0x0740(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0744(0x000C) MISSED OFFSET
	float                                              TotalBatteryDuration;                                     // 0x0750(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UpdateReplicatedBatteryTimerPeriod;                       // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0758(0x0010) MISSED OFFSET
	struct FPGame_ReplicatedTimer                      ReplicatedBatteryTimer;                                   // 0x0768(0x0038) (Edit, Net, DisableEditOnTemplate, EditConst)
	float                                              RevealHoldDuration;                                       // 0x07A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RevealConeAngle;                                          // 0x07A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RevealMaxDistance;                                        // 0x07A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RevealEffectDuration;                                     // 0x07AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x07B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSVehicle_Remote");
		return ptr;
	}


	void SetOwningCharacter(class AKSCharacter** Rider);
	void OnRep_OwningCharacter();
	void Jump();
	void GetRemainingBattery(float* RemainingTime, float* TotalTime);
	void ExecuteReveal();
};


// Class Killstreak.KSVehicleMovementComponent4W
// 0x0050 (0x04A0 - 0x0450)
class UKSVehicleMovementComponent4W : public UWheeledVehicleMovementComponent4W
{
public:
	bool                                               ParachuteDeployed;                                        // 0x0450(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               ParachuteDetached;                                        // 0x0451(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0452(0x0002) MISSED OFFSET
	float                                              SpeedToConsiderParachuteDeployment;                       // 0x0454(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToDeployParachute;                                // 0x0458(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToDetachParachute;                                // 0x045C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToAllowManualDetachment;                          // 0x0460(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeUntilParachuteDeployed;                               // 0x0464(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParachuteDownwardSpeed;                                   // 0x0468(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ManualDetachmentAllowed;                                  // 0x046C(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	float                                              ReorientedPitch;                                          // 0x0470(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToReorientPitch;                                      // 0x0474(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingTurnSpeed;                                         // 0x0478(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SlowFallingSpeed;                                         // 0x047C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultFallingSpeed;                                      // 0x0480(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FastFallingSpeed;                                         // 0x0484(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToReachDesiredFallSpeed;                              // 0x0488(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirSpeedInput;                                            // 0x048C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxAngleToPreventRoll;                                    // 0x0490(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0494(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSVehicleMovementComponent4W");
		return ptr;
	}


	void StopParachute();
	void StartParachute();
	void OnRep_ParachuteDeployed();
	void OnRep_ManualDetachmentAllowed();
	void AttemptManualDetachment();
};


// Class Killstreak.KSVehicleSeatComponent
// 0x0060 (0x02D0 - 0x0270)
class UKSVehicleSeatComponent : public USceneComponent
{
public:
	float                                              SeatPriority;                                             // 0x0270(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FReplicatedViewInfo                         MainCameraViewInfo;                                       // 0x0274(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	struct FReplicatedViewInfo                         AimCameraViewInfo;                                        // 0x027C(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0284(0x0018) MISSED OFFSET
	struct FName                                       AttachSocket;                                             // 0x029C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class UAnimMontage*                                GetInSequence;                                            // 0x02A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                GetOutSequence;                                           // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               IdleSequence;                                             // 0x02B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               LeanOutSequence;                                          // 0x02C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSVehicleSeatComponent");
		return ptr;
	}


	class USpringArmComponent* GetSeatSpringArm();
};


// Class Killstreak.KSVehicleWheel
// 0x0078 (0x0168 - 0x00F0)
class UKSVehicleWheel : public UVehicleWheel
{
public:
	TMap<TEnumAsByte<EPhysicalSurface>, class UParticleSystem*> WheelEffectMap;                                           // 0x00F0(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UParticleSystemComponent*                    WheelParticleSystem;                                      // 0x0140(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FName                                       AttachSocketOverrideName;                                 // 0x0148(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       VehicleSpeedParticleParameter;                            // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EffectSpeedInterpolationAlpha;                            // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumWheelEffectSpeed;                                  // 0x015C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaximumWheelEffectSpeed;                                  // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSVehicleWheel");
		return ptr;
	}

};


// Class Killstreak.KSViewModel
// 0x0320 (0x0650 - 0x0330)
class AKSViewModel : public AActor
{
public:
	unsigned char                                      UnknownData00[0x168];                                     // 0x0330(0x0168) MISSED OFFSET
	struct FName                                       ViewModelName;                                            // 0x0498(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FKSEquipmentContainer                       _EquipmentContainer;                                      // 0x04A0(0x0198)
	float                                              IdleSecondsToResetRotation;                               // 0x0638(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ResetRotationSpeedRadians;                                // 0x063C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0640(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSViewModel");
		return ptr;
	}


	void BeginRotationReset();
};


// Class Killstreak.KSViewModelInterface
// 0x0000 (0x0028 - 0x0028)
class UKSViewModelInterface : public UKSEquipmentContainerOwner
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSViewModelInterface");
		return ptr;
	}


	struct FName GetViewModelName();
};


// Class Killstreak.KSVOComponent
// 0x0090 (0x0188 - 0x00F8)
class UKSVOComponent : public UActorComponent
{
public:
	class AKSCharacter*                                CharacterOwner;                                           // 0x00F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0100(0x0028) MISSED OFFSET
	float                                              GlobalCooldownDuration;                                   // 0x0128(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	TMap<int, float>                                   CooldownGroupMap;                                         // 0x0130(0x0050) (ZeroConstructor)
	float                                              TimeNextEventCanPlayAfter;                                // 0x0180(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0184(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSVOComponent");
		return ptr;
	}


	void TeamStateChanged(class AKSPlayerState** PlayerState);
	void ServerPostVO(struct FKSVoicelineEvent* VoicelineEvent);
	void PostVOToServer(struct FKSVoicelineEvent* VoicelineEvent);
	void PostVO(struct FKSVoicelineEvent* VoicelineEvent);
	void PlayVO(struct FKSVoicelineEvent* VoicelineEvent);
	void PlayerStateChanged(class AKSPlayerState** PlayerState);
	void OwnerPossessedBy(class AController** Controller);
	void OnReadyToPlay();
	void BindToTeamStateEvents(class AKSTeamState** TeamState);
	void BindToPlayerStateEvents(class AKSPlayerState** PlayerState);
	void BindToPlayerControllerEvents(class AKSPlayerController** PlayerController);
	void BindToPingManagerEvents(class UKSPingManager** PingManager);
	void BindToGameStateEvents(class AKSGameState** GameState);
	void BindToEvents();
	void BindToCharacterEvents(class AKSCharacter** Character);
	void BindToActivatableModEvents(class UKSModInst_Activated** ActivatableMod);
};


// Class Killstreak.KSWaterFXVolume
// 0x0078 (0x03E0 - 0x0368)
class AKSWaterFXVolume : public ATriggerVolume
{
public:
	float                                              WaterFXUpdatePeriod;                                      // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SurfaceOffsetZ;                                           // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TMap<class AActor*, float>                         ActorCountdownMap;                                        // 0x0370(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FBoxSphereBounds                            CachedBounds;                                             // 0x03C0(0x001C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWaterFXVolume");
		return ptr;
	}


	void OnWaterFXTriggered(class AActor** TriggeringActor, struct FVector* SurfaceRelevantLocation, bool* bIsFullySubmerged);
	void OnWaterExited(class AActor** TriggeringActor, struct FVector* SurfaceRelevantLocation, bool* bIsFullySubmerged);
	void OnWaterEntered(class AActor** TriggeringActor, struct FVector* SurfaceRelevantLocation, bool* bIsFullySubmerged);
};


// Class Killstreak.KSWeaponAttachmentCosmeticInst
// 0x0588 (0x06E0 - 0x0158)
class UKSWeaponAttachmentCosmeticInst : public UKSEquipmentCosmeticComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0158(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAttachmentCosmeticInst.DefaultMesh
	struct FWeaponAttachmentAnimationData              DefaultMeshAndAnimData;                                   // 0x0180(0x03A8) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0528(0x0050) UNKNOWN PROPERTY: MapProperty Killstreak.KSWeaponAttachmentCosmeticInst.MeshMap
	class UDataTable*                                  MeshAndAnimDataTable;                                     // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLoadedWeaponAttachmentAnimationData        LoadedMeshData;                                           // 0x0580(0x00B0) (Transient)
	bool                                               bCreateDataTableForLegacyAssets;                          // 0x0630(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0631(0x0007) MISSED OFFSET
	class UDataTable*                                  DefaultAssetDataTable;                                    // 0x0638(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DefaulAssetDataTablePriority;                             // 0x0640(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0644(0x0004) MISSED OFFSET
	class UDataTable*                                  AdditionalAssetOverrideTables;                            // 0x0648(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0650(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAttachmentCosmeticInst.SkinDetailsPtr
	unsigned char                                      UnknownData05[0x10];                                      // 0x0678(0x0010) MISSED OFFSET
	TArray<struct FDataTableInfo>                      LoadedWeaponSpecificTableInfos;                           // 0x0688(0x0010) (ZeroConstructor, Transient)
	class UDataTable*                                  LegacyDataTable;                                          // 0x0698(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UKSWeaponAttachment*                         AttachmentAsset;                                          // 0x06A0(0x0008) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FGameplayTag                                AttachPoint;                                              // 0x06A8(0x0008) (Edit, Net, DisableEditOnTemplate, Transient, EditConst)
	class UKSWeaponComponent*                          ParentComponent;                                          // 0x06B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	uint16_t                                           ParentEquipmentId;                                        // 0x06B8(0x0002) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x06BA(0x0006) MISSED OFFSET
	class UKSWeaponAsset*                              ParentWeaponAsset;                                        // 0x06C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInitialized;                                             // 0x06C8(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x17];                                      // 0x06C9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachmentCosmeticInst");
		return ptr;
	}


	void OnRep_ParentEquipmentId();
	void OnRep_AttachPoint();
	void OnRep_AttachmentAsset();
	bool IsInitialized();
	class UKSWeaponComponent* GetParentComponent();
	bool GetLoadedMeshAnimAnimOverrideData(struct FLoadedWeaponAttachmentAnimationData* OutData);
	struct FGameplayTag GetAttachPoint();
	class UKSWeaponAttachment* GetAttachmentAsset();
	void GetAccumulatedMeshAndAnimOverrideData(class UKSWeaponAsset** InWeaponAsset, struct FWeaponAttachmentAnimationData* OutData);
};


// Class Killstreak.KSWAttachmentCosmetic_VarScope
// 0x0010 (0x06F0 - 0x06E0)
class UKSWAttachmentCosmetic_VarScope : public UKSWeaponAttachmentCosmeticInst
{
public:
	class UKSWeaponAttachment_VarScope*                VariableScopeAsset;                                       // 0x06E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      ScopeZoomIndex;                                           // 0x06E8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x06E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWAttachmentCosmetic_VarScope");
		return ptr;
	}


	void OnRep_ScopeZoomIndex();
};


// Class Killstreak.KSWayPoint
// 0x00A0 (0x0408 - 0x0368)
class AKSWayPoint : public AKSMapPoint
{
public:
	TMap<class AKSWayPointSet*, struct FKSWayPointLink> WayPointSetLinks;                                         // 0x0368(0x0050) (Edit, ZeroConstructor)
	struct FKSWayPointLink                             DefaultWayPointLinks;                                     // 0x03B8(0x0020) (Edit)
	float                                              DefensePointProbability;                                  // 0x03D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefensePointWaitTimeMin;                                  // 0x03DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefensePointWaitTimeMax;                                  // 0x03E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	TArray<class AKSDefensePoint*>                     DefensePointsForward;                                     // 0x03E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AKSDefensePoint*>                     DefensePointsReverse;                                     // 0x03F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWayPoint");
		return ptr;
	}


	TArray<class AKSWayPoint*> GetNextWayPoints(class AKSWayPointSet** WayPointSet);
};


// Class Killstreak.KSWayPointSet
// 0x0018 (0x0348 - 0x0330)
class AKSWayPointSet : public AActor
{
public:
	int                                                WayPointSet;                                              // 0x0330(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0334(0x0004) MISSED OFFSET
	TArray<class AKSWayPoint*>                         WayPoints;                                                // 0x0338(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWayPointSet");
		return ptr;
	}


	void UpdateWayPointVisuals();
	void LinkWayPoints();
};


// Class Killstreak.KSWeapon_Aimed
// 0x00C8 (0x0860 - 0x0798)
class AKSWeapon_Aimed : public AKSWeapon
{
public:
	struct FAimData                                    CachedAim;                                                // 0x0798(0x0050) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bAimOverShoulder;                                         // 0x07E8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07E9(0x0003) MISSED OFFSET
	float                                              CachedAimBonus;                                           // 0x07EC(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bApplyAccuracyServerSide;                                 // 0x07F0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1F];                                      // 0x07F1(0x001F) MISSED OFFSET
	float                                              Range;                                                    // 0x0810(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EFiredReplicationFlags                             _FiredReplicationFlags;                                   // 0x0814(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0815(0x0003) MISSED OFFSET
	class UKSAimCorrectionData*                        AimAssistCorrectionData;                                  // 0x0818(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowAimCorrection;                                      // 0x0820(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0821(0x0003) MISSED OFFSET
	float                                              HeadAimCorrectionOffset;                                  // 0x0824(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadAimCorrectionOffsetPC;                                // 0x0828(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadAimCorrectionRange;                                   // 0x082C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyAimCorrectionOffset;                                  // 0x0830(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyAimCorrectionOffsetPC;                                // 0x0834(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyAimCorrectionRange;                                   // 0x0838(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowHipAimCorrection;                                   // 0x083C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x083D(0x0003) MISSED OFFSET
	float                                              HeadHipAimCorrectionOffset;                               // 0x0840(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadHipMouseAimCorrectionOffset;                          // 0x0844(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadHipAimCorrectionRange;                                // 0x0848(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyHipAimCorrectionOffset;                               // 0x084C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyHipMouseAimCorrectionOffset;                          // 0x0850(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BodyHipAimCorrectionRange;                                // 0x0854(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ValidationSweepRadius;                                    // 0x0858(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x085C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_Aimed");
		return ptr;
	}


	struct FAimData STATIC_StaticDefaultGetAim(class UKSWeaponAsset** InWeaponAsset, class AActor** InWeaponOwner, EKSCharacterAimMode* InAimMode);
	void ServerSetAimOverShoulder(bool* bNewAimDownSights);
	void ServerProcessHits(struct FAimData* ReceivedAim, TArray<struct FHitResult>* Hits);
	void ServerFireWeaponAimed(struct FWeaponStateChangeRequest* request, struct FAimData* ReceivedAim);
	bool IsInOrTransitioningToAOS();
	bool IsInOrTransitioningToAlternate();
	bool IsInOrTransitioningToADS();
	bool IsAimingOverShoulder();
	bool IsAimingDownSights();
	bool IsAimingAlternate();
	bool IsAiming();
	void InternalGetActorsToIgnore(TArray<class AActor*>* ActorsToIgnore);
	float GetRange();
	EKSCharacterAimMode GetOwnerAimMode();
	float GetHeadAimCorrectionRange();
	float GetHeadAimCorrectionOffset(bool* bMouse);
	struct FFullFireRepData GetFullFireRepData();
	float GetCurrentAccuracy();
	struct FAimData GetCachedAim();
	struct FAimData GetAim();
	TArray<class AActor*> GetActorsToIgnore();
	void ApplyView(struct FAimData* InAim, struct FAimData* OutAim);
	bool ApplyAimAssist(struct FAimData* InOutAim);
	void ApplyAccuracy(struct FAimData* InAim, struct FAimData* OutAim);
	bool AllowAimCorrection();
};


// Class Killstreak.KSWeapon_Build
// 0x0080 (0x08E0 - 0x0860)
class AKSWeapon_Build : public AKSWeapon_Aimed
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0860(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInvalidBuildPlacementDel;                               // 0x0878(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0888(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnValidBuildPlacementDel;                                 // 0x08A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     BuildLocationOffset;                                      // 0x08B0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAdjustBuildDistance;                                   // 0x08BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AKSBuildPreview*                             BuildPreviewActor;                                        // 0x08C0(0x0008) (ZeroConstructor, IsPlainOldData)
	EKSBuildState                                      _BuildState;                                              // 0x08C8(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x08C9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBuildSpawned;                                           // 0x08D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_Build");
		return ptr;
	}


	void OnRep_BuildState();
	void GetDesiredBuildLocationAndRotation(struct FVector* OutLocation, struct FRotator* OutRotation);
	class UClass* GetBuildPreviewActorClass();
	class UClass* GetBuildActorClass();
};


// Class Killstreak.KSWeapon_DirectTarget
// 0x0018 (0x07B0 - 0x0798)
class AKSWeapon_DirectTarget : public AKSWeapon
{
public:
	class AActor*                                      ActiveTarget;                                             // 0x0798(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TargetingConeHalfAngle;                                   // 0x07A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseNearestTarget;                                        // 0x07A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRequiresVisibility;                                      // 0x07A5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x07A6(0x0002) MISSED OFFSET
	float                                              MaxTargetDistance;                                        // 0x07A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_DirectTarget");
		return ptr;
	}


	void SubmitTargetSelection(class AActor** TargetCandidate);
	void PopulateValidTargets(TArray<class AActor*>* ValidTargetArray);
	bool IsTargetValid(class AActor** TestActor);
	class AActor* EvaluateActiveTarget();
	class AActor* ChooseBestTarget(TArray<class AActor*>* ValidTargetArray);
};


// Class Killstreak.KSWeapon_GrenadeThrow
// 0x0030 (0x0890 - 0x0860)
class AKSWeapon_GrenadeThrow : public AKSWeapon_Aimed
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0860(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGrenadeThrown;                                          // 0x0878(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0888(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_GrenadeThrow");
		return ptr;
	}


	void OnFuseTimerExpired(float* MinHandRemainingFuse);
};


// Class Killstreak.KSWeapon_Melee
// 0x0078 (0x08D8 - 0x0860)
class AKSWeapon_Melee : public AKSWeapon_Aimed
{
public:
	struct FScriptMulticastDelegate                    OnMeleeHit;                                               // 0x0860(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0870(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnProjectileSpawned;                                      // 0x0888(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0898(0x0020) MISSED OFFSET
	class AKSProjectile*                               _Projectile;                                              // 0x08B8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class AKSProjectile*                               FakeProjectile;                                           // 0x08C0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UKSWeaponAsset_Melee*                        MeleeWeaponAsset;                                         // 0x08C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsInQuickMelee;                                          // 0x08D0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x08D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_Melee");
		return ptr;
	}


	void OnRep_Projectile();
	void OnOwnerAimStateChanged(EKSCharacterAimMode* WeaponStateChange);
	void OnLungingChanged(bool* Lunging);
	void JumpToFire(EWeaponStateNew* PreviousState);
	void IncPrefireSkipWindow();
	class AKSProjectile* GetProjectile();
};


// Class Killstreak.KSWeapon_Proximity
// 0x0068 (0x0800 - 0x0798)
class AKSWeapon_Proximity : public AKSWeapon
{
public:
	class UClass*                                      ProximityComponentClass;                                  // 0x0798(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSProximityComponent*                       _ProximityComponent;                                      // 0x07A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bCacheProximityActorsWhileFiring;                         // 0x07A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProximityActiveOnlyInHand;                               // 0x07A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x07AA(0x0006) MISSED OFFSET
	TArray<class AActor*>                              ProximityActors;                                          // 0x07B0(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              CachedProximityActors;                                    // 0x07C0(0x0010) (Net, ZeroConstructor, Transient)
	TArray<class UPrimitiveComponent*>                 ProximityComponents;                                      // 0x07D0(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UPrimitiveComponent*>                 CachedProximityComponents;                                // 0x07E0(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnCachedProximityActorsUpdatedDel;                        // 0x07F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_Proximity");
		return ptr;
	}


	void ProximityActorUpdated(class AActor** Actor, class UPrimitiveComponent** Component, struct FKSActorProximityInfo* ProximityInfo);
	void OnCachedProximityActorsUpdated();
	struct FVector GetProximityTraceRelativeLocation();
	class UPrimitiveComponent* GetProximityComponent();
	TArray<class AActor*> GetCachedProximityActors();
};


// Class Killstreak.KSWeapon_RemoteRocket
// 0x0040 (0x07D8 - 0x0798)
class AKSWeapon_RemoteRocket : public AKSWeapon
{
public:
	float                                              CameraBlendTime;                                          // 0x0798(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EViewTargetBlendFunction>              CameraBlendFunction;                                      // 0x079C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x079D(0x0003) MISSED OFFSET
	float                                              CameraBlendExp;                                           // 0x07A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CameraLockOutgoing;                                       // 0x07A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x07A5(0x0003) MISSED OFFSET
	float                                              PostDestroyDelay;                                         // 0x07A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x07AC(0x0004) MISSED OFFSET
	class UClass*                                      RemoteRocketToSpawn;                                      // 0x07B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     RemoteRocketRelativeLocation;                             // 0x07B8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x07C4(0x0004) MISSED OFFSET
	class AKSRocket*                                   SpawnedRemoteRocket;                                      // 0x07C8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class AController*                                 RocketController;                                         // 0x07D0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_RemoteRocket");
		return ptr;
	}


	void OnRocketDestroyed(class AActor** RocketActor);
	void OnPostDestroyDelayComplete();
	class AKSRocket* GetSpawnedRocket();
	struct FTransform GetRocketSpawnWorldTransform();
};


// Class Killstreak.KSWeapon_RemoteThrow
// 0x0030 (0x08C0 - 0x0890)
class AKSWeapon_RemoteThrow : public AKSWeapon_GrenadeThrow
{
public:
	struct FScriptMulticastDelegate                    OnDetonatorEquipped;                                      // 0x0890(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x08A0(0x0010) MISSED OFFSET
	class UKSWeaponAsset*                              DetonatorAsset;                                           // 0x08B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ReadyForDetonator;                                        // 0x08B8(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x08B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_RemoteThrow");
		return ptr;
	}


	void SwapToDetonator();
	void OnProjectileReleased();
	void OnAttachedChargeDestroyed(class AActor** DestroyedCharge);
	void GetAttachedCharges(TArray<class AKSProjectile_RemoteTrigger*>* OutCharges);
};


// Class Killstreak.KSWeapon_RemoteThrowAndTrigger
// 0x0010 (0x08D0 - 0x08C0)
class AKSWeapon_RemoteThrowAndTrigger : public AKSWeapon_RemoteThrow
{
public:
	bool                                               bUseSequentialDetonation;                                 // 0x08C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x08C1(0x0003) MISSED OFFSET
	struct FName                                       AltFireSubWeaponName;                                     // 0x08C4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x08CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_RemoteThrowAndTrigger");
		return ptr;
	}

};


// Class Killstreak.KSWeapon_RemoteTrigger
// 0x0060 (0x07F8 - 0x0798)
class AKSWeapon_RemoteTrigger : public AKSWeapon
{
public:
	struct FScriptMulticastDelegate                    OnRemoteThrowEquipped;                                    // 0x0798(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x07A8(0x0020) MISSED OFFSET
	TArray<TWeakObjectPtr<class AKSProjectile_RemoteTrigger>> AttachedCharges;                                          // 0x07C8(0x0010) (Net, ZeroConstructor)
	float                                              MaxDetonationRange;                                       // 0x07D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07DC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDetonationReady;                                        // 0x07E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UKSWeaponAsset>               RemoteThrowAsset;                                         // 0x07F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_RemoteTrigger");
		return ptr;
	}


	void SwapOffDetonator();
	void OnAttachedChargeDestroyed(class AActor** DestroyedCharge);
	void GetAttachedCharges(TArray<class AKSProjectile_RemoteTrigger*>* OutCharges);
	void Detonate();
};


// Class Killstreak.KSWeapon_RemoteVehicle
// 0x0048 (0x07E0 - 0x0798)
class AKSWeapon_RemoteVehicle : public AKSWeapon
{
public:
	class UClass*                                      RemoteVehicleToSpawn;                                     // 0x0798(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  RemoteVehicleRelativeTransform;                           // 0x07A0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	class AKSVehicle_Remote*                           SpawnedRemoteVehicle;                                     // 0x07D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x07D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_RemoteVehicle");
		return ptr;
	}


	void VehicleDestroyed();
};


// Class Killstreak.KSWeapon_ReviveDirect
// 0x0000 (0x07B0 - 0x07B0)
class AKSWeapon_ReviveDirect : public AKSWeapon_DirectTarget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_ReviveDirect");
		return ptr;
	}

};


// Class Killstreak.KSWeapon_ReviveDartDirect
// 0x0028 (0x07D8 - 0x07B0)
class AKSWeapon_ReviveDartDirect : public AKSWeapon_ReviveDirect
{
public:
	TWeakObjectPtr<class AKSProjectile_ReviveDart>     DartProjectile;                                           // 0x07B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSucceed;                                                // 0x07B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFailed;                                                 // 0x07C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_ReviveDartDirect");
		return ptr;
	}


	void OnReviveSucceed();
	void OnReviveFailed();
};


// Class Killstreak.KSWeapon_Targeted
// 0x0040 (0x07D8 - 0x0798)
class AKSWeapon_Targeted : public AKSWeapon
{
public:
	struct FScriptMulticastDelegate                    DisplayTargetList;                                        // 0x0798(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TargetSelectCancelled;                                    // 0x07A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class AActor*>                              PotentialTargets;                                         // 0x07B8(0x0010) (ZeroConstructor, Transient)
	bool                                               SelectTargetOnRetrieve;                                   // 0x07C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07C9(0x0003) MISSED OFFSET
	TWeakObjectPtr<class AActor>                       TargetedActor;                                            // 0x07CC(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_Targeted");
		return ptr;
	}


	bool TargetCurrentlyValid(class AActor** TestTarget);
	void SubmitTargetedActor(class AActor** TargetActor);
	void ConfirmTargetSelection(class AActor** TargetActor);
	void CancelTargetSelection();
};


// Class Killstreak.KSWeapon_ReviveDrone
// 0x0010 (0x07E8 - 0x07D8)
class AKSWeapon_ReviveDrone : public AKSWeapon_Targeted
{
public:
	class UClass*                                      DroneClass;                                               // 0x07D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class AKSAgent_RevivalDrone>        DroneActor;                                               // 0x07E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_ReviveDrone");
		return ptr;
	}

};


// Class Killstreak.KSWeapon_ReviveDroneDirect
// 0x0070 (0x0820 - 0x07B0)
class AKSWeapon_ReviveDroneDirect : public AKSWeapon_ReviveDirect
{
public:
	struct FScriptMulticastDelegate                    OnDroneReviveBegin;                                       // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDroneReviveComplete;                                    // 0x07C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDroneAbort;                                             // 0x07D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDroneTargetRevive;                                      // 0x07E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDroneDestroyed;                                         // 0x07F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDroneSpawned;                                           // 0x0800(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      DroneClass;                                               // 0x0810(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class AKSAgent_RevivalDrone>        DroneActor;                                               // 0x0818(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_ReviveDroneDirect");
		return ptr;
	}


	void OnRep_DroneActor();
	void OnDroneDestroy(class AActor** SupposedDroneActor);
	void OnDroneAborted();
	void GetDesiredSpawnLocationAndRotation(struct FVector* OutLocation, struct FRotator* OutRotation);
};


// Class Killstreak.KSWeapon_Shotgun
// 0x0010 (0x0870 - 0x0860)
class AKSWeapon_Shotgun : public AKSWeapon_Aimed
{
public:
	TArray<struct FAimData>                            CachedPelletSpread;                                       // 0x0860(0x0010) (ZeroConstructor, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_Shotgun");
		return ptr;
	}

};


// Class Killstreak.KSWeapon_TargetSurface
// 0x0028 (0x0888 - 0x0860)
class AKSWeapon_TargetSurface : public AKSWeapon_Aimed
{
public:
	struct FScriptMulticastDelegate                    OnSurfaceTargetFireFailure;                               // 0x0860(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSurfaceValidityChanged;                                 // 0x0870(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               ValidTarget;                                              // 0x0880(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0881(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_TargetSurface");
		return ptr;
	}

};


// Class Killstreak.KSWeapon_Zipline
// 0x0038 (0x0898 - 0x0860)
class AKSWeapon_Zipline : public AKSWeapon_Aimed
{
public:
	struct FScriptMulticastDelegate                    OnEndPointUpdated;                                        // 0x0860(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      ZipLineClass;                                             // 0x0870(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AKSZipLine*                                  _ZipLine;                                                 // 0x0878(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ETraceTypeQuery>                       PreviewTraceChannel;                                      // 0x0880(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0881(0x0003) MISSED OFFSET
	float                                              MaxRange;                                                 // 0x0884(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRange;                                                 // 0x0888(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProjectileSpeed;                                          // 0x088C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0890(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeapon_Zipline");
		return ptr;
	}

};


// Class Killstreak.KSWeaponAnimInstance
// 0x00A0 (0x0330 - 0x0290)
class UKSWeaponAnimInstance : public UKSAnimInstance
{
public:
	bool                                               m_bIsReloading;                                           // 0x0290(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0291(0x0003) MISSED OFFSET
	float                                              m_fIKAlpha;                                               // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fIKBlendInTime;                                         // 0x0298(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fIKBlendOutTime;                                        // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     m_vADSOffset;                                             // 0x02A0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bIsMoving;                                              // 0x02AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02AD(0x0003) MISSED OFFSET
	float                                              m_fMovingAlpha;                                           // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                m_nFireImpulseCounter;                                    // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bFireImpulse;                                           // 0x02B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02B9(0x0003) MISSED OFFSET
	float                                              m_fADSAlpha;                                              // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bIsSprinting;                                           // 0x02C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x02C1(0x0003) MISSED OFFSET
	float                                              m_fLeadingPitch;                                          // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              m_fLeadingYaw;                                            // 0x02C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              m_fLeadingPitchADS;                                       // 0x02CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              m_fLeadingYawADS;                                         // 0x02D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FWeaponLeadingInfo                          LeadingPitch;                                             // 0x02D4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FWeaponLeadingInfo                          LeadingYaw;                                               // 0x02E4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FWeaponLeadingInfo                          LeadingPitchADS;                                          // 0x02F4(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FWeaponLeadingInfo                          LeadingYawADS;                                            // 0x0304(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0314(0x000C) MISSED OFFSET
	int                                                m_LandImpulseCounter;                                     // 0x0320(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                m_JumpImpulseCounter;                                     // 0x0324(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               m_bFoldIronSights;                                        // 0x0328(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0329(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAnimInstance");
		return ptr;
	}


	void PlayFireAnimationBP();
};


// Class Killstreak.KSWeaponAsset_Build
// 0x0050 (0x0610 - 0x05C0)
class UKSWeaponAsset_Build : public UKSWeaponAsset
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x05C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset_Build.SoftBuildActorClass
	unsigned char                                      UnknownData01[0x28];                                      // 0x05E8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset_Build.SoftBuildPreviewActorClass

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAsset_Build");
		return ptr;
	}


	void GetSoftBuildPreviewActorClass();
	void GetSoftBuildActorClass();
};


// Class Killstreak.KSWeaponAsset_WithProjectile
// 0x0058 (0x0618 - 0x05C0)
class UKSWeaponAsset_WithProjectile : public UKSWeaponAsset
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x05C0(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset_WithProjectile.ProjectileClass
	unsigned char                                      UnknownData01[0x28];                                      // 0x05E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAsset_WithProjectile.ProjectileWeaponAsset
	float                                              RadialDamageOriginOffsetDistance;                         // 0x0610(0x0004) (Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0614(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAsset_WithProjectile");
		return ptr;
	}


	float GetRadialDamageOriginOffsetDistance();
	void GetProjectileWeaponAsset();
	float GetProjectileRadius();
	float GetProjectileMaxSimulationTimeStep();
	float GetProjectileMaxSimulationIterations();
	float GetProjectileInitialSpeed(float* PitchAngle);
	float GetProjectileGravityScale();
	void GetProjectileClass();
};


// Class Killstreak.KSWeaponAsset_Grenade
// 0x0040 (0x0658 - 0x0618)
class UKSWeaponAsset_Grenade : public UKSWeaponAsset_WithProjectile
{
public:
	bool                                               bAllowCooking;                                            // 0x0618(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0619(0x0003) MISSED OFFSET
	float                                              MinimumCookTime;                                          // 0x061C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FuseTime;                                                 // 0x0620(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinHandRemainingFuse;                                     // 0x0624(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFuseTicksInHand;                                         // 0x0628(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0629(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData02[0x28];                                      // 0x0629(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset_Grenade.GrenadeClass

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAsset_Grenade");
		return ptr;
	}


	float GetMinimumCookTime();
	float GetMinHandRemainingFuse();
	float GetFuseTime();
	bool GetFuseTicksInHand();
	bool AllowCooking();
};


// Class Killstreak.KSWeaponAsset_Melee
// 0x0040 (0x0658 - 0x0618)
class UKSWeaponAsset_Melee : public UKSWeaponAsset_WithProjectile
{
public:
	struct FVector                                     MeleeBoxOffset;                                           // 0x0618(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     MeleeBoxExtent;                                           // 0x0624(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              BoxObjectTypes;                                           // 0x0630(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<ETraceTypeQuery>                       TraceChannel;                                             // 0x0640(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0641(0x0003) MISSED OFFSET
	float                                              MaxLungeDistance;                                         // 0x0644(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxLungeDuration;                                         // 0x0648(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LungeConeHalfAngle;                                       // 0x064C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LungeConeOriginDistanceOffset;                            // 0x0650(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0654(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAsset_Melee");
		return ptr;
	}


	TEnumAsByte<ETraceTypeQuery> GetMeleeTraceChannel();
	struct FVector GetMeleeBoxOffset();
	struct FVector GetMeleeBoxExtent();
	float GetMaxLungeDuration();
	float GetMaxLungeDistance();
	float GetLungeConeHalfAngle();
	TArray<TEnumAsByte<EObjectTypeQuery>> GetBoxObjectTypes();
};


// Class Killstreak.KSWeaponAsset_Pierce
// 0x0030 (0x0648 - 0x0618)
class UKSWeaponAsset_Pierce : public UKSWeaponAsset_WithProjectile
{
public:
	float                                              DamageScalarAfterWalls;                                   // 0x0618(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x061C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x28];                                      // 0x061C(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAsset_Pierce.PierceClass

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAsset_Pierce");
		return ptr;
	}


	float GetDamageScalarAfterWalls();
};


// Class Killstreak.KSWeaponAsset_Shotgun
// 0x0028 (0x05E8 - 0x05C0)
class UKSWeaponAsset_Shotgun : public UKSWeaponAsset
{
public:
	int                                                PelletsPerShot;                                           // 0x05C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimDownSightsAccuracy;                                    // 0x05C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseSpreadPattern;                                        // 0x05C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x05C9(0x0007) MISSED OFFSET
	TArray<struct FVector2D>                           SpreadPattern;                                            // 0x05D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              HitPercentageForHeadshot;                                 // 0x05E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAsset_Shotgun");
		return ptr;
	}


	void GetSpreadPattern(TArray<struct FVector2D>* OutPattern);
	int GetPelletsPerShot();
	float GetHitPercentageForHeadshot();
	float GetAimDownSightsAccuracy();
	bool DoesUseSpreadPattern();
};


// Class Killstreak.KSWeaponAttachment
// 0x00A0 (0x01F8 - 0x0158)
class UKSWeaponAttachment : public UKSItem
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0158(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAttachment.FunctionalClass
	unsigned char                                      UnknownData01[0x28];                                      // 0x0180(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAttachment.CosmeticClass
	struct FGameplayTagContainer                       ValidAttachPoints;                                        // 0x01A8(0x0020) (Edit, DisableEditOnInstance)
	struct FGameplayTagContainer                       CompatibleWeaponTypes;                                    // 0x01C8(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bShouldBeInAttachmentCollection;                          // 0x01E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x01E9(0x0007) MISSED OFFSET
	class UAttachmentCollection*                       GlobalWeaponAttachmentCollection;                         // 0x01F0(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment");
		return ptr;
	}


	void GetValidAttachPoints(struct FGameplayTagContainer* OutAttachPoints);
	void GetFunctionalClass();
	void GetCosmeticClass();
	bool CanAttachToWeaponType(struct FGameplayTag* InWeaponType);
	bool CanAttachTo(class AKSWeapon** InWeapon, struct FGameplayTagContainer* AvailableAttachPoints);
};


// Class Killstreak.KSWeaponAttachment_AccuracyKick
// 0x0028 (0x0220 - 0x01F8)
class UKSWeaponAttachment_AccuracyKick : public UKSWeaponAttachment
{
public:
	bool                                               bReplaceKickbackModule;                                   // 0x01F8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET
	class UKickbackModule*                             _KickbackModule;                                          // 0x0200(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              KickbackResetTime;                                        // 0x0208(0x0004) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bModifyKickbackScale;                                     // 0x020C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x020D(0x0003) MISSED OFFSET
	float                                              KickbackScale;                                            // 0x0210(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bModifyBaseAccuracy;                                      // 0x0214(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	float                                              BaseAccuracyMultiplier;                                   // 0x0218(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x021C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_AccuracyKick");
		return ptr;
	}

};


// Class Killstreak.KSWeaponAttachment_DefaultAmmo
// 0x0008 (0x0200 - 0x01F8)
class UKSWeaponAttachment_DefaultAmmo : public UKSWeaponAttachment
{
public:
	int                                                DefaultAmmoIncrease;                                      // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_DefaultAmmo");
		return ptr;
	}

};


// Class Killstreak.KSWeaponAttachment_ExtMagazine
// 0x0008 (0x0200 - 0x01F8)
class UKSWeaponAttachment_ExtMagazine : public UKSWeaponAttachment
{
public:
	int                                                ClipSize;                                                 // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_ExtMagazine");
		return ptr;
	}


	int GetClipSize();
};


// Class Killstreak.KSWeaponAttachment_ExtMagPercent
// 0x0008 (0x0200 - 0x01F8)
class UKSWeaponAttachment_ExtMagPercent : public UKSWeaponAttachment
{
public:
	float                                              ClipSizeIncreaseMultiplier;                               // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EExtendedMagazineRounding                          RoundingType;                                             // 0x01FC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01FD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_ExtMagPercent");
		return ptr;
	}

};


// Class Killstreak.KSWeaponAttachment_LongBarrel
// 0x0008 (0x0200 - 0x01F8)
class UKSWeaponAttachment_LongBarrel : public UKSWeaponAttachment
{
public:
	float                                              FalloffRangeMultiplier;                                   // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_LongBarrel");
		return ptr;
	}

};


// Class Killstreak.KSWeaponAttachment_QuickMag
// 0x0008 (0x0200 - 0x01F8)
class UKSWeaponAttachment_QuickMag : public UKSWeaponAttachment
{
public:
	float                                              ReloadPeriodMultiplier;                                   // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_QuickMag");
		return ptr;
	}


	float GetReloadPeriodMultiplier();
};


// Class Killstreak.KSWeaponAttachment_Scope
// 0x0000 (0x01F8 - 0x01F8)
class UKSWeaponAttachment_Scope : public UKSWeaponAttachment
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_Scope");
		return ptr;
	}

};


// Class Killstreak.KSWeaponAttachment_ScopeFixedFOV
// 0x0008 (0x0200 - 0x01F8)
class UKSWeaponAttachment_ScopeFixedFOV : public UKSWeaponAttachment_Scope
{
public:
	float                                              AimDownSightsFov;                                         // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_ScopeFixedFOV");
		return ptr;
	}


	float GetAimDownSightsFieldOfView();
};


// Class Killstreak.KSWeaponAttachment_ScopeMultiply
// 0x0008 (0x0200 - 0x01F8)
class UKSWeaponAttachment_ScopeMultiply : public UKSWeaponAttachment_Scope
{
public:
	float                                              ScopeMultiplier;                                          // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_ScopeMultiply");
		return ptr;
	}


	float GetScopeMultiplier();
};


// Class Killstreak.KSWeaponAttachment_Silencer
// 0x0010 (0x0208 - 0x01F8)
class UKSWeaponAttachment_Silencer : public UKSWeaponAttachment
{
public:
	float                                              AudibleRange;                                             // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bModifyFalloffRange;                                      // 0x01FC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01FD(0x0003) MISSED OFFSET
	float                                              FalloffRangeMultiplier;                                   // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0204(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_Silencer");
		return ptr;
	}


	float GetAudibleRange();
};


// Class Killstreak.KSWeaponAttachment_VarScope
// 0x0018 (0x0210 - 0x01F8)
class UKSWeaponAttachment_VarScope : public UKSWeaponAttachment_Scope
{
public:
	TArray<float>                                      ScopeSettings;                                            // 0x01F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	EKSVariableScopeType                               _ScopeType;                                               // 0x0208(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0208(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned char                                      UnknownData01[0x4];                                       // 0x020C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachment_VarScope");
		return ptr;
	}


	TArray<float> GetScopeFOVOptions(class UKSWeaponAsset** InAsset);
	float GetScopeFOV(class UKSWeaponAsset** InAsset, int* nIndex);
	int GetNumScopeOptions();
};


// Class Killstreak.KSWeaponAttachmentInstance
// 0x0068 (0x0160 - 0x00F8)
class UKSWeaponAttachmentInstance : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00F8(0x0008) MISSED OFFSET
	class AKSWeapon*                                   WeaponOwner;                                              // 0x0100(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UKSWeaponAttachmentCosmeticInst*             AttachmentCosmeticComponent;                              // 0x0108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0110(0x0018) MISSED OFFSET
	struct FKSEquipRepInfo                             AttachPoint;                                              // 0x0128(0x0014) (Edit, Net, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData02[0x14];                                      // 0x013C(0x0014) MISSED OFFSET
	class UKSWeaponAttachment*                         AttachmentAsset;                                          // 0x0150(0x0008) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bPersistsOnWeaponDrop;                                    // 0x0158(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0159(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachmentInstance");
		return ptr;
	}


	void SetPersistsOnWeaponDrop(bool* bEnable);
	void OnUnattached();
	void OnRep_AttachPoint();
	void OnRep_AttachmentAsset();
	void OnAttached();
	bool IsAttached();
	bool GetPersistsOnWeaponDrop();
	class AKSWeapon* GetOwningWeapon();
	struct FGameplayTag GetAttachPoint();
	class UKSWeaponAttachment* GetAttachmentAsset();
};


// Class Killstreak.KSWeaponAttachmentInst_VarScope
// 0x0010 (0x0170 - 0x0160)
class UKSWeaponAttachmentInst_VarScope : public UKSWeaponAttachmentInstance
{
public:
	class UKSWeaponAttachment_VarScope*                VariableScopeAsset;                                       // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      ScopeZoomIndex;                                           // 0x0168(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0169(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachmentInst_VarScope");
		return ptr;
	}


	void ServerSetScopeZoomIndex(unsigned char* NewIndex);
};


// Class Killstreak.KSWeaponAttachmentSkinDetails
// 0x0060 (0x0090 - 0x0030)
class UKSWeaponAttachmentSkinDetails : public UPrimaryDataAsset
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponAttachmentSkinDetails.Weapon
	unsigned char                                      UnknownData01[0x28];                                      // 0x0058(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.KSWeaponAttachmentSkinDetails.AttachmentCosmetic
	TArray<struct FDataTableInfo>                      AssetOverrideTables;                                      // 0x0080(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponAttachmentSkinDetails");
		return ptr;
	}

};


// Class Killstreak.KSWeaponComponent
// 0x0370 (0x04C8 - 0x0158)
class UKSWeaponComponent : public UKSEquipmentCosmeticComponent
{
public:
	EWeaponComponentTickType                           _WeaponComponentTickType;                                 // 0x0158(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowTickingOnItemDropActor;                             // 0x0159(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForceWeaponToLOD0WhenLocallyViewed;                      // 0x015A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForceResidentFlagOnWeaponTextures;                       // 0x015B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowAnimationAsItemDrop;                                // 0x015C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EWeaponStateNew                                    _WeaponState;                                             // 0x015D(0x0001) (Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	EWeaponStateNew                                    InitialState;                                             // 0x015E(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x015F(0x0001) MISSED OFFSET
	class UKSWeaponAsset*                              _WeaponAsset;                                             // 0x0160(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bPendingFire;                                             // 0x0168(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      InitialAmmoInClip;                                        // 0x0169(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      AmmoInClip;                                               // 0x016A(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bInitializationStarted;                                   // 0x016B(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInitializationCompleted;                                 // 0x016C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x016D(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAmmoChangedDel;                                         // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0180(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponComponentInitializationCompletedDel;              // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x19];                                      // 0x01A8(0x0019) MISSED OFFSET
	bool                                               bCachedWeaponVisibility;                                  // 0x01C1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x01C2(0x0002) MISSED OFFSET
	float                                              MeshMaxDrawDistance;                                      // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMaxDistForCharacterOwnedWeapons;                      // 0x01C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHideAncillaryMagazine;                                   // 0x01C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x01CA(0x0002) MISSED OFFSET
	int                                                AncillaryMagazineIndex;                                   // 0x01CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsGrenade;                                               // 0x01D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x01D1(0x0003) MISSED OFFSET
	struct FName                                       MeleeComboTarget;                                         // 0x01D4(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	EWeaponComponentAttachmentType                     WeaponAttachType;                                         // 0x01DC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x01DD(0x0003) MISSED OFFSET
	class USkeletalMesh*                               _SkeletalMesh;                                            // 0x01E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPhysicsAsset*                               _PhysicsAsset;                                            // 0x01E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowMeshCompositing;                                    // 0x01F0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x01F1(0x0007) MISSED OFFSET
	class USkeletalMesh*                               ScopeMesh;                                                // 0x01F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGameplayTag                                ScopeAttachmentTag;                                       // 0x0200(0x0008) (Edit, EditConst)
	class USkeletalMesh*                               MagazineMesh;                                             // 0x0208(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGameplayTag                                MagazineAttachmentTag;                                    // 0x0210(0x0008) (Edit, EditConst)
	class USkeletalMesh*                               StockMesh;                                                // 0x0218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGameplayTag                                StockAttachmentTag;                                       // 0x0220(0x0008) (Edit, EditConst)
	class USkeletalMesh*                               SilencerMesh;                                             // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGameplayTag                                SilencerAttachmentTag;                                    // 0x0230(0x0008) (Edit, EditConst)
	class USkeletalMesh*                               GripMesh;                                                 // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGameplayTag                                GripAttachmentTag;                                        // 0x0240(0x0008) (Edit, EditConst)
	TArray<struct FName>                               KeywordsForCompositingMesh;                               // 0x0248(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       BaseMeshOverrideKeyword;                                  // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AnimInstance;                                             // 0x0260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       AnimInstanceOverrideKeyword;                              // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EquipSocketOverride;                                      // 0x0270(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UKSWeaponSkeletalMeshComponent*              _WeaponSkeletalMeshComponent;                             // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bHideOnCreation;                                          // 0x0280(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDuplicate;                                               // 0x0281(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0282(0x0002) MISSED OFFSET
	struct FName                                       DuplicateSocket;                                          // 0x0284(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x028C(0x0004) MISSED OFFSET
	class UKSWeaponSkeletalMeshComponent*              DuplicateSkeletalMeshComponent;                           // 0x0290(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bWeaponLoweringEnabled;                                   // 0x0298(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0299(0x0003) MISSED OFFSET
	struct FName                                       CharacterRightShoulderBoneName;                           // 0x029C(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CharacterRightElbowBoneName;                              // 0x02A4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CharacterLeftShoulderBoneName;                            // 0x02AC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CharacterLeftElbowBoneName;                               // 0x02B4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CharacterChestBoneName;                                   // 0x02BC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponBarrelBoneName;                                     // 0x02C4(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponLowerSphereTraceRadius;                             // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponLowerTestDistanceAdjustment;                        // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x02D4(0x0004) MISSED OFFSET
	TArray<struct FAncillaryWeaponMeshInfo>            AncillaryMeshData;                                        // 0x02D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              WeaponLowerViewDotThreshold;                              // 0x02E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bResetLocked;                                             // 0x02EC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x02ED(0x0003) MISSED OFFSET
	uint32_t                                           NextBroadcastId;                                          // 0x02F0(0x0004) (ZeroConstructor, IsPlainOldData)
	uint32_t                                           LastBroadcastReceived;                                    // 0x02F4(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class USkeletalMeshComponent*>              AncillaryMeshes;                                          // 0x02F8(0x0010) (ExportObject, ZeroConstructor)
	bool                                               bAttachHandWhileSprinting;                                // 0x0308(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachHandWhileMoving;                                   // 0x0309(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachHandWhileCrouching;                                // 0x030A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachHandMelee;                                         // 0x030B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachHandWhileIdle;                                     // 0x030C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachHandWhileZiplining;                                // 0x030D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForceAttachHandIfNotNonCom;                              // 0x030E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAttachRightHand;                                         // 0x030F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReplicateWeaponStateAsVariable;                          // 0x0310(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceBroadcastAllWeaponStateChanges;                     // 0x0311(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceReliableWeaponStateBroadcast;                       // 0x0312(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x0313(0x0001) MISSED OFFSET
	int                                                ShotsFiredSinceLastReload;                                // 0x0314(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bFirstReload;                                             // 0x0318(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldBroadcastEmptyFire;                                // 0x0319(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldReliablyBroadcastEmptyFire;                        // 0x031A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldReliablyBroadcastAmmoChanges;                      // 0x031B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponComponentStateChangedDel;                         // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData16[0x18];                                      // 0x0330(0x0018) MISSED OFFSET
	bool                                               bIsInAction;                                              // 0x0348(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    ZoomFOVChanged;                                           // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EKSCharacterAimMode                                CachedAimMode;                                            // 0x0360(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0361(0x0003) MISSED OFFSET
	float                                              DefaultAimCameraTransitionTime;                           // 0x0364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimOverShoulderCameraTransitionTime;                      // 0x0368(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimDownSightsCameraTransitionTime;                        // 0x036C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnWeaponComponentAimModeChangedDel;                       // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x20];                                      // 0x0380(0x0020) MISSED OFFSET
	TArray<class UKSWeaponAttachmentCosmeticInst*>     AttachmentCosmetics;                                      // 0x03A0(0x0010) (ExportObject, ZeroConstructor)
	ESkinObjectParentingType                           _SkinObjectParenting;                                     // 0x03B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	int                                                ActiveIndex;                                              // 0x03B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEquipmentBecomeActiveDel;                               // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData21[0x18];                                      // 0x03C8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEquipmentEndActiveDel;                                  // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData22[0x50];                                      // 0x03F0(0x0050) MISSED OFFSET
	TArray<struct FDataTableInfo>                      BaseAssetDataTables;                                      // 0x0440(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bCreateDataTableForLegacyAssets;                          // 0x0450(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x7];                                       // 0x0451(0x0007) MISSED OFFSET
	class UDynamicSkinTable*                           AssetDataTableManager;                                    // 0x0458(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMultiSkinObject*                            _SkinObject;                                              // 0x0460(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x10];                                      // 0x0468(0x0010) MISSED OFFSET
	struct FVector                                     ViewModelScale;                                           // 0x0478(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    ViewModelRotation;                                        // 0x0484(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0x4];                                       // 0x0490(0x0004) MISSED OFFSET
	float                                              WeaponCombatStateCooldown;                                // 0x0494(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceNonCombatShotBlockDistance;                          // 0x0498(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData26[0x4];                                       // 0x049C(0x0004) MISSED OFFSET
	class UClass*                                      TargetingVisualizationClass;                              // 0x04A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsTargeting;                                             // 0x04A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData27[0x7];                                       // 0x04A9(0x0007) MISSED OFFSET
	class UKSWeaponTargetingModule*                    TargetingVisualizerInstance;                              // 0x04B0(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class URecoilProfileAsset*                         _RecoilProfileAsset;                                      // 0x04B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMeleeWeaponComponent;                                  // 0x04C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x7];                                       // 0x04C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponComponent");
		return ptr;
	}


	void UpdateOwnerLocallyViewed(bool* bIsLocallyViewed);
	void TriggerEngagement();
	void TriggerCombat();
	void TickViewerAim(float* DeltaTime);
	void TickNonViewerAim(float* DeltaTime);
	void StopDefaultAim();
	void StopAimOverShoulder();
	void StopAimDownSights();
	void StopAimAlternate();
	void StartDefaultAim();
	void StartAimOverShoulder();
	void StartAimDownSights();
	void StartAimAlternate();
	bool ShouldBroadcastWeaponStateChange(struct FKSWeaponDataUpdateContainer* OldState, struct FKSWeaponDataUpdateContainer* NewState, bool* bReliable);
	void SetWeaponVisibility(bool* Visible);
	void ReportNewWeaponLowerAlpha(float* NewAlpha, float* DeltaTime, bool* ForceReset);
	void OnWeaponStateChanged(EWeaponStateNew* OldState, EWeaponStateNew* NewState);
	void OnUnsetAsActivePrimaryWeapon();
	void OnSetAsActivePrimaryWeapon();
	void OnRep_WeaponState();
	void OnRep_WeaponAsset();
	void OnRep_InitialState();
	void OnRep_AmmoInClip();
	void OnInvalidFire();
	void OnInitialize();
	void OnFireWeaponFull(struct FFullFireRepData* Data);
	void OnFireWeapon(struct FAimData* Aim);
	void OnEmptyFire();
	void OnActiveMaterialsApplied(class USkinnableSkeletalMeshComponent** SkinnableSkelComp);
	void NotifyStopFireReceived();
	bool IsWeaponSilenced();
	bool IsWeaponPendingFireWithValidAmmo();
	bool IsReloading();
	bool IsPrimaryAciveWeapon();
	bool IsModelViewer();
	bool IsClipEmpty();
	bool IsAimingOverShoulder();
	bool IsAimingDownSights();
	bool IsAimingAlternate();
	bool IsAiming();
	bool IsAimedAtEnemy();
	bool IsActiveWeapon();
	EWeaponStateNew GetWeaponState();
	class UKSWeaponSkeletalMeshComponent* GetWeaponSkeletalMeshComponentNew();
	class USkeletalMeshComponent* GetWeaponSkeletalMeshComponent();
	class UKSWeaponAsset* GetWeaponAsset();
	class UAnimInstance* GetWeaponAnimInstance();
	float GetWalkSpeedModifier();
	struct FVector GetViewModelScale();
	struct FRotator GetViewModelRotation();
	class UForceFeedbackEffect* GetVibrationEffect();
	class UKSWeaponTargetingModule* GetTargetingModuleInstance();
	struct FName GetScopeSocketName();
	float GetRetrieveTime();
	float GetReloadTime();
	struct FName GetMuzzleSocketName();
	float GetMovementAccuracyPenalty();
	float GetMaxFiringAccuracyLoss();
	float GetMagnifierValue();
	void GetLoadedAccumulatedAttachmentOverrideData(struct FLoadedWeaponAttachmentAnimationData* OutData);
	float GetInAirAccuracyModifier();
	class UKSGrenadeTargetingModule* GetGrenadeTargetingModuleInstance();
	float GetFiringTime();
	class UKSWeaponSkeletalMeshComponent* GetDuplicateSkeletalMeshComponentNew();
	class USkeletalMeshComponent* GetDuplicateSkeletalMeshComponent();
	float GetCurrentAccuracy();
	float GetCrouchAccuracyModifier();
	unsigned char GetClipSize();
	float GetBaseRetrieveTime();
	float GetBaseReloadTime();
	float GetBaseFiringTime();
	float GetBaseAccuracy();
	void GetAttachments(TArray<class UKSWeaponAttachment*>* OutWeaponAttachments);
	void GetAttachmentCosmeticInstances(TArray<class UKSWeaponAttachmentCosmeticInst*>* OutWeaponAttachmentCosmetics);
	TArray<class USkeletalMeshComponent*> GetAncillaryMeshes();
	int GetAmmoInOwnerInventory();
	unsigned char GetAmmoInClip();
	class UForceFeedbackEffect* GetAlternativeVibrationEffect();
	class UForceFeedbackAttenuation* GetAlternativeVibrationAttenuation();
	float GetAimOverShoulderAccuracyModifier();
	EKSCharacterAimMode GetAimMode();
	float GetAdjustedRetrieveRate();
	float GetAdjustedReloadRate();
	float GetAdjustedFiringRate();
	int GetActiveIndex();
	float GetAccuracyReturnRate();
	float GetAccuracyReturnDelay();
	float GetAccuracyLossPerShot();
	void ForceRetrieveWeapon();
	void ForceHolsterWeapon();
	void ForceAimUpdate();
	void EventUpdateOwnerLocallyViewed(bool* bIsLocallyViewed);
	float EvaluateWeaponLowering(float* DeltaTime);
	void DropMagazine();
	class UKSWeaponSkeletalMeshComponent* CreateWeaponSkeletalMeshComponent();
	bool CanUseCombatState(ECombatState* TestState);
	bool CanReceiveAttachment(class UKSWeaponAttachment** InAttachment, struct FGameplayTagContainer* AvailableAttachPoints);
	bool CanLowerWeaponNow();
	void CancelReloadCosmetic();
	void BroadcastWeaponStateChange(uint32_t* BroadcastId, struct FKSWeaponDataUpdateContainer* NewState);
	void BroadcastReliableWeaponStateChange(uint32_t* BroadcastId, struct FKSWeaponDataUpdateContainer* NewState);
	void BroadcastReliablePostReload(uint32_t* BroadcastId, unsigned char* InAmmoInClip);
	void BroadcastReliablePostFireWithAmmo(uint32_t* BroadcastId, unsigned char* InAmmoInClip);
	void BroadcastReliableEmptyFire(uint32_t* BroadcastId);
	void BroadcastReliableAmmoChange(uint32_t* BroadcastId, unsigned char* InAmmoInClip);
	void BroadcastReliableAimedPostFireWithAmmo(uint32_t* BroadcastId, struct FAimData* Aim, unsigned char* InAmmoInClip);
	void BroadcastReliableAimedPostFireFull(uint32_t* BroadcastId, struct FFullFireRepData* Data);
	void BroadcastReliableAimedPostFire(uint32_t* BroadcastId, struct FAimData* Aim);
	void BroadcastPostReload(uint32_t* BroadcastId, unsigned char* InAmmoInClip);
	void BroadcastPostFireWithAmmo(uint32_t* BroadcastId, unsigned char* InAmmoInClip);
	void BroadcastEmptyFire(uint32_t* BroadcastId);
	void BroadcastAmmoChange(uint32_t* BroadcastId, unsigned char* InAmmoInClip);
	void BroadcastAimedPostFireWithAmmo(uint32_t* BroadcastId, struct FAimData* Aim, unsigned char* InAmmoInClip);
	void BroadcastAimedPostFireFull(uint32_t* BroadcastId, struct FFullFireRepData* Data);
	void BroadcastAimedPostFire(uint32_t* BroadcastId, struct FAimData* Aim);
	void BlueprintPrepareKillCamPlayback();
	void BlueprintPersistentCosmeticsUpdate();
	void BlueprintFinishKillCamPlayback();
	void BlueprintFillLegacyDataTable(class UDataTable** LegacyDataTable);
	void AimDownSightsCheckpoint();
};


// Class Killstreak.KSWeaponFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UKSWeaponFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponFunctionLibrary");
		return ptr;
	}


	void OnTraceReactionDelay__DelegateSignature(bool* bBlockingHit, TArray<struct FHitResult>* OutHits, struct FVector* start, struct FVector* end);
	bool STATIC_MultiLineWeaponTraceByObjectType(class UObject** WorldContextObject, class UKSWeaponAsset** Weapon, struct FVector* start, struct FVector* end, TArray<TEnumAsByte<EObjectTypeQuery>>* ObjectTypes, bool* bTraceComplex, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, bool* bIgnoreSelf, struct FLinearColor* TraceColor, struct FLinearColor* TraceHitColor, float* DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_MultiLineWeaponTraceByChannel(class UObject** WorldContextObject, class UKSWeaponAsset** Weapon, struct FVector* start, struct FVector* end, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, bool* bIgnoreSelf, struct FLinearColor* TraceColor, struct FLinearColor* TraceHitColor, float* DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_MeleeBoxOverlapComponents(class UObject** WorldContextObject, class UKSWeaponAsset** Weapon, struct FVector* BoxPos, struct FRotator* BoxRot, struct FVector* Extent, TArray<TEnumAsByte<EObjectTypeQuery>>* ObjectTypes, class UClass** ComponentClassFilter, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, struct FLinearColor* TraceColor, float* DrawTime, float* Thickness, TArray<class UPrimitiveComponent*>* OutComponents);
	bool STATIC_MeleeBoxOverlapActors(class UObject** WorldContextObject, class UKSWeaponAsset** Weapon, struct FVector* BoxPos, struct FRotator* BoxRot, struct FVector* BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>>* ObjectTypes, class UClass** ActorClassFilter, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, struct FLinearColor* TraceColor, float* DrawTime, float* Thickness, TArray<class AActor*>* OutActors);
	float STATIC_GetGadgetThrowSpeedMultiplier(class APawn** Instigator);
	float STATIC_GetGadgetOuterRadiusMultiplier(class APawn** Instigator);
	float STATIC_GetGadgetInnerRadiusMultiplier(class APawn** Instigator);
	float STATIC_GetGadgetFXSizeMultiplier(class APawn** Instigator);
	void STATIC_GenerateShotgunSpreadAimDataV2Exact(int* PelletCount, float* Accuracy, struct FAimData* InAim, class UKSWeaponAsset** InWeaponAsset, class AActor** InWeaponOwner, float* InRange, class UObject** WorldContextObject, struct FRandomStream* RandomStream, struct FAimData* OutAim);
	void STATIC_GenerateShotgunSpreadAimDataV2(int* PelletCount, float* Accuracy, struct FAimData* InAim, class UKSWeaponAsset** InWeaponAsset, struct FRandomStream* RandomStream, struct FAimData* OutAim);
	void STATIC_GenerateShotgunSpreadAimData(int* PelletCount, float* Accuracy, struct FAimData* Aim, struct FRandomStream* RandomStream, TArray<struct FAimData>* OutSpread);
	void STATIC_FrameDelayForTrace(class UObject** WorldContextObject, int* NumFramesToDelay, bool* bBlockingHit, TArray<struct FHitResult>* Hits, struct FVector* start, struct FVector* end, struct FScriptDelegate* OnDelayComplete, struct FLatentActionInfo* LatentInfo);
	void STATIC_FindShotgunPelletHitData(class AKSWeapon** InWeapon, TArray<struct FHitResult>* ShotgunHits, struct FShotgunHitData* PelletHitData);
	bool STATIC_EventSingleShotgunLineTraceByChannelV2(class UObject** WorldContextObject, struct FAimData* InAim, float* PelletRange, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, bool* bIgnoreSelf, struct FLinearColor* TraceColor, struct FLinearColor* TraceHitColor, float* DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_EventSingleShotgunLineTraceByChannel(class UObject** WorldContextObject, TArray<struct FAimData>* Spread, float* PelletRange, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, bool* bIgnoreSelf, struct FLinearColor* TraceColor, struct FLinearColor* TraceHitColor, float* DrawTime, TArray<struct FHitResult>* OutHits);
	void STATIC_EventMultiShotgunLineTraceByChannelV3(class UObject** WorldContextObject, int* ShotPenetrationCount, struct FAimData* InAim, float* PelletRange, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, bool* bIgnoreSelf, struct FLatentActionInfo* LatentInfo, struct FLinearColor* TraceColor, struct FLinearColor* TraceHitColor, float* DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_EventMultiShotgunLineTraceByChannelV2(class UObject** WorldContextObject, class UKSWeaponAsset** Weapon, int* ShotPenetrationCount, struct FAimData* InAim, float* PelletRange, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, bool* bIgnoreSelf, struct FLinearColor* TraceColor, struct FLinearColor* TraceHitColor, float* DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_EventMultiShotgunLineTraceByChannel(class UObject** WorldContextObject, class UKSWeaponAsset** Weapon, int* ShotPenetrationCount, TArray<struct FAimData>* Spread, float* PelletRange, TEnumAsByte<ETraceTypeQuery>* TraceChannel, bool* bTraceComplex, TArray<class AActor*>* ActorsToIgnore, TEnumAsByte<EDrawDebugTrace>* DrawDebugType, bool* bIgnoreSelf, struct FLinearColor* TraceColor, struct FLinearColor* TraceHitColor, float* DrawTime, TArray<struct FHitResult>* OutHits);
	bool STATIC_DoRadialDamageWithPreventionChannel(class UObject** WorldContextObject, struct FVector* Origin, class UKSWeaponAsset** InAsset, TArray<class AActor*>* IgnoreActors, class UClass** DamageTypeClass, class AController** DamageInstigator, class AActor** DamageCauser, TEnumAsByte<ECollisionChannel>* DamagePreventionChannel);
	bool STATIC_DoRadialDamage(class UObject** WorldContextObject, struct FVector* Origin, class UKSWeaponAsset** InAsset, TArray<class AActor*>* AdditionalIgnoreActors, class AController** DamageInstigator, class AActor** DamageCauser);
	float STATIC_DoPointDamage(class AActor** DamagedActor, float* BaseDamage, struct FVector* HitFromDirection, struct FHitResult* HitInfo, class AController** EventInstigator, class AActor** DamageCauser, class UClass** DamageTypeClass);
	void STATIC_CongregateShotgunHits(class AKSWeapon** InWeapon, TArray<struct FHitResult>* ShotgunHits, TArray<struct FCongregatedShotgunHit>* CongregatedResults);
};


// Class Killstreak.KSWeaponMasteryActivity
// 0x0040 (0x0228 - 0x01E8)
class UKSWeaponMasteryActivity : public UKSActivity
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01E8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.KSWeaponMasteryActivity.ReferenceWeapon
	unsigned char                                      UnknownData01[0x10];                                      // 0x0210(0x0010) UNKNOWN PROPERTY: ArrayProperty Killstreak.KSWeaponMasteryActivity.SecondaryReferenceWeapons
	EKSWeaponMasteryActivityType                       ReferenceType;                                            // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0221(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponMasteryActivity");
		return ptr;
	}

};


// Class Killstreak.KSWeaponMasteryManager
// 0x0050 (0x0210 - 0x01C0)
class UKSWeaponMasteryManager : public UKSActivityManagerBase
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01C0(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.KSWeaponMasteryManager.WeaponItemIdsInGame

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponMasteryManager");
		return ptr;
	}


	float GetKDAForWeapon(class UKSWeaponAsset** Weapon, class AKSPlayerController** Player);
	bool GetActivityInstancesWithWeapon(class UKSWeaponAsset** Weapon, class AKSPlayerController** Player, TArray<class UKSActivityInstance*>* OutActivityInstances);
	bool GetActivityInstancesWithType(EKSWeaponMasteryActivityType* Type, class AKSPlayerController** Player, TArray<class UKSActivityInstance*>* OutActivityInstances);
	float GetAccuracyForWeapon(class UKSWeaponAsset** Weapon, class AKSPlayerController** Player);
	class UKSWeaponMasteryActivity* FindActivityByWeaponAndType(class UKSWeaponAsset** Weapon, EKSWeaponMasteryActivityType* Type);
};


// Class Killstreak.KSWeaponSkeletalMeshComponent
// 0x0020 (0x0E00 - 0x0DE0)
class UKSWeaponSkeletalMeshComponent : public UKSSkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0DE0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWeaponSkeletalMeshComponent");
		return ptr;
	}

};


// Class Killstreak.KSWorldSettings
// 0x0078 (0x0510 - 0x0498)
class AKSWorldSettings : public APGame_WorldSettings
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0498(0x0010) MISSED OFFSET
	bool                                               bUseLowDrainBatteryMode;                                  // 0x04A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04A9(0x0007) MISSED OFFSET
	TArray<struct FString>                             HighMemorySublevelSuffixes;                               // 0x04B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             LowMemorySublevelSuffixes;                                // 0x04C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UParticleSystemPoolComponent*                _ParticleSystemPoolComponent;                             // 0x04D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UDecalPoolComponent*                         _DecalPoolComponent;                                      // 0x04D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTracerParticlePoolComponent*                _TracerParticlePoolComponent;                             // 0x04E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTracerStaticMeshPoolComponent*              _TracerStaticMeshPoolComponent;                           // 0x04E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkPoolComponent*                            _AkPoolComponent;                                         // 0x04F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                EchoRequestCount;                                         // 0x04F8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x04FC(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSWorldSettings");
		return ptr;
	}


	void LevelActorDestroyed(class AActor** TheActor);
};


// Class Killstreak.KSZipLineStart
// 0x0000 (0x0030 - 0x0030)
class UKSZipLineStart : public UKSInteractionState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSZipLineStart");
		return ptr;
	}

};


// Class Killstreak.KSZipLine
// 0x0078 (0x03A8 - 0x0330)
class AKSZipLine : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0330(0x0010) MISSED OFFSET
	TArray<class AKSCharacter*>                        ZipLiners;                                                // 0x0340(0x0010) (ZeroConstructor)
	struct FVector                                     ZipStart;                                                 // 0x0350(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ZipEnd;                                                   // 0x035C(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ZipHangOffset;                                            // 0x0368(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZipSpeed;                                                 // 0x0374(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bReadyToRide;                                             // 0x0378(0x0001) (Edit, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              CooldownTime;                                             // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumInteractTime;                                      // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InteractTime;                                             // 0x0384(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LengthToEndToIgnore;                                      // 0x0388(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUpline;                                                  // 0x038C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGrabFromBehind;                                          // 0x038D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x038E(0x0002) MISSED OFFSET
	class UClass*                                      InteractionType;                                          // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoReleaseDistance;                                      // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AutoReleaseSpeed;                                         // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AutoReleasePitchAngle;                                    // 0x03A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSupportsPreHold;                                         // 0x03A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03A5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSZipLine");
		return ptr;
	}


	void SetReadyToRide(bool* bIsReadyToRide);
	void OnPlayerZiplineCooldownEnd(class AKSCharacter** Character);
	void OnPlayerStopZiplining(class AKSCharacter** Character);
	void OnPlayerStartZiplining(class AKSCharacter** Character);
	bool IsUpline();
	float GetAutoReleaseDistance();
	struct FVector ComputeAutoReleaseVelocity(struct FRotator* CharRotation);
};


// Class Killstreak.KSZipLine_Dynamic
// 0x0000 (0x03A8 - 0x03A8)
class AKSZipLine_Dynamic : public AKSZipLine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSZipLine_Dynamic");
		return ptr;
	}


	void SetDynamicAnchors(struct FVector* StartAnchor, struct FVector* EndAnchor);
};


// Class Killstreak.KSZiplineAnimInst
// 0x0030 (0x0F40 - 0x0F10)
class UKSZiplineAnimInst : public UKSCharacterAnimInst
{
public:
	struct FRotator                                    UpperWheelRotator;                                        // 0x0F10(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LowerWheelRotator;                                        // 0x0F1C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    ZiplineTopLockRot;                                        // 0x0F28(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ZiplineTopLockRotModifierPitch;                           // 0x0F34(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ZiplineTopLockRotModifierRoll;                            // 0x0F38(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ZiplineTopLockRotModifierYaw;                             // 0x0F3C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.KSZiplineAnimInst");
		return ptr;
	}

};


// Class Killstreak.LoadingScreenImageManager
// 0x0070 (0x00A0 - 0x0030)
class ULoadingScreenImageManager : public UDataAsset
{
public:
	struct FLoadingScreenImageInfo                     FailSafeLoadingScreen;                                    // 0x0030(0x0070) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.LoadingScreenImageManager");
		return ptr;
	}

};


// Class Killstreak.LoadoutClassCollection
// 0x0050 (0x00E8 - 0x0098)
class ULoadoutClassCollection : public UItemCollection
{
public:
	struct FText                                       CollectionName;                                           // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       CollectionDescription;                                    // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00C8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.LoadoutClassCollection");
		return ptr;
	}

};


// Class Killstreak.LobbyPlayerController
// 0x0000 (0x06B0 - 0x06B0)
class ALobbyPlayerController : public APGame_PlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.LobbyPlayerController");
		return ptr;
	}


	void LoadRoute(struct FName* RouteName, bool* ForceTransition);
};


// Class Killstreak.ParticleSystemChannelComponent
// 0x0000 (0x0820 - 0x0820)
class UParticleSystemChannelComponent : public UParticleSystemComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.ParticleSystemChannelComponent");
		return ptr;
	}


	void UpdateChannels();
};


// Class Killstreak.PerkCategory
// 0x00B0 (0x0148 - 0x0098)
class UPerkCategory : public UItemCollection
{
public:
	struct FText                                       PerkCategoryName;                                         // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       PerkCategoryDescription;                                  // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x28];                                      // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftClassProperty Killstreak.PerkCategory.AssociatedPerkTree
	struct FLinearColor                                ThemeColorLight;                                          // 0x00F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ThemeColorDark;                                           // 0x0100(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0110(0x0010) MISSED OFFSET
	unsigned char                                      UnknownData02[0x28];                                      // 0x0110(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Killstreak.PerkCategory.PerkCategoryIcon

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.PerkCategory");
		return ptr;
	}


	void GetSoftCategoryIcon();
};


// Class Killstreak.SkinBundleCollection
// 0x00D0 (0x0168 - 0x0098)
class USkinBundleCollection : public UItemCollection
{
public:
	struct FText                                       SkinBundleCollectionName;                                 // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SkinBundleCollectionDescription;                          // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x00C8(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.SkinBundleCollection");
		return ptr;
	}

};


// Class Killstreak.SmoothRepTimelineActor
// 0x0020 (0x0350 - 0x0330)
class ASmoothRepTimelineActor : public AActor
{
public:
	struct FTimelineSimulationHandler                  SmoothTimeline;                                           // 0x0330(0x0014) (Edit, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	class UTimelineComponent*                          TimelineComponentToSimulate;                              // 0x0348(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.SmoothRepTimelineActor");
		return ptr;
	}


	void SetTimelineComponentToSimulate(class UTimelineComponent** InTimelineComponent);
	void OnRep_SmoothTimeline();
};


// Class Killstreak.SplineMovementComponent
// 0x0088 (0x01C0 - 0x0138)
class USplineMovementComponent : public UMovementComponent
{
public:
	unsigned char                                      bPauseOnImpact : 1;                                       // 0x0138(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	ESplineBehaviourType                               _BehaviourType;                                           // 0x013C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	unsigned char                                      bForceSubStepping : 1;                                    // 0x0140(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0141(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSplineReverse;                                          // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSplineStop;                                             // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                      // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                        // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                          // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                    // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USplineComponent*                            _Spline;                                                  // 0x01A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              Speed;                                                    // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x01AC(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.SplineMovementComponent");
		return ptr;
	}


	void StopSimulating(struct FHitResult* HitResult);
	void SetInitialOffsetOnSpline(float* Distance);
	void RestartMovement(float* InitialDirection);
	void OnSplineWaitEndDelegate__DelegateSignature(struct FHitResult* ImpactResult, float* Time);
	void OnSplineWaitBeginDelegate__DelegateSignature(struct FHitResult* ImpactResult, float* Time);
	void OnSplineStopDelegate__DelegateSignature(struct FHitResult* ImpactResult, float* Time);
	void OnSplineReverseDelegate__DelegateSignature(struct FHitResult* ImpactResult, float* Time);
	void OnSplineResetDelegate__DelegateSignature(struct FHitResult* ImpactResult, float* Time);
	void GoToTime(float* Time);
	float GetAlpha();
};


// Class Killstreak.ThermalScopeManagerComponent
// 0x0050 (0x0148 - 0x00F8)
class UThermalScopeManagerComponent : public UActorComponent
{
public:
	class UClass*                                      ThermalScopePPComponentClass;                             // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	class AKSCharacter*                                CharacterOwner;                                           // 0x0108(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	TArray<struct FActiveThermalPPComponentInfo>       ActiveThermals;                                           // 0x0110(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0120(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.ThermalScopeManagerComponent");
		return ptr;
	}


	class UThermalScopeManagerComponent* STATIC_CreateThermalManagerComponent(class AKSCharacter** InCharacter, class UKSWeaponComponent** InWeaponComponent, class UClass** ThermalPostProcessClass);
};


// Class Killstreak.ThermalScopePPComponent
// 0x0028 (0x0120 - 0x00F8)
class UThermalScopePPComponent : public UActorComponent
{
public:
	class UThermalScopeManagerComponent*               _ManagerComponent;                                        // 0x00F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class AKSPlayerCameraManager*                      CameraManagerOwner;                                       // 0x0100(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	class UMaterialInterface*                          ThermalPostProcessMaterial;                               // 0x0108(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    ThermalPostProcessMaterialDynamic;                        // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0118(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.ThermalScopePPComponent");
		return ptr;
	}

};


// Class Killstreak.TracerParticlePoolComponent
// 0x0000 (0x0198 - 0x0198)
class UTracerParticlePoolComponent : public UParticleSystemPoolComponentBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.TracerParticlePoolComponent");
		return ptr;
	}


	void OnTracerDestinationReached(class USceneComponent** TracerComponent);
};


// Class Killstreak.TracerParticleSystemComponent
// 0x0030 (0x0850 - 0x0820)
class UTracerParticleSystemComponent : public UParticleSystemComponent
{
public:
	struct FVector                                     start;                                                    // 0x0820(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     end;                                                      // 0x082C(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              TravelSpeed;                                              // 0x0838(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyOnDestinationReached;                             // 0x083C(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bDeactivateOnDestinationReached;                          // 0x083D(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableTravel;                                            // 0x083E(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x083F(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTracerParticleReachedDestiniationDel;                   // 0x0840(0x0010) (ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.TracerParticleSystemComponent");
		return ptr;
	}

};


// Class Killstreak.TracerStaticMeshComponent
// 0x0040 (0x0690 - 0x0650)
class UTracerStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0650(0x0008) MISSED OFFSET
	struct FVector                                     start;                                                    // 0x0658(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     end;                                                      // 0x0664(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              TravelSpeed;                                              // 0x0670(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyOnDestinationReached;                             // 0x0674(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableTravel;                                            // 0x0675(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0676(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTracerParticleReachedDestiniationDel;                   // 0x0678(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0688(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.TracerStaticMeshComponent");
		return ptr;
	}

};


// Class Killstreak.TracerStaticMeshPoolComponent
// 0x0078 (0x0190 - 0x0118)
class UTracerStaticMeshPoolComponent : public UBasePoolComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0118(0x0008) MISSED OFFSET
	class UClass*                                      PooledTraceStaticMeshComponentClass;                      // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UTracerStaticMeshComponent*>          UnusedComponentsArray;                                    // 0x0128(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0138(0x0050) UNKNOWN PROPERTY: SetProperty Killstreak.TracerStaticMeshPoolComponent.UsedComponentsSet
	class UTracerStaticMeshComponent*                  PeekedTracerStaticMeshComponent;                          // 0x0188(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.TracerStaticMeshPoolComponent");
		return ptr;
	}


	void OnTracerDestinationReached(class USceneComponent** TracerComponent);
};


// Class Killstreak.ViewDependentRules_1PCamera
// 0x0000 (0x0028 - 0x0028)
class UViewDependentRules_1PCamera : public UViewDependentAkEventRules
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.ViewDependentRules_1PCamera");
		return ptr;
	}

};


// Class Killstreak.WeaponCollection
// 0x0040 (0x00D8 - 0x0098)
class UWeaponCollection : public UItemCollection
{
public:
	struct FText                                       WeaponCollectionName;                                     // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       WeaponCollectionDescription;                              // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Killstreak.WeaponCollection");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
